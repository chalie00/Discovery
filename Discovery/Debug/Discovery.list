
Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a4  080090a4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080090a4  080090a4  000190a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090ac  080090ac  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090ac  080090ac  000190ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080090b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000089c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000092c  2000092c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c1a5  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043d0  00000000  00000000  0003c265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  00040638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001530  00000000  00000000  00041d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002514b  00000000  00000000  00043278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001edff  00000000  00000000  000683c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3f3b  00000000  00000000  000871c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b0fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000625c  00000000  00000000  0015b150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009070 	.word	0x08009070

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009070 	.word	0x08009070

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b76      	ldr	r3, [pc, #472]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a75      	ldr	r2, [pc, #468]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b73      	ldr	r3, [pc, #460]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b6f      	ldr	r3, [pc, #444]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a6e      	ldr	r2, [pc, #440]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b6c      	ldr	r3, [pc, #432]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b68      	ldr	r3, [pc, #416]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a67      	ldr	r2, [pc, #412]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b61      	ldr	r3, [pc, #388]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a60      	ldr	r2, [pc, #384]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b5e      	ldr	r3, [pc, #376]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b5a      	ldr	r3, [pc, #360]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a59      	ldr	r2, [pc, #356]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b57      	ldr	r3, [pc, #348]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b53      	ldr	r3, [pc, #332]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a52      	ldr	r2, [pc, #328]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b50      	ldr	r3, [pc, #320]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	484d      	ldr	r0, [pc, #308]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000590:	f001 f890 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	484b      	ldr	r0, [pc, #300]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 800059a:	f001 f88b 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f247 0110 	movw	r1, #28688	; 0x7010
 80005a4:	4849      	ldr	r0, [pc, #292]	; (80006cc <MX_GPIO_Init+0x200>)
 80005a6:	f001 f885 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	4840      	ldr	r0, [pc, #256]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 80005c2:	f000 fedb 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 80005de:	f000 fecd 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4832      	ldr	r0, [pc, #200]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 80005fe:	f000 febd 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000606:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	482e      	ldr	r0, [pc, #184]	; (80006d0 <MX_GPIO_Init+0x204>)
 8000618:	f000 feb0 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800061c:	2304      	movs	r3, #4
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <MX_GPIO_Init+0x208>)
 8000630:	f000 fea4 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000646:	2305      	movs	r3, #5
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4619      	mov	r1, r3
 8000650:	4820      	ldr	r0, [pc, #128]	; (80006d4 <MX_GPIO_Init+0x208>)
 8000652:	f000 fe93 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 8000656:	f247 0310 	movw	r3, #28688	; 0x7010
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0x200>)
 8000670:	f000 fe84 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000674:	2320      	movs	r3, #32
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_GPIO_Init+0x200>)
 8000688:	f000 fe78 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000690:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 80006a2:	f000 fe6b 	bl	800137c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2006      	movs	r0, #6
 80006ac:	f000 fe2f 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b0:	2006      	movs	r0, #6
 80006b2:	f000 fe48 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	; 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40020400 	.word	0x40020400

080006d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f002 fc23 	bl	8002f60 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f9d2 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000ac 	.word	0x200000ac
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_I2C_MspInit+0x84>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d12c      	bne.n	80007b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000772:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000784:	2304      	movs	r3, #4
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <HAL_I2C_MspInit+0x8c>)
 8000790:	f000 fdf4 	bl	800137c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_I2C_MspInit+0x88>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400

080007c4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <MX_I2S3_Init+0x58>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <MX_I2S3_Init+0x5c>)
 80007ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_I2S3_Init+0x54>)
 8000804:	f002 fcf0 	bl	80031e8 <HAL_I2S_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800080e:	f000 f95b 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000100 	.word	0x20000100
 800081c:	40003c00 	.word	0x40003c00
 8000820:	00017700 	.word	0x00017700

08000824 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a31      	ldr	r2, [pc, #196]	; (8000914 <HAL_I2S_MspInit+0xf0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d15a      	bne.n	800090a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000858:	23c0      	movs	r3, #192	; 0xc0
 800085a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fde3 	bl	8004430 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000870:	f000 f92a 	bl	8000ac8 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a26      	ldr	r2, [pc, #152]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 800087e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a18      	ldr	r2, [pc, #96]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <HAL_I2S_MspInit+0xf8>)
 80008e4:	f000 fd4a 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fa:	2306      	movs	r3, #6
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <HAL_I2S_MspInit+0xfc>)
 8000906:	f000 fd39 	bl	800137c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800090a:	bf00      	nop
 800090c:	3738      	adds	r7, #56	; 0x38
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40003c00 	.word	0x40003c00
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020800 	.word	0x40020800

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 fb80 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f83a 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f7ff fdcc 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000934:	f7ff fed0 	bl	80006d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000938:	f7ff ff44 	bl	80007c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800093c:	f000 f8ca 	bl	8000ad4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000940:	f007 ff4e 	bl	80087e0 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000944:	f000 fa52 	bl	8000dec <MX_TIM4_Init>
  MX_TIM2_Init();
 8000948:	f000 fa02 	bl	8000d50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800094c:	210c      	movs	r1, #12
 800094e:	4811      	ldr	r0, [pc, #68]	; (8000994 <main+0x70>)
 8000950:	f004 f850 	bl	80049f4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000954:	4810      	ldr	r0, [pc, #64]	; (8000998 <main+0x74>)
 8000956:	f003 ff83 	bl	8004860 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //매크�? ?��?���? 2개로 ?��?��
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, ccr);
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <main+0x78>)
 800095c:	881a      	ldrh	r2, [r3, #0]
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <main+0x70>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
	  //TIM4 -> CCR4 = ccr; //?��?�� 매크�? ???�� ?��?���? ?��?��?��?�� ?��
	  ccr += 1000;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <main+0x78>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800096c:	b29a      	uxth	r2, r3
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <main+0x78>)
 8000970:	801a      	strh	r2, [r3, #0]
	  if(ccr > TIM4->ARR) ccr = 0;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <main+0x78>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <main+0x7c>)
 800097a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097c:	429a      	cmp	r2, r3
 800097e:	d902      	bls.n	8000986 <main+0x62>
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <main+0x78>)
 8000982:	2200      	movs	r2, #0
 8000984:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(50);
 8000986:	2032      	movs	r0, #50	; 0x32
 8000988:	f000 fbc2 	bl	8001110 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800098c:	f007 ff4e 	bl	800882c <MX_USB_HOST_Process>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, ccr);
 8000990:	e7e3      	b.n	800095a <main+0x36>
 8000992:	bf00      	nop
 8000994:	200001f0 	.word	0x200001f0
 8000998:	200001a8 	.word	0x200001a8
 800099c:	20000148 	.word	0x20000148
 80009a0:	40000800 	.word	0x40000800

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2230      	movs	r2, #48	; 0x30
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f008 fa56 	bl	8008e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <SystemClock_Config+0xcc>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a27      	ldr	r2, [pc, #156]	; (8000a70 <SystemClock_Config+0xcc>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <SystemClock_Config+0xcc>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <SystemClock_Config+0xd0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <SystemClock_Config+0xd0>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <SystemClock_Config+0xd0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a14:	2308      	movs	r3, #8
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a22:	2307      	movs	r3, #7
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 f87c 	bl	8003b28 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a36:	f000 f847 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2105      	movs	r1, #5
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 fadd 	bl	8004018 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a64:	f000 f830 	bl	8000ac8 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3750      	adds	r7, #80	; 0x50
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//Interrupt Switch
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d104      	bne.n	8000a92 <HAL_GPIO_EXTI_Callback+0x1a>
		Blue_LED_Toggle;
 8000a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x24>)
 8000a8e:	f000 fe2a 	bl	80016e6 <HAL_GPIO_TogglePin>
	}
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <HAL_TIM_PeriodElapsedCallback>:

//Timer Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab0:	d104      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0x1c>
		Green_LED_Toggle;
 8000ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ab8:	f000 fe15 	bl	80016e6 <HAL_GPIO_TogglePin>
	}
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020c00 	.word	0x40020c00

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000ada:	4a18      	ldr	r2, [pc, #96]	; (8000b3c <MX_SPI1_Init+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000b20:	220a      	movs	r2, #10
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_SPI1_Init+0x64>)
 8000b26:	f003 fdc3 	bl	80046b0 <HAL_SPI_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b30:	f7ff ffca 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000014c 	.word	0x2000014c
 8000b3c:	40013000 	.word	0x40013000

08000b40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_SPI_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b9a:	23e0      	movs	r3, #224	; 0xe0
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000baa:	2305      	movs	r3, #5
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_SPI_MspInit+0x8c>)
 8000bb6:	f000 fbe1 	bl	800137c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 fb72 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 fa30 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 fd4f 	bl	800171c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <TIM2_IRQHandler+0x10>)
 8000c8a:	f003 ff7b 	bl	8004b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001a8 	.word	0x200001a8

08000c98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <TIM4_IRQHandler+0x10>)
 8000c9e:	f003 ff71 	bl	8004b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001f0 	.word	0x200001f0

08000cac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <OTG_FS_IRQHandler+0x10>)
 8000cb2:	f000 ffb5 	bl	8001c20 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000618 	.word	0x20000618

08000cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <_sbrk+0x5c>)
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <_sbrk+0x60>)
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <_sbrk+0x64>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <_sbrk+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d207      	bcs.n	8000d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf0:	f008 f87e 	bl	8008df0 <__errno>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	e009      	b.n	8000d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <_sbrk+0x64>)
 8000d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d12:	68fb      	ldr	r3, [r7, #12]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20020000 	.word	0x20020000
 8000d20:	00000400 	.word	0x00000400
 8000d24:	200001a4 	.word	0x200001a4
 8000d28:	20000930 	.word	0x20000930

08000d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <SystemInit+0x20>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <SystemInit+0x20>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d76:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d84:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d98:	f003 fd13 	bl	80047c2 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000da2:	f7ff fe91 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000db4:	f004 f8b0 	bl	8004f18 <HAL_TIM_ConfigClockSource>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dbe:	f7ff fe83 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000dd0:	f004 fca2 	bl	8005718 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dda:	f7ff fe75 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001a8 	.word	0x200001a8

08000dec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e1e:	4a2e      	ldr	r2, [pc, #184]	; (8000ed8 <MX_TIM4_Init+0xec>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e24:	2213      	movs	r2, #19
 8000e26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000-1;
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e30:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000e34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e42:	4824      	ldr	r0, [pc, #144]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e44:	f003 fcbd 	bl	80047c2 <HAL_TIM_Base_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e4e:	f7ff fe3b 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	481d      	ldr	r0, [pc, #116]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e60:	f004 f85a 	bl	8004f18 <HAL_TIM_ConfigClockSource>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e6a:	f7ff fe2d 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e6e:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e70:	f003 fd66 	bl	8004940 <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e7a:	f7ff fe25 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e86:	f107 0320 	add.w	r3, r7, #32
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000e8e:	f004 fc43 	bl	8005718 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e98:	f7ff fe16 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9c:	2360      	movs	r3, #96	; 0x60
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21000-1;
 8000ea0:	f245 2307 	movw	r3, #20999	; 0x5207
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000eb6:	f003 ff6d 	bl	8004d94 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ec0:	f7ff fe02 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <MX_TIM4_Init+0xe8>)
 8000ec6:	f000 f84d 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	; 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200001f0 	.word	0x200001f0
 8000ed8:	40000800 	.word	0x40000800

08000edc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eec:	d116      	bne.n	8000f1c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f000 f9fd 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f14:	201c      	movs	r0, #28
 8000f16:	f000 fa16 	bl	8001346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f1a:	e01a      	b.n	8000f52 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <HAL_TIM_Base_MspInit+0x84>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d115      	bne.n	8000f52 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	201e      	movs	r0, #30
 8000f48:	f000 f9e1 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f4c:	201e      	movs	r0, #30
 8000f4e:	f000 f9fa 	bl	8001346 <HAL_NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40000800 	.word	0x40000800

08000f64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <HAL_TIM_MspPostInit+0x68>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d11e      	bne.n	8000fc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_TIM_MspPostInit+0x70>)
 8000fc0:	f000 f9dc 	bl	800137c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40000800 	.word	0x40000800
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020c00 	.word	0x40020c00

08000fd8 <Reset_Handler>:
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopFillZerobss+0x12>
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <LoopFillZerobss+0x1a>)
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <LoopFillZerobss+0x1e>)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:
 8000fe6:	58d4      	ldr	r4, [r2, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:
 8000fec:	18c4      	adds	r4, r0, r3
 8000fee:	428c      	cmp	r4, r1
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopFillZerobss+0x22>)
 8000ff4:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <LoopFillZerobss+0x26>)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:
 8000ffe:	42a2      	cmp	r2, r4
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>
 8001002:	f7ff fe93 	bl	8000d2c <SystemInit>
 8001006:	f007 fef9 	bl	8008dfc <__libc_init_array>
 800100a:	f7ff fc8b 	bl	8000924 <main>
 800100e:	4770      	bx	lr
 8001010:	20020000 	.word	0x20020000
 8001014:	20000000 	.word	0x20000000
 8001018:	20000090 	.word	0x20000090
 800101c:	080090b4 	.word	0x080090b4
 8001020:	20000090 	.word	0x20000090
 8001024:	2000092c 	.word	0x2000092c

08001028 <ADC_IRQHandler>:
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <HAL_Init+0x40>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_Init+0x40>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x40>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f94f 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fdb6 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f967 	bl	8001362 <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f92f 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000238 	.word	0x20000238

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000238 	.word	0x20000238

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	; (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff29 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff3e 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff8e 	bl	800124c <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5d 	bl	80011f8 <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff31 	bl	80011bc <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	e16b      	b.n	8001670 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 815a 	bne.w	800166a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d005      	beq.n	80013ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d130      	bne.n	8001430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2203      	movs	r2, #3
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 0201 	and.w	r2, r3, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b03      	cmp	r3, #3
 800143a:	d017      	beq.n	800146c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d123      	bne.n	80014c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	08da      	lsrs	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3208      	adds	r2, #8
 8001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80b4 	beq.w	800166a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b60      	ldr	r3, [pc, #384]	; (8001688 <HAL_GPIO_Init+0x30c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a5f      	ldr	r2, [pc, #380]	; (8001688 <HAL_GPIO_Init+0x30c>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <HAL_GPIO_Init+0x30c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151e:	4a5b      	ldr	r2, [pc, #364]	; (800168c <HAL_GPIO_Init+0x310>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_GPIO_Init+0x314>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d02b      	beq.n	80015a2 <HAL_GPIO_Init+0x226>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a51      	ldr	r2, [pc, #324]	; (8001694 <HAL_GPIO_Init+0x318>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d025      	beq.n	800159e <HAL_GPIO_Init+0x222>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_GPIO_Init+0x31c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x21e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_GPIO_Init+0x320>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x21a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_GPIO_Init+0x324>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x216>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4d      	ldr	r2, [pc, #308]	; (80016a4 <HAL_GPIO_Init+0x328>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x212>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4c      	ldr	r2, [pc, #304]	; (80016a8 <HAL_GPIO_Init+0x32c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x20e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_GPIO_Init+0x330>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x20a>
 8001582:	2307      	movs	r3, #7
 8001584:	e00e      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 8001586:	2308      	movs	r3, #8
 8001588:	e00c      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800158a:	2306      	movs	r3, #6
 800158c:	e00a      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800158e:	2305      	movs	r3, #5
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 8001592:	2304      	movs	r3, #4
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	; (800168c <HAL_GPIO_Init+0x310>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e6:	4a32      	ldr	r2, [pc, #200]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ec:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_GPIO_Init+0x334>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001664:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f ae90 	bls.w	8001398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021400 	.word	0x40021400
 80016a8:	40021800 	.word	0x40021800
 80016ac:	40021c00 	.word	0x40021c00
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f8:	887a      	ldrh	r2, [r7, #2]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43d9      	mvns	r1, r3
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	400b      	ands	r3, r1
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f99c 	bl	8000a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800174c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174e:	b08f      	sub	sp, #60	; 0x3c
 8001750:	af0a      	add	r7, sp, #40	; 0x28
 8001752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e054      	b.n	8001808 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d106      	bne.n	800177e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f007 f88f 	bl	800889c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2203      	movs	r2, #3
 8001782:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f004 f8bd 	bl	800591c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	687e      	ldr	r6, [r7, #4]
 80017aa:	466d      	mov	r5, sp
 80017ac:	f106 0410 	add.w	r4, r6, #16
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c0:	1d33      	adds	r3, r6, #4
 80017c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c4:	6838      	ldr	r0, [r7, #0]
 80017c6:	f004 f837 	bl	8005838 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2101      	movs	r1, #1
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 f8b4 	bl	800593e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	687e      	ldr	r6, [r7, #4]
 80017de:	466d      	mov	r5, sp
 80017e0:	f106 0410 	add.w	r4, r6, #16
 80017e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80017f4:	1d33      	adds	r3, r6, #4
 80017f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f8:	6838      	ldr	r0, [r7, #0]
 80017fa:	f004 fa3d 	bl	8005c78 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001810 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af04      	add	r7, sp, #16
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	4603      	mov	r3, r0
 8001820:	70fb      	strb	r3, [r7, #3]
 8001822:	460b      	mov	r3, r1
 8001824:	70bb      	strb	r3, [r7, #2]
 8001826:	4613      	mov	r3, r2
 8001828:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_HCD_HC_Init+0x28>
 8001834:	2302      	movs	r3, #2
 8001836:	e076      	b.n	8001926 <HAL_HCD_HC_Init+0x116>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	333d      	adds	r3, #61	; 0x3d
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3338      	adds	r3, #56	; 0x38
 8001860:	787a      	ldrb	r2, [r7, #1]
 8001862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3340      	adds	r3, #64	; 0x40
 8001872:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001874:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3339      	adds	r3, #57	; 0x39
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	333f      	adds	r3, #63	; 0x3f
 8001896:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800189a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	78ba      	ldrb	r2, [r7, #2]
 80018a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018a4:	b2d0      	uxtb	r0, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	333a      	adds	r3, #58	; 0x3a
 80018b2:	4602      	mov	r2, r0
 80018b4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da09      	bge.n	80018d2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	333b      	adds	r3, #59	; 0x3b
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e008      	b.n	80018e4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	333b      	adds	r3, #59	; 0x3b
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	333c      	adds	r3, #60	; 0x3c
 80018f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018f6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	787c      	ldrb	r4, [r7, #1]
 80018fe:	78ba      	ldrb	r2, [r7, #2]
 8001900:	78f9      	ldrb	r1, [r7, #3]
 8001902:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	4623      	mov	r3, r4
 8001914:	f004 fb36 	bl	8005f84 <USB_HC_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}

0800192e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_HCD_HC_Halt+0x1e>
 8001948:	2302      	movs	r3, #2
 800194a:	e00f      	b.n	800196c <HAL_HCD_HC_Halt+0x3e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fd86 	bl	800646e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4603      	mov	r3, r0
 8001984:	70fb      	strb	r3, [r7, #3]
 8001986:	460b      	mov	r3, r1
 8001988:	70bb      	strb	r3, [r7, #2]
 800198a:	4613      	mov	r3, r2
 800198c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	333b      	adds	r3, #59	; 0x3b
 800199c:	78ba      	ldrb	r2, [r7, #2]
 800199e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	333f      	adds	r3, #63	; 0x3f
 80019ae:	787a      	ldrb	r2, [r7, #1]
 80019b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019b2:	7c3b      	ldrb	r3, [r7, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d112      	bne.n	80019de <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3342      	adds	r3, #66	; 0x42
 80019c6:	2203      	movs	r2, #3
 80019c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	333d      	adds	r3, #61	; 0x3d
 80019d8:	7f3a      	ldrb	r2, [r7, #28]
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e008      	b.n	80019f0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3342      	adds	r3, #66	; 0x42
 80019ec:	2202      	movs	r2, #2
 80019ee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	f200 80c6 	bhi.w	8001b84 <HAL_HCD_HC_SubmitRequest+0x210>
 80019f8:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fe:	bf00      	nop
 8001a00:	08001a11 	.word	0x08001a11
 8001a04:	08001b71 	.word	0x08001b71
 8001a08:	08001a75 	.word	0x08001a75
 8001a0c:	08001af3 	.word	0x08001af3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a10:	7c3b      	ldrb	r3, [r7, #16]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f040 80b8 	bne.w	8001b88 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a18:	78bb      	ldrb	r3, [r7, #2]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 80b4 	bne.w	8001b88 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a20:	8b3b      	ldrh	r3, [r7, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3355      	adds	r3, #85	; 0x55
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	212c      	movs	r1, #44	; 0x2c
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	3355      	adds	r3, #85	; 0x55
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	212c      	movs	r1, #44	; 0x2c
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	3342      	adds	r3, #66	; 0x42
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a5e:	e093      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	212c      	movs	r1, #44	; 0x2c
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3342      	adds	r3, #66	; 0x42
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]
      break;
 8001a72:	e089      	b.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a74:	78bb      	ldrb	r3, [r7, #2]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11d      	bne.n	8001ab6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3355      	adds	r3, #85	; 0x55
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	212c      	movs	r1, #44	; 0x2c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	3342      	adds	r3, #66	; 0x42
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001aa0:	e073      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	212c      	movs	r1, #44	; 0x2c
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	3342      	adds	r3, #66	; 0x42
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
      break;
 8001ab4:	e069      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	212c      	movs	r1, #44	; 0x2c
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3354      	adds	r3, #84	; 0x54
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3342      	adds	r3, #66	; 0x42
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
      break;
 8001adc:	e055      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	212c      	movs	r1, #44	; 0x2c
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3342      	adds	r3, #66	; 0x42
 8001aec:	2202      	movs	r2, #2
 8001aee:	701a      	strb	r2, [r3, #0]
      break;
 8001af0:	e04b      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001af2:	78bb      	ldrb	r3, [r7, #2]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11d      	bne.n	8001b34 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	3355      	adds	r3, #85	; 0x55
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3342      	adds	r3, #66	; 0x42
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b1e:	e034      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	212c      	movs	r1, #44	; 0x2c
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3342      	adds	r3, #66	; 0x42
 8001b2e:	2202      	movs	r2, #2
 8001b30:	701a      	strb	r2, [r3, #0]
      break;
 8001b32:	e02a      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3354      	adds	r3, #84	; 0x54
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	212c      	movs	r1, #44	; 0x2c
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	3342      	adds	r3, #66	; 0x42
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
      break;
 8001b5a:	e016      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3342      	adds	r3, #66	; 0x42
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	701a      	strb	r2, [r3, #0]
      break;
 8001b6e:	e00c      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	212c      	movs	r1, #44	; 0x2c
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3342      	adds	r3, #66	; 0x42
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
      break;
 8001b82:	e002      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b84:	bf00      	nop
 8001b86:	e000      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b88:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	3344      	adds	r3, #68	; 0x44
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	8b3a      	ldrh	r2, [r7, #24]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	202c      	movs	r0, #44	; 0x2c
 8001ba4:	fb00 f303 	mul.w	r3, r0, r3
 8001ba8:	440b      	add	r3, r1
 8001baa:	334c      	adds	r3, #76	; 0x4c
 8001bac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3360      	adds	r3, #96	; 0x60
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3350      	adds	r3, #80	; 0x50
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3339      	adds	r3, #57	; 0x39
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	212c      	movs	r1, #44	; 0x2c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	3361      	adds	r3, #97	; 0x61
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	222c      	movs	r2, #44	; 0x2c
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	3338      	adds	r3, #56	; 0x38
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	18d1      	adds	r1, r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f004 fada 	bl	80061c8 <USB_HC_StartXfer>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop

08001c20 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 ffdb 	bl	8005bf2 <USB_GetMode>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	f040 80f6 	bne.w	8001e30 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 ffbf 	bl	8005bcc <USB_ReadInterrupts>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80ec 	beq.w	8001e2e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 ffb6 	bl	8005bcc <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c6a:	d104      	bne.n	8001c76 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 ffa6 	bl	8005bcc <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c8a:	d104      	bne.n	8001c96 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 ff96 	bl	8005bcc <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001caa:	d104      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 ff86 	bl	8005bcc <USB_ReadInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d103      	bne.n	8001cd2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 ff78 	bl	8005bcc <USB_ReadInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ce6:	d11c      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cf0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10f      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d02:	2110      	movs	r1, #16
 8001d04:	6938      	ldr	r0, [r7, #16]
 8001d06:	f003 fe67 	bl	80059d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d0a:	6938      	ldr	r0, [r7, #16]
 8001d0c:	f003 fe98 	bl	8005a40 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 f86e 	bl	8005df8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f006 fe3b 	bl	8008998 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 ff50 	bl	8005bcc <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d36:	d102      	bne.n	8001d3e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f001 f89e 	bl	8002e7a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 ff42 	bl	8005bcc <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d106      	bne.n	8001d60 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f006 fe04 	bl	8008960 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 ff31 	bl	8005bcc <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b10      	cmp	r3, #16
 8001d72:	d101      	bne.n	8001d78 <HAL_HCD_IRQHandler+0x158>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_HCD_IRQHandler+0x15a>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0210 	bic.w	r2, r2, #16
 8001d8c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 ffa1 	bl	8002cd6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0210 	orr.w	r2, r2, #16
 8001da2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 ff0f 	bl	8005bcc <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001db8:	d13a      	bne.n	8001e30 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 fb44 	bl	800644c <USB_HC_ReadInterrupt>
 8001dc4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e025      	b.n	8001e18 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d018      	beq.n	8001e12 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df6:	d106      	bne.n	8001e06 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8ab 	bl	8001f5a <HCD_HC_IN_IRQHandler>
 8001e04:	e005      	b.n	8001e12 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fbf9 	bl	8002604 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d3d4      	bcc.n	8001dcc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	e000      	b.n	8001e30 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e2e:	bf00      	nop
    }
  }
}
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_HCD_Start+0x16>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e013      	b.n	8001e74 <HAL_HCD_Start+0x3e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 f830 	bl	8005ec0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 fd48 	bl	80058fa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_HCD_Stop+0x16>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e00d      	b.n	8001eae <HAL_HCD_Stop+0x32>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 fc1e 	bl	80066e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 ffd2 	bl	8005e6c <USB_ResetPort>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3360      	adds	r3, #96	; 0x60
 8001eec:	781b      	ldrb	r3, [r3, #0]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	212c      	movs	r1, #44	; 0x2c
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	3350      	adds	r3, #80	; 0x50
 8001f14:	681b      	ldr	r3, [r3, #0]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 f816 	bl	8005f60 <USB_GetCurrentFrame>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fff1 	bl	8005f32 <USB_GetHostSpeed>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d11a      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f96:	461a      	mov	r2, r3
 8001f98:	2304      	movs	r3, #4
 8001f9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3361      	adds	r3, #97	; 0x61
 8001faa:	2206      	movs	r2, #6
 8001fac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f004 fa58 	bl	800646e <USB_HC_Halt>
 8001fbe:	e0af      	b.n	8002120 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd6:	d11b      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	212c      	movs	r1, #44	; 0x2c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3361      	adds	r3, #97	; 0x61
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f004 fa30 	bl	800646e <USB_HC_Halt>
 800200e:	e087      	b.n	8002120 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b20      	cmp	r3, #32
 8002024:	d109      	bne.n	800203a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	461a      	mov	r2, r3
 8002034:	2320      	movs	r3, #32
 8002036:	6093      	str	r3, [r2, #8]
 8002038:	e072      	b.n	8002120 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b08      	cmp	r3, #8
 800204e:	d11a      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	461a      	mov	r2, r3
 800205e:	2308      	movs	r3, #8
 8002060:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3361      	adds	r3, #97	; 0x61
 8002070:	2205      	movs	r2, #5
 8002072:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f004 f9f5 	bl	800646e <USB_HC_Halt>
 8002084:	e04c      	b.n	8002120 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	d11b      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	461a      	mov	r2, r3
 80020ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3361      	adds	r3, #97	; 0x61
 80020c0:	2208      	movs	r2, #8
 80020c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f004 f9cd 	bl	800646e <USB_HC_Halt>
 80020d4:	e024      	b.n	8002120 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e8:	2b80      	cmp	r3, #128	; 0x80
 80020ea:	d119      	bne.n	8002120 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	461a      	mov	r2, r3
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3361      	adds	r3, #97	; 0x61
 800210c:	2206      	movs	r2, #6
 800210e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f004 f9a7 	bl	800646e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002136:	d112      	bne.n	800215e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f004 f993 	bl	800646e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	461a      	mov	r2, r3
 8002156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800215c:	e24e      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	f040 80df 	bne.w	8002334 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d019      	beq.n	80021b2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3348      	adds	r3, #72	; 0x48
 800218c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	0159      	lsls	r1, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	440b      	add	r3, r1
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021a0:	1ad2      	subs	r2, r2, r3
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	202c      	movs	r0, #44	; 0x2c
 80021a8:	fb00 f303 	mul.w	r3, r0, r3
 80021ac:	440b      	add	r3, r1
 80021ae:	3350      	adds	r3, #80	; 0x50
 80021b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3361      	adds	r3, #97	; 0x61
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	335c      	adds	r3, #92	; 0x5c
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	2301      	movs	r3, #1
 80021e6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	333f      	adds	r3, #63	; 0x3f
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d009      	beq.n	8002210 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	333f      	adds	r3, #63	; 0x3f
 800220a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800220c:	2b02      	cmp	r3, #2
 800220e:	d111      	bne.n	8002234 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f004 f927 	bl	800646e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	461a      	mov	r2, r3
 800222e:	2310      	movs	r3, #16
 8002230:	6093      	str	r3, [r2, #8]
 8002232:	e03a      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	333f      	adds	r3, #63	; 0x3f
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d009      	beq.n	800225c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	333f      	adds	r3, #63	; 0x3f
 8002256:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002258:	2b01      	cmp	r3, #1
 800225a:	d126      	bne.n	80022aa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	0151      	lsls	r1, r2, #5
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	440a      	add	r2, r1
 8002272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800227a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3360      	adds	r3, #96	; 0x60
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	b2d9      	uxtb	r1, r3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	202c      	movs	r0, #44	; 0x2c
 8002298:	fb00 f303 	mul.w	r3, r0, r3
 800229c:	4413      	add	r3, r2
 800229e:	3360      	adds	r3, #96	; 0x60
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f006 fb85 	bl	80089b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d12b      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3348      	adds	r3, #72	; 0x48
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	202c      	movs	r0, #44	; 0x2c
 80022c8:	fb00 f202 	mul.w	r2, r0, r2
 80022cc:	440a      	add	r2, r1
 80022ce:	3240      	adds	r2, #64	; 0x40
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 818e 	beq.w	80025fc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3354      	adds	r3, #84	; 0x54
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2d8      	uxtb	r0, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3354      	adds	r3, #84	; 0x54
 8002304:	4602      	mov	r2, r0
 8002306:	701a      	strb	r2, [r3, #0]
}
 8002308:	e178      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3354      	adds	r3, #84	; 0x54
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f083 0301 	eor.w	r3, r3, #1
 800231e:	b2d8      	uxtb	r0, r3
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3354      	adds	r3, #84	; 0x54
 800232e:	4602      	mov	r2, r0
 8002330:	701a      	strb	r2, [r3, #0]
}
 8002332:	e163      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	f040 80f6 	bne.w	8002538 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3361      	adds	r3, #97	; 0x61
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d109      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3360      	adds	r3, #96	; 0x60
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e0c9      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3361      	adds	r3, #97	; 0x61
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d109      	bne.n	800239c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	3360      	adds	r3, #96	; 0x60
 8002396:	2205      	movs	r2, #5
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e0b5      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3361      	adds	r3, #97	; 0x61
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d009      	beq.n	80023c4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3361      	adds	r3, #97	; 0x61
 80023be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d150      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	335c      	adds	r3, #92	; 0x5c
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	202c      	movs	r0, #44	; 0x2c
 80023dc:	fb00 f303 	mul.w	r3, r0, r3
 80023e0:	440b      	add	r3, r1
 80023e2:	335c      	adds	r3, #92	; 0x5c
 80023e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	335c      	adds	r3, #92	; 0x5c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d912      	bls.n	8002420 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	335c      	adds	r3, #92	; 0x5c
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	212c      	movs	r1, #44	; 0x2c
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	3360      	adds	r3, #96	; 0x60
 800241a:	2204      	movs	r2, #4
 800241c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800241e:	e073      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3360      	adds	r3, #96	; 0x60
 800242e:	2202      	movs	r2, #2
 8002430:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002448:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002450:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002464:	e050      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3361      	adds	r3, #97	; 0x61
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d122      	bne.n	80024c0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3360      	adds	r3, #96	; 0x60
 8002488:	2202      	movs	r2, #2
 800248a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e023      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3361      	adds	r3, #97	; 0x61
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b07      	cmp	r3, #7
 80024d2:	d119      	bne.n	8002508 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	335c      	adds	r3, #92	; 0x5c
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	202c      	movs	r0, #44	; 0x2c
 80024ec:	fb00 f303 	mul.w	r3, r0, r3
 80024f0:	440b      	add	r3, r1
 80024f2:	335c      	adds	r3, #92	; 0x5c
 80024f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3360      	adds	r3, #96	; 0x60
 8002504:	2204      	movs	r2, #4
 8002506:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2302      	movs	r3, #2
 8002518:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	b2d9      	uxtb	r1, r3
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	202c      	movs	r0, #44	; 0x2c
 8002524:	fb00 f303 	mul.w	r3, r0, r3
 8002528:	4413      	add	r3, r2
 800252a:	3360      	adds	r3, #96	; 0x60
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f006 fa3f 	bl	80089b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002536:	e061      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b10      	cmp	r3, #16
 800254c:	d156      	bne.n	80025fc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	333f      	adds	r3, #63	; 0x3f
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d111      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f003 ff75 	bl	800646e <USB_HC_Halt>
 8002584:	e031      	b.n	80025ea <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	333f      	adds	r3, #63	; 0x3f
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	333f      	adds	r3, #63	; 0x3f
 80025a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d11d      	bne.n	80025ea <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	335c      	adds	r3, #92	; 0x5c
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d110      	bne.n	80025ea <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3361      	adds	r3, #97	; 0x61
 80025d6:	2203      	movs	r2, #3
 80025d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 ff42 	bl	800646e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	2310      	movs	r3, #16
 80025fa:	6093      	str	r3, [r2, #8]
}
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11a      	bne.n	800266a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	2304      	movs	r3, #4
 8002644:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3361      	adds	r3, #97	; 0x61
 8002654:	2206      	movs	r2, #6
 8002656:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f003 ff03 	bl	800646e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002668:	e331      	b.n	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b20      	cmp	r3, #32
 800267e:	d12e      	bne.n	80026de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	461a      	mov	r2, r3
 800268e:	2320      	movs	r3, #32
 8002690:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	333d      	adds	r3, #61	; 0x3d
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	f040 8313 	bne.w	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	333d      	adds	r3, #61	; 0x3d
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3360      	adds	r3, #96	; 0x60
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fec9 	bl	800646e <USB_HC_Halt>
}
 80026dc:	e2f7      	b.n	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f4:	d112      	bne.n	800271c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002702:	461a      	mov	r2, r3
 8002704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002708:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f003 feaa 	bl	800646e <USB_HC_Halt>
}
 800271a:	e2d8      	b.n	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d140      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	335c      	adds	r3, #92	; 0x5c
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d111      	bne.n	800277e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	333d      	adds	r3, #61	; 0x3d
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	461a      	mov	r2, r3
 800277a:	2340      	movs	r3, #64	; 0x40
 800277c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2301      	movs	r3, #1
 800278e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3361      	adds	r3, #97	; 0x61
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fe5e 	bl	800646e <USB_HC_Halt>
}
 80027b2:	e28c      	b.n	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d12c      	bne.n	8002824 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3361      	adds	r3, #97	; 0x61
 80027d8:	2204      	movs	r2, #4
 80027da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	333d      	adds	r3, #61	; 0x3d
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	335c      	adds	r3, #92	; 0x5c
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fe2f 	bl	800646e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2340      	movs	r3, #64	; 0x40
 8002820:	6093      	str	r3, [r2, #8]
}
 8002822:	e254      	b.n	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b08      	cmp	r3, #8
 8002838:	d11a      	bne.n	8002870 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	461a      	mov	r2, r3
 8002848:	2308      	movs	r3, #8
 800284a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3361      	adds	r3, #97	; 0x61
 800285a:	2205      	movs	r2, #5
 800285c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f003 fe00 	bl	800646e <USB_HC_Halt>
}
 800286e:	e22e      	b.n	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b10      	cmp	r3, #16
 8002884:	d140      	bne.n	8002908 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	335c      	adds	r3, #92	; 0x5c
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3361      	adds	r3, #97	; 0x61
 80028a6:	2203      	movs	r2, #3
 80028a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	333d      	adds	r3, #61	; 0x3d
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d112      	bne.n	80028e4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	333c      	adds	r3, #60	; 0x3c
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d108      	bne.n	80028e4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	333d      	adds	r3, #61	; 0x3d
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f003 fdbd 	bl	800646e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	2310      	movs	r3, #16
 8002904:	6093      	str	r3, [r2, #8]
}
 8002906:	e1e2      	b.n	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b80      	cmp	r3, #128	; 0x80
 800291c:	d164      	bne.n	80029e8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d111      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	3361      	adds	r3, #97	; 0x61
 8002934:	2206      	movs	r2, #6
 8002936:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fd93 	bl	800646e <USB_HC_Halt>
 8002948:	e044      	b.n	80029d4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	335c      	adds	r3, #92	; 0x5c
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	202c      	movs	r0, #44	; 0x2c
 8002962:	fb00 f303 	mul.w	r3, r0, r3
 8002966:	440b      	add	r3, r1
 8002968:	335c      	adds	r3, #92	; 0x5c
 800296a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	335c      	adds	r3, #92	; 0x5c
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d920      	bls.n	80029c2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	335c      	adds	r3, #92	; 0x5c
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	3360      	adds	r3, #96	; 0x60
 80029a0:	2204      	movs	r2, #4
 80029a2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	b2d9      	uxtb	r1, r3
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	202c      	movs	r0, #44	; 0x2c
 80029ae:	fb00 f303 	mul.w	r3, r0, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3360      	adds	r3, #96	; 0x60
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f005 fffa 	bl	80089b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029c0:	e008      	b.n	80029d4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3360      	adds	r3, #96	; 0x60
 80029d0:	2202      	movs	r2, #2
 80029d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	461a      	mov	r2, r3
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	6093      	str	r3, [r2, #8]
}
 80029e6:	e172      	b.n	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fe:	d11b      	bne.n	8002a38 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3361      	adds	r3, #97	; 0x61
 8002a0e:	2208      	movs	r2, #8
 8002a10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 fd26 	bl	800646e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a34:	6093      	str	r3, [r2, #8]
}
 8002a36:	e14a      	b.n	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 813f 	bne.w	8002cce <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3361      	adds	r3, #97	; 0x61
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d17d      	bne.n	8002b60 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3360      	adds	r3, #96	; 0x60
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	333f      	adds	r3, #63	; 0x3f
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d00a      	beq.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	333f      	adds	r3, #63	; 0x3f
 8002a98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	f040 8100 	bne.w	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d113      	bne.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3355      	adds	r3, #85	; 0x55
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f083 0301 	eor.w	r3, r3, #1
 8002abc:	b2d8      	uxtb	r0, r3
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3355      	adds	r3, #85	; 0x55
 8002acc:	4602      	mov	r2, r0
 8002ace:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	f040 80e3 	bne.w	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	334c      	adds	r3, #76	; 0x4c
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80d8 	beq.w	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	334c      	adds	r3, #76	; 0x4c
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	202c      	movs	r0, #44	; 0x2c
 8002b06:	fb00 f202 	mul.w	r2, r0, r2
 8002b0a:	440a      	add	r2, r1
 8002b0c:	3240      	adds	r2, #64	; 0x40
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	3b01      	subs	r3, #1
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	202c      	movs	r0, #44	; 0x2c
 8002b1a:	fb00 f202 	mul.w	r2, r0, r2
 8002b1e:	440a      	add	r2, r1
 8002b20:	3240      	adds	r2, #64	; 0x40
 8002b22:	8812      	ldrh	r2, [r2, #0]
 8002b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80b5 	beq.w	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3355      	adds	r3, #85	; 0x55
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2d8      	uxtb	r0, r3
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3355      	adds	r3, #85	; 0x55
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e09f      	b.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3361      	adds	r3, #97	; 0x61
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d109      	bne.n	8002b88 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3360      	adds	r3, #96	; 0x60
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e08b      	b.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3361      	adds	r3, #97	; 0x61
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d109      	bne.n	8002bb0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3360      	adds	r3, #96	; 0x60
 8002baa:	2202      	movs	r2, #2
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	e077      	b.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3361      	adds	r3, #97	; 0x61
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	d109      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3360      	adds	r3, #96	; 0x60
 8002bd2:	2205      	movs	r2, #5
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e063      	b.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3361      	adds	r3, #97	; 0x61
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	d009      	beq.n	8002c00 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3361      	adds	r3, #97	; 0x61
 8002bfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d14f      	bne.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	335c      	adds	r3, #92	; 0x5c
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	202c      	movs	r0, #44	; 0x2c
 8002c18:	fb00 f303 	mul.w	r3, r0, r3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	335c      	adds	r3, #92	; 0x5c
 8002c20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d912      	bls.n	8002c5c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	335c      	adds	r3, #92	; 0x5c
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3360      	adds	r3, #96	; 0x60
 8002c56:	2204      	movs	r2, #4
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e021      	b.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3360      	adds	r3, #96	; 0x60
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c84:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c8c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cac:	461a      	mov	r2, r3
 8002cae:	2302      	movs	r3, #2
 8002cb0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	b2d9      	uxtb	r1, r3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	202c      	movs	r0, #44	; 0x2c
 8002cbc:	fb00 f303 	mul.w	r3, r0, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3360      	adds	r3, #96	; 0x60
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f005 fe73 	bl	80089b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cce:	bf00      	nop
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08a      	sub	sp, #40	; 0x28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	0c5b      	lsrs	r3, r3, #17
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d004      	beq.n	8002d1c <HCD_RXQLVL_IRQHandler+0x46>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	f000 80a9 	beq.w	8002e6c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d1a:	e0aa      	b.n	8002e72 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80a6 	beq.w	8002e70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3344      	adds	r3, #68	; 0x44
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 809b 	beq.w	8002e70 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3350      	adds	r3, #80	; 0x50
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	441a      	add	r2, r3
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	202c      	movs	r0, #44	; 0x2c
 8002d54:	fb00 f303 	mul.w	r3, r0, r3
 8002d58:	440b      	add	r3, r1
 8002d5a:	334c      	adds	r3, #76	; 0x4c
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d87a      	bhi.n	8002e58 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	3344      	adds	r3, #68	; 0x44
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	b292      	uxth	r2, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f002 fece 	bl	8005b1c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3344      	adds	r3, #68	; 0x44
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	441a      	add	r2, r3
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	202c      	movs	r0, #44	; 0x2c
 8002d9a:	fb00 f303 	mul.w	r3, r0, r3
 8002d9e:	440b      	add	r3, r1
 8002da0:	3344      	adds	r3, #68	; 0x44
 8002da2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3350      	adds	r3, #80	; 0x50
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	441a      	add	r2, r3
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	202c      	movs	r0, #44	; 0x2c
 8002dbe:	fb00 f303 	mul.w	r3, r0, r3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3350      	adds	r3, #80	; 0x50
 8002dc6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	0cdb      	lsrs	r3, r3, #19
 8002dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ddc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3340      	adds	r3, #64	; 0x40
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d13c      	bne.n	8002e70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d039      	beq.n	8002e70 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e12:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e1a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3354      	adds	r3, #84	; 0x54
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	f083 0301 	eor.w	r3, r3, #1
 8002e42:	b2d8      	uxtb	r0, r3
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3354      	adds	r3, #84	; 0x54
 8002e52:	4602      	mov	r2, r0
 8002e54:	701a      	strb	r2, [r3, #0]
      break;
 8002e56:	e00b      	b.n	8002e70 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3360      	adds	r3, #96	; 0x60
 8002e66:	2204      	movs	r2, #4
 8002e68:	701a      	strb	r2, [r3, #0]
      break;
 8002e6a:	e001      	b.n	8002e70 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e6c:	bf00      	nop
 8002e6e:	e000      	b.n	8002e72 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e70:	bf00      	nop
  }
}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	; 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ea6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d10b      	bne.n	8002eca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d102      	bne.n	8002ec2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f005 fd5d 	bl	800897c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d132      	bne.n	8002f3a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f043 0308 	orr.w	r3, r3, #8
 8002eda:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d126      	bne.n	8002f34 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d113      	bne.n	8002f16 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ef8:	d106      	bne.n	8002f08 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2102      	movs	r1, #2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 ff79 	bl	8005df8 <USB_InitFSLSPClkSel>
 8002f06:	e011      	b.n	8002f2c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f002 ff72 	bl	8005df8 <USB_InitFSLSPClkSel>
 8002f14:	e00a      	b.n	8002f2c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d106      	bne.n	8002f2c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f24:	461a      	mov	r2, r3
 8002f26:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f2a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f005 fd4f 	bl	80089d0 <HAL_HCD_PortEnabled_Callback>
 8002f32:	e002      	b.n	8002f3a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f005 fd59 	bl	80089ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d103      	bne.n	8002f4c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f043 0320 	orr.w	r3, r3, #32
 8002f4a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e12b      	b.n	80031ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd fbd4 	bl	8000734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f001 fa20 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8002fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a81      	ldr	r2, [pc, #516]	; (80031d4 <HAL_I2C_Init+0x274>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d807      	bhi.n	8002fe4 <HAL_I2C_Init+0x84>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a80      	ldr	r2, [pc, #512]	; (80031d8 <HAL_I2C_Init+0x278>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	bf94      	ite	ls
 8002fdc:	2301      	movls	r3, #1
 8002fde:	2300      	movhi	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e006      	b.n	8002ff2 <HAL_I2C_Init+0x92>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a7d      	ldr	r2, [pc, #500]	; (80031dc <HAL_I2C_Init+0x27c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	bf94      	ite	ls
 8002fec:	2301      	movls	r3, #1
 8002fee:	2300      	movhi	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0e7      	b.n	80031ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a78      	ldr	r2, [pc, #480]	; (80031e0 <HAL_I2C_Init+0x280>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0c9b      	lsrs	r3, r3, #18
 8003004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a6a      	ldr	r2, [pc, #424]	; (80031d4 <HAL_I2C_Init+0x274>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d802      	bhi.n	8003034 <HAL_I2C_Init+0xd4>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3301      	adds	r3, #1
 8003032:	e009      	b.n	8003048 <HAL_I2C_Init+0xe8>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	4a69      	ldr	r2, [pc, #420]	; (80031e4 <HAL_I2C_Init+0x284>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	3301      	adds	r3, #1
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800305a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	495c      	ldr	r1, [pc, #368]	; (80031d4 <HAL_I2C_Init+0x274>)
 8003064:	428b      	cmp	r3, r1
 8003066:	d819      	bhi.n	800309c <HAL_I2C_Init+0x13c>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e59      	subs	r1, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fbb1 f3f3 	udiv	r3, r1, r3
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	f640 73fc 	movw	r3, #4092	; 0xffc
 800307c:	400b      	ands	r3, r1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_I2C_Init+0x138>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	e051      	b.n	800313c <HAL_I2C_Init+0x1dc>
 8003098:	2304      	movs	r3, #4
 800309a:	e04f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d111      	bne.n	80030c8 <HAL_I2C_Init+0x168>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e012      	b.n	80030ee <HAL_I2C_Init+0x18e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Init+0x196>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e022      	b.n	800313c <HAL_I2C_Init+0x1dc>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <HAL_I2C_Init+0x1bc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e58      	subs	r0, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	440b      	add	r3, r1
 800310c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311a:	e00f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	0099      	lsls	r1, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	6809      	ldr	r1, [r1, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800316a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6911      	ldr	r1, [r2, #16]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	000186a0 	.word	0x000186a0
 80031d8:	001e847f 	.word	0x001e847f
 80031dc:	003d08ff 	.word	0x003d08ff
 80031e0:	431bde83 	.word	0x431bde83
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e128      	b.n	800344c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a90      	ldr	r2, [pc, #576]	; (8003454 <HAL_I2S_Init+0x26c>)
 8003212:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fd fb05 	bl	8000824 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003230:	f023 030f 	bic.w	r3, r3, #15
 8003234:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2202      	movs	r2, #2
 800323c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d060      	beq.n	8003308 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800324e:	2310      	movs	r3, #16
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e001      	b.n	8003258 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003254:	2320      	movs	r3, #32
 8003256:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b20      	cmp	r3, #32
 800325e:	d802      	bhi.n	8003266 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003266:	2001      	movs	r0, #1
 8003268:	f001 f9c4 	bl	80045f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800326c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003276:	d125      	bne.n	80032c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	fbb2 f2f3 	udiv	r2, r2, r3
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	3305      	adds	r3, #5
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	e01f      	b.n	80032e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	461a      	mov	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	3305      	adds	r3, #5
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	e00e      	b.n	80032e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	461a      	mov	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	3305      	adds	r3, #5
 80032e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4a5c      	ldr	r2, [pc, #368]	; (8003458 <HAL_I2S_Init+0x270>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	08db      	lsrs	r3, r3, #3
 80032ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	e003      	b.n	8003310 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003308:	2302      	movs	r3, #2
 800330a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d902      	bls.n	800331c <HAL_I2S_Init+0x134>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	2bff      	cmp	r3, #255	; 0xff
 800331a:	d907      	bls.n	800332c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	f043 0210 	orr.w	r2, r3, #16
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e08f      	b.n	800344c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	ea42 0103 	orr.w	r1, r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	430a      	orrs	r2, r1
 800333e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800334a:	f023 030f 	bic.w	r3, r3, #15
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6851      	ldr	r1, [r2, #4]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6892      	ldr	r2, [r2, #8]
 8003356:	4311      	orrs	r1, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68d2      	ldr	r2, [r2, #12]
 800335c:	4311      	orrs	r1, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6992      	ldr	r2, [r2, #24]
 8003362:	430a      	orrs	r2, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800336e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d161      	bne.n	800343c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a38      	ldr	r2, [pc, #224]	; (800345c <HAL_I2S_Init+0x274>)
 800337c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a37      	ldr	r2, [pc, #220]	; (8003460 <HAL_I2S_Init+0x278>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_I2S_Init+0x1a4>
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_I2S_Init+0x27c>)
 800338a:	e001      	b.n	8003390 <HAL_I2S_Init+0x1a8>
 800338c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	4932      	ldr	r1, [pc, #200]	; (8003460 <HAL_I2S_Init+0x278>)
 8003398:	428a      	cmp	r2, r1
 800339a:	d101      	bne.n	80033a0 <HAL_I2S_Init+0x1b8>
 800339c:	4a31      	ldr	r2, [pc, #196]	; (8003464 <HAL_I2S_Init+0x27c>)
 800339e:	e001      	b.n	80033a4 <HAL_I2S_Init+0x1bc>
 80033a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033a8:	f023 030f 	bic.w	r3, r3, #15
 80033ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2b      	ldr	r2, [pc, #172]	; (8003460 <HAL_I2S_Init+0x278>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_I2S_Init+0x1d4>
 80033b8:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <HAL_I2S_Init+0x27c>)
 80033ba:	e001      	b.n	80033c0 <HAL_I2S_Init+0x1d8>
 80033bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c0:	2202      	movs	r2, #2
 80033c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <HAL_I2S_Init+0x278>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_I2S_Init+0x1ea>
 80033ce:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_I2S_Init+0x27c>)
 80033d0:	e001      	b.n	80033d6 <HAL_I2S_Init+0x1ee>
 80033d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e2:	d003      	beq.n	80033ec <HAL_I2S_Init+0x204>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d103      	bne.n	80033f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003402:	4313      	orrs	r3, r2
 8003404:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800340c:	4313      	orrs	r3, r2
 800340e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003416:	4313      	orrs	r3, r2
 8003418:	b29a      	uxth	r2, r3
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	4313      	orrs	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003424:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <HAL_I2S_Init+0x278>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_I2S_Init+0x24c>
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <HAL_I2S_Init+0x27c>)
 8003432:	e001      	b.n	8003438 <HAL_I2S_Init+0x250>
 8003434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003438:	897a      	ldrh	r2, [r7, #10]
 800343a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	0800355f 	.word	0x0800355f
 8003458:	cccccccd 	.word	0xcccccccd
 800345c:	08003675 	.word	0x08003675
 8003460:	40003800 	.word	0x40003800
 8003464:	40003400 	.word	0x40003400

08003468 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	881a      	ldrh	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c9a      	adds	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10e      	bne.n	80034f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ffb8 	bl	8003468 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	b292      	uxth	r2, r2
 8003514:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10e      	bne.n	8003556 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003546:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff93 	bl	800347c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b04      	cmp	r3, #4
 8003578:	d13a      	bne.n	80035f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d109      	bne.n	8003598 <I2S_IRQHandler+0x3a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d102      	bne.n	8003598 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffb4 	bl	8003500 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d126      	bne.n	80035f0 <I2S_IRQHandler+0x92>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d11f      	bne.n	80035f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0202 	orr.w	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff50 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d136      	bne.n	800366a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d109      	bne.n	800361a <I2S_IRQHandler+0xbc>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d102      	bne.n	800361a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff45 	bl	80034a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d122      	bne.n	800366a <I2S_IRQHandler+0x10c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b20      	cmp	r3, #32
 8003630:	d11b      	bne.n	800366a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003640:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff13 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a92      	ldr	r2, [pc, #584]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800368e:	4b92      	ldr	r3, [pc, #584]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003690:	e001      	b.n	8003696 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003692:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a8b      	ldr	r2, [pc, #556]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036ac:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ae:	e001      	b.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c0:	d004      	beq.n	80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 8099 	bne.w	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d107      	bne.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f925 	bl	8003930 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d107      	bne.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9c8 	bl	8003a90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d13a      	bne.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d035      	beq.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6e      	ldr	r2, [pc, #440]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800371e:	4b6e      	ldr	r3, [pc, #440]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003720:	e001      	b.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003722:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4969      	ldr	r1, [pc, #420]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800372e:	428b      	cmp	r3, r1
 8003730:	d101      	bne.n	8003736 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003732:	4b69      	ldr	r3, [pc, #420]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003734:	e001      	b.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800374e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f043 0202 	orr.w	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fe88 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b08      	cmp	r3, #8
 8003788:	f040 80c3 	bne.w	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80bd 	beq.w	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a49      	ldr	r2, [pc, #292]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037b2:	4b49      	ldr	r3, [pc, #292]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b4:	e001      	b.n	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4944      	ldr	r1, [pc, #272]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c2:	428b      	cmp	r3, r1
 80037c4:	d101      	bne.n	80037ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037c6:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c8:	e001      	b.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fe4a 	bl	8003490 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037fc:	e089      	b.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d107      	bne.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8be 	bl	8003994 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f8fd 	bl	8003a2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d12f      	bne.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02a      	beq.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003854:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003860:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003862:	e001      	b.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4919      	ldr	r1, [pc, #100]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003870:	428b      	cmp	r3, r1
 8003872:	d101      	bne.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003874:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003876:	e001      	b.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003880:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f043 0202 	orr.w	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fdfa 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d136      	bne.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d031      	beq.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038bc:	e001      	b.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4902      	ldr	r1, [pc, #8]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ca:	428b      	cmp	r3, r1
 80038cc:	d106      	bne.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038ce:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d0:	e006      	b.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038d2:	bf00      	nop
 80038d4:	40003800 	.word	0x40003800
 80038d8:	40003400 	.word	0x40003400
 80038dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fdc0 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003910:	e000      	b.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003912:	bf00      	nop
}
 8003914:	bf00      	nop
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c99      	adds	r1, r3, #2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6251      	str	r1, [r2, #36]	; 0x24
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d113      	bne.n	800398a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003970:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ffc9 	bl	800391c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	1c99      	adds	r1, r3, #2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6251      	str	r1, [r2, #36]	; 0x24
 80039a6:	8819      	ldrh	r1, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <I2SEx_TxISR_I2SExt+0x90>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <I2SEx_TxISR_I2SExt+0x22>
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <I2SEx_TxISR_I2SExt+0x94>)
 80039b4:	e001      	b.n	80039ba <I2SEx_TxISR_I2SExt+0x26>
 80039b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ba:	460a      	mov	r2, r1
 80039bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d121      	bne.n	8003a1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <I2SEx_TxISR_I2SExt+0x90>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <I2SEx_TxISR_I2SExt+0x50>
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <I2SEx_TxISR_I2SExt+0x94>)
 80039e2:	e001      	b.n	80039e8 <I2SEx_TxISR_I2SExt+0x54>
 80039e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	490d      	ldr	r1, [pc, #52]	; (8003a24 <I2SEx_TxISR_I2SExt+0x90>)
 80039f0:	428b      	cmp	r3, r1
 80039f2:	d101      	bne.n	80039f8 <I2SEx_TxISR_I2SExt+0x64>
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <I2SEx_TxISR_I2SExt+0x94>)
 80039f6:	e001      	b.n	80039fc <I2SEx_TxISR_I2SExt+0x68>
 80039f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff81 	bl	800391c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40003800 	.word	0x40003800
 8003a28:	40003400 	.word	0x40003400

08003a2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68d8      	ldr	r0, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	1c99      	adds	r1, r3, #2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a44:	b282      	uxth	r2, r0
 8003a46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d113      	bne.n	8003a88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff4a 	bl	800391c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <I2SEx_RxISR_I2SExt+0x90>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <I2SEx_RxISR_I2SExt+0x16>
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <I2SEx_RxISR_I2SExt+0x94>)
 8003aa4:	e001      	b.n	8003aaa <I2SEx_RxISR_I2SExt+0x1a>
 8003aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aaa:	68d8      	ldr	r0, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	1c99      	adds	r1, r3, #2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ab6:	b282      	uxth	r2, r0
 8003ab8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d121      	bne.n	8003b16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <I2SEx_RxISR_I2SExt+0x90>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <I2SEx_RxISR_I2SExt+0x50>
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <I2SEx_RxISR_I2SExt+0x94>)
 8003ade:	e001      	b.n	8003ae4 <I2SEx_RxISR_I2SExt+0x54>
 8003ae0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	490d      	ldr	r1, [pc, #52]	; (8003b20 <I2SEx_RxISR_I2SExt+0x90>)
 8003aec:	428b      	cmp	r3, r1
 8003aee:	d101      	bne.n	8003af4 <I2SEx_RxISR_I2SExt+0x64>
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <I2SEx_RxISR_I2SExt+0x94>)
 8003af2:	e001      	b.n	8003af8 <I2SEx_RxISR_I2SExt+0x68>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ff03 	bl	800391c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40003800 	.word	0x40003800
 8003b24:	40003400 	.word	0x40003400

08003b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e267      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d075      	beq.n	8003c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b46:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d00c      	beq.n	8003b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b52:	4b85      	ldr	r3, [pc, #532]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d112      	bne.n	8003b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5e:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b6a:	d10b      	bne.n	8003b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	4b7e      	ldr	r3, [pc, #504]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d05b      	beq.n	8003c30 <HAL_RCC_OscConfig+0x108>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d157      	bne.n	8003c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e242      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCC_OscConfig+0x74>
 8003b8e:	4b76      	ldr	r3, [pc, #472]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a75      	ldr	r2, [pc, #468]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e01d      	b.n	8003bd8 <HAL_RCC_OscConfig+0xb0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x98>
 8003ba6:	4b70      	ldr	r3, [pc, #448]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6f      	ldr	r2, [pc, #444]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b6d      	ldr	r3, [pc, #436]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6c      	ldr	r2, [pc, #432]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0xb0>
 8003bc0:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a68      	ldr	r2, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b66      	ldr	r3, [pc, #408]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a65      	ldr	r2, [pc, #404]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd fa8a 	bl	80010f8 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fd fa86 	bl	80010f8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e207      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0xc0>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7fd fa76 	bl	80010f8 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fd fa72 	bl	80010f8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1f3      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0xe8>
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d063      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4a:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d11c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c56:	4b44      	ldr	r3, [pc, #272]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x152>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e1c7      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4937      	ldr	r1, [pc, #220]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	e03a      	b.n	8003d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c98:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <HAL_RCC_OscConfig+0x244>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fd fa2b 	bl	80010f8 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ca6:	f7fd fa27 	bl	80010f8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e1a8      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4925      	ldr	r1, [pc, #148]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCC_OscConfig+0x244>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fa0a 	bl	80010f8 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce8:	f7fd fa06 	bl	80010f8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e187      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d036      	beq.n	8003d80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_RCC_OscConfig+0x248>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fd f9ea 	bl	80010f8 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fd f9e6 	bl	80010f8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e167      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x200>
 8003d46:	e01b      	b.n	8003d80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_RCC_OscConfig+0x248>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4e:	f7fd f9d3 	bl	80010f8 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d54:	e00e      	b.n	8003d74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fd f9cf 	bl	80010f8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d907      	bls.n	8003d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e150      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	42470000 	.word	0x42470000
 8003d70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ea      	bne.n	8003d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8097 	beq.w	8003ebc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d92:	4b81      	ldr	r3, [pc, #516]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	4b7d      	ldr	r3, [pc, #500]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4a7c      	ldr	r2, [pc, #496]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	4b7a      	ldr	r3, [pc, #488]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b77      	ldr	r3, [pc, #476]	; (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d118      	bne.n	8003dfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dca:	4b74      	ldr	r3, [pc, #464]	; (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a73      	ldr	r2, [pc, #460]	; (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd f98f 	bl	80010f8 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fd f98b 	bl	80010f8 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e10c      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x2ea>
 8003e04:	4b64      	ldr	r3, [pc, #400]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4a63      	ldr	r2, [pc, #396]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e10:	e01c      	b.n	8003e4c <HAL_RCC_OscConfig+0x324>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x30c>
 8003e1a:	4b5f      	ldr	r3, [pc, #380]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	4a5e      	ldr	r2, [pc, #376]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
 8003e26:	4b5c      	ldr	r3, [pc, #368]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	4a5b      	ldr	r2, [pc, #364]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6713      	str	r3, [r2, #112]	; 0x70
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0x324>
 8003e34:	4b58      	ldr	r3, [pc, #352]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a57      	ldr	r2, [pc, #348]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e40:	4b55      	ldr	r3, [pc, #340]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a54      	ldr	r2, [pc, #336]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e46:	f023 0304 	bic.w	r3, r3, #4
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d015      	beq.n	8003e80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fd f950 	bl	80010f8 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7fd f94c 	bl	80010f8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0cb      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e72:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ee      	beq.n	8003e5c <HAL_RCC_OscConfig+0x334>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7fd f93a 	bl	80010f8 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e88:	f7fd f936 	bl	80010f8 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0b5      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9e:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ee      	bne.n	8003e88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb0:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	4a38      	ldr	r2, [pc, #224]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a1 	beq.w	8004008 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec6:	4b34      	ldr	r3, [pc, #208]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d05c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d141      	bne.n	8003f5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_OscConfig+0x478>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd f90a 	bl	80010f8 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd f906 	bl	80010f8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e087      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	491b      	ldr	r1, [pc, #108]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_RCC_OscConfig+0x478>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fd f8df 	bl	80010f8 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fd f8db 	bl	80010f8 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e05c      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x416>
 8003f5c:	e054      	b.n	8004008 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_RCC_OscConfig+0x478>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fd f8c8 	bl	80010f8 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fd f8c4 	bl	80010f8 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e045      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x444>
 8003f8a:	e03d      	b.n	8004008 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e038      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <HAL_RCC_OscConfig+0x4ec>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d028      	beq.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d121      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d11a      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d111      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	3b01      	subs	r3, #1
 8003fee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800

08004018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0cc      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800402c:	4b68      	ldr	r3, [pc, #416]	; (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d90c      	bls.n	8004054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b65      	ldr	r3, [pc, #404]	; (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004042:	4b63      	ldr	r3, [pc, #396]	; (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0b8      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800406c:	4b59      	ldr	r3, [pc, #356]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a58      	ldr	r2, [pc, #352]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004084:	4b53      	ldr	r3, [pc, #332]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a52      	ldr	r2, [pc, #328]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800408e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004090:	4b50      	ldr	r3, [pc, #320]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	494d      	ldr	r1, [pc, #308]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d044      	beq.n	8004138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b47      	ldr	r3, [pc, #284]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d119      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e07f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d003      	beq.n	80040d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d6:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e06f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e6:	4b3b      	ldr	r3, [pc, #236]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e067      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f6:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 0203 	bic.w	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4934      	ldr	r1, [pc, #208]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	4313      	orrs	r3, r2
 8004106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004108:	f7fc fff6 	bl	80010f8 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	e00a      	b.n	8004126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004110:	f7fc fff2 	bl	80010f8 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e04f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 020c 	and.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	429a      	cmp	r2, r3
 8004136:	d1eb      	bne.n	8004110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004138:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d20c      	bcs.n	8004160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e032      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800416c:	4b19      	ldr	r3, [pc, #100]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4916      	ldr	r1, [pc, #88]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	490e      	ldr	r1, [pc, #56]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800419e:	f000 f821 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 80041a2:	4602      	mov	r2, r0
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	490a      	ldr	r1, [pc, #40]	; (80041d8 <HAL_RCC_ClockConfig+0x1c0>)
 80041b0:	5ccb      	ldrb	r3, [r1, r3]
 80041b2:	fa22 f303 	lsr.w	r3, r2, r3
 80041b6:	4a09      	ldr	r2, [pc, #36]	; (80041dc <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_ClockConfig+0x1c8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc ff56 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023c00 	.word	0x40023c00
 80041d4:	40023800 	.word	0x40023800
 80041d8:	0800908c 	.word	0x0800908c
 80041dc:	20000000 	.word	0x20000000
 80041e0:	20000004 	.word	0x20000004

080041e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e8:	b094      	sub	sp, #80	; 0x50
 80041ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	647b      	str	r3, [r7, #68]	; 0x44
 80041f0:	2300      	movs	r3, #0
 80041f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f4:	2300      	movs	r3, #0
 80041f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041fc:	4b79      	ldr	r3, [pc, #484]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 030c 	and.w	r3, r3, #12
 8004204:	2b08      	cmp	r3, #8
 8004206:	d00d      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x40>
 8004208:	2b08      	cmp	r3, #8
 800420a:	f200 80e1 	bhi.w	80043d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x34>
 8004212:	2b04      	cmp	r3, #4
 8004214:	d003      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0x3a>
 8004216:	e0db      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004218:	4b73      	ldr	r3, [pc, #460]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800421a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800421c:	e0db      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800421e:	4b73      	ldr	r3, [pc, #460]	; (80043ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004220:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004222:	e0d8      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004224:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800422c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800422e:	4b6d      	ldr	r3, [pc, #436]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d063      	beq.n	8004302 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	4b6a      	ldr	r3, [pc, #424]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	2200      	movs	r2, #0
 8004242:	63bb      	str	r3, [r7, #56]	; 0x38
 8004244:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424c:	633b      	str	r3, [r7, #48]	; 0x30
 800424e:	2300      	movs	r3, #0
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
 8004252:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004256:	4622      	mov	r2, r4
 8004258:	462b      	mov	r3, r5
 800425a:	f04f 0000 	mov.w	r0, #0
 800425e:	f04f 0100 	mov.w	r1, #0
 8004262:	0159      	lsls	r1, r3, #5
 8004264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004268:	0150      	lsls	r0, r2, #5
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4621      	mov	r1, r4
 8004270:	1a51      	subs	r1, r2, r1
 8004272:	6139      	str	r1, [r7, #16]
 8004274:	4629      	mov	r1, r5
 8004276:	eb63 0301 	sbc.w	r3, r3, r1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004288:	4659      	mov	r1, fp
 800428a:	018b      	lsls	r3, r1, #6
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004292:	4651      	mov	r1, sl
 8004294:	018a      	lsls	r2, r1, #6
 8004296:	4651      	mov	r1, sl
 8004298:	ebb2 0801 	subs.w	r8, r2, r1
 800429c:	4659      	mov	r1, fp
 800429e:	eb63 0901 	sbc.w	r9, r3, r1
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042b6:	4690      	mov	r8, r2
 80042b8:	4699      	mov	r9, r3
 80042ba:	4623      	mov	r3, r4
 80042bc:	eb18 0303 	adds.w	r3, r8, r3
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	462b      	mov	r3, r5
 80042c4:	eb49 0303 	adc.w	r3, r9, r3
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042d6:	4629      	mov	r1, r5
 80042d8:	024b      	lsls	r3, r1, #9
 80042da:	4621      	mov	r1, r4
 80042dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042e0:	4621      	mov	r1, r4
 80042e2:	024a      	lsls	r2, r1, #9
 80042e4:	4610      	mov	r0, r2
 80042e6:	4619      	mov	r1, r3
 80042e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ea:	2200      	movs	r2, #0
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042f4:	f7fb ff68 	bl	80001c8 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4613      	mov	r3, r2
 80042fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004300:	e058      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004302:	4b38      	ldr	r3, [pc, #224]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	2200      	movs	r2, #0
 800430a:	4618      	mov	r0, r3
 800430c:	4611      	mov	r1, r2
 800430e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004312:	623b      	str	r3, [r7, #32]
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
 8004318:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800431c:	4642      	mov	r2, r8
 800431e:	464b      	mov	r3, r9
 8004320:	f04f 0000 	mov.w	r0, #0
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	0159      	lsls	r1, r3, #5
 800432a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800432e:	0150      	lsls	r0, r2, #5
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4641      	mov	r1, r8
 8004336:	ebb2 0a01 	subs.w	sl, r2, r1
 800433a:	4649      	mov	r1, r9
 800433c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800434c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004350:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004354:	ebb2 040a 	subs.w	r4, r2, sl
 8004358:	eb63 050b 	sbc.w	r5, r3, fp
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	00eb      	lsls	r3, r5, #3
 8004366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800436a:	00e2      	lsls	r2, r4, #3
 800436c:	4614      	mov	r4, r2
 800436e:	461d      	mov	r5, r3
 8004370:	4643      	mov	r3, r8
 8004372:	18e3      	adds	r3, r4, r3
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	464b      	mov	r3, r9
 8004378:	eb45 0303 	adc.w	r3, r5, r3
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4500 	ldrd	r4, r5, [r7]
 800438a:	4629      	mov	r1, r5
 800438c:	028b      	lsls	r3, r1, #10
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004394:	4621      	mov	r1, r4
 8004396:	028a      	lsls	r2, r1, #10
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439e:	2200      	movs	r2, #0
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	61fa      	str	r2, [r7, #28]
 80043a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a8:	f7fb ff0e 	bl	80001c8 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	3301      	adds	r3, #1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3750      	adds	r7, #80	; 0x50
 80043dc:	46bd      	mov	sp, r7
 80043de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
 80043e8:	00f42400 	.word	0x00f42400
 80043ec:	007a1200 	.word	0x007a1200

080043f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000000 	.word	0x20000000

08004408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800440c:	f7ff fff0 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0a9b      	lsrs	r3, r3, #10
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4903      	ldr	r1, [pc, #12]	; (800442c <HAL_RCC_GetPCLK1Freq+0x24>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	0800909c 	.word	0x0800909c

08004430 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004454:	2b00      	cmp	r3, #0
 8004456:	d035      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004458:	4b62      	ldr	r3, [pc, #392]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800445e:	f7fc fe4b 	bl	80010f8 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004466:	f7fc fe47 	bl	80010f8 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e0b0      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004478:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	019a      	lsls	r2, r3, #6
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	071b      	lsls	r3, r3, #28
 8004490:	4955      	ldr	r1, [pc, #340]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004498:	4b52      	ldr	r3, [pc, #328]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800449e:	f7fc fe2b 	bl	80010f8 <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044a6:	f7fc fe27 	bl	80010f8 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e090      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b8:	4b4b      	ldr	r3, [pc, #300]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8083 	beq.w	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	4b44      	ldr	r3, [pc, #272]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	4a43      	ldr	r2, [pc, #268]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6413      	str	r3, [r2, #64]	; 0x40
 80044e2:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ee:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a3e      	ldr	r2, [pc, #248]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044fa:	f7fc fdfd 	bl	80010f8 <HAL_GetTick>
 80044fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004502:	f7fc fdf9 	bl	80010f8 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e062      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004514:	4b35      	ldr	r3, [pc, #212]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004520:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004528:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d02f      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	429a      	cmp	r2, r3
 800453c:	d028      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453e:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004546:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004548:	4b29      	ldr	r3, [pc, #164]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454e:	4b28      	ldr	r3, [pc, #160]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004554:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800455a:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d114      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004566:	f7fc fdc7 	bl	80010f8 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	e00a      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fc fdc3 	bl	80010f8 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	; 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e02a      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ee      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459c:	d10d      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b2:	490d      	ldr	r1, [pc, #52]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	608b      	str	r3, [r1, #8]
 80045b8:	e005      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045c4:	6093      	str	r3, [r2, #8]
 80045c6:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d2:	4905      	ldr	r1, [pc, #20]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	42470068 	.word	0x42470068
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40007000 	.word	0x40007000
 80045f0:	42470e40 	.word	0x42470e40

080045f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d13e      	bne.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d12f      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800462a:	617b      	str	r3, [r7, #20]
          break;
 800462c:	e02f      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800462e:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463a:	d108      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800463c:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004644:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004646:	fbb2 f3f3 	udiv	r3, r2, r3
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	e007      	b.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004656:	4a15      	ldr	r2, [pc, #84]	; (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004664:	099b      	lsrs	r3, r3, #6
 8004666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	fb02 f303 	mul.w	r3, r2, r3
 8004670:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004678:	0f1b      	lsrs	r3, r3, #28
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]
          break;
 8004686:	e002      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
          break;
 800468c:	bf00      	nop
        }
      }
      break;
 800468e:	bf00      	nop
    }
  }
  return frequency;
 8004690:	697b      	ldr	r3, [r7, #20]
}
 8004692:	4618      	mov	r0, r3
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	00bb8000 	.word	0x00bb8000
 80046a8:	007a1200 	.word	0x007a1200
 80046ac:	00f42400 	.word	0x00f42400

080046b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e07b      	b.n	80047ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d108      	bne.n	80046dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d009      	beq.n	80046e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	61da      	str	r2, [r3, #28]
 80046da:	e005      	b.n	80046e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc fa1c 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	ea42 0103 	orr.w	r1, r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	f003 0104 	and.w	r1, r3, #4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f003 0210 	and.w	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e041      	b.n	8004858 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fc fb77 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f000 fc79 	bl	80050f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e04e      	b.n	8004916 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <HAL_TIM_Base_Start_IT+0xc4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d022      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a2:	d01d      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <HAL_TIM_Base_Start_IT+0xc8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d018      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <HAL_TIM_Base_Start_IT+0xcc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <HAL_TIM_Base_Start_IT+0xd0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <HAL_TIM_Base_Start_IT+0xd4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a19      	ldr	r2, [pc, #100]	; (8004938 <HAL_TIM_Base_Start_IT+0xd8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_TIM_Base_Start_IT+0xdc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d111      	bne.n	8004904 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d010      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	e007      	b.n	8004914 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40010000 	.word	0x40010000
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800
 8004930:	40000c00 	.word	0x40000c00
 8004934:	40010400 	.word	0x40010400
 8004938:	40014000 	.word	0x40014000
 800493c:	40001800 	.word	0x40001800

08004940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e041      	b.n	80049d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f839 	bl	80049de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f000 fbba 	bl	80050f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x24>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e022      	b.n	8004a5e <HAL_TIM_PWM_Start+0x6a>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d109      	bne.n	8004a32 <HAL_TIM_PWM_Start+0x3e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e015      	b.n	8004a5e <HAL_TIM_PWM_Start+0x6a>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d109      	bne.n	8004a4c <HAL_TIM_PWM_Start+0x58>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e008      	b.n	8004a5e <HAL_TIM_PWM_Start+0x6a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e07c      	b.n	8004b60 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start+0x82>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a74:	e013      	b.n	8004a9e <HAL_TIM_PWM_Start+0xaa>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIM_PWM_Start+0x92>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a84:	e00b      	b.n	8004a9e <HAL_TIM_PWM_Start+0xaa>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_PWM_Start+0xa2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a94:	e003      	b.n	8004a9e <HAL_TIM_PWM_Start+0xaa>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fe10 	bl	80056cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2d      	ldr	r2, [pc, #180]	; (8004b68 <HAL_TIM_PWM_Start+0x174>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0xcc>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2c      	ldr	r2, [pc, #176]	; (8004b6c <HAL_TIM_PWM_Start+0x178>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIM_PWM_Start+0xd0>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xd2>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a22      	ldr	r2, [pc, #136]	; (8004b68 <HAL_TIM_PWM_Start+0x174>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x136>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aec:	d01d      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x136>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1f      	ldr	r2, [pc, #124]	; (8004b70 <HAL_TIM_PWM_Start+0x17c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x136>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <HAL_TIM_PWM_Start+0x180>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x136>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <HAL_TIM_PWM_Start+0x184>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x136>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_TIM_PWM_Start+0x178>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x136>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <HAL_TIM_PWM_Start+0x188>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x136>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a16      	ldr	r2, [pc, #88]	; (8004b80 <HAL_TIM_PWM_Start+0x18c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d111      	bne.n	8004b4e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d010      	beq.n	8004b5e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4c:	e007      	b.n	8004b5e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40010400 	.word	0x40010400
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40001800 	.word	0x40001800

08004b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d122      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d11b      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0202 	mvn.w	r2, #2
 8004bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa77 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa69 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa7a 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d122      	bne.n	8004c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d11b      	bne.n	8004c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0204 	mvn.w	r2, #4
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa4d 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa3f 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fa50 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d122      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d11b      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0208 	mvn.w	r2, #8
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa23 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fa15 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fa26 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b10      	cmp	r3, #16
 8004c94:	d122      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d11b      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0210 	mvn.w	r2, #16
 8004cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9f9 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f9eb 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f9fc 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0201 	mvn.w	r2, #1
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fb fecc 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d10e      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b80      	cmp	r3, #128	; 0x80
 8004d22:	d107      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fd78 	bl	8005824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d10e      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d107      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f9c1 	bl	80050e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d10e      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d107      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0220 	mvn.w	r2, #32
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fd42 	bl	8005810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e0ae      	b.n	8004f10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	f200 809f 	bhi.w	8004f00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dc2:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004f01 	.word	0x08004f01
 8004dd0:	08004f01 	.word	0x08004f01
 8004dd4:	08004f01 	.word	0x08004f01
 8004dd8:	08004e3d 	.word	0x08004e3d
 8004ddc:	08004f01 	.word	0x08004f01
 8004de0:	08004f01 	.word	0x08004f01
 8004de4:	08004f01 	.word	0x08004f01
 8004de8:	08004e7f 	.word	0x08004e7f
 8004dec:	08004f01 	.word	0x08004f01
 8004df0:	08004f01 	.word	0x08004f01
 8004df4:	08004f01 	.word	0x08004f01
 8004df8:	08004ebf 	.word	0x08004ebf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fa18 	bl	8005238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0208 	orr.w	r2, r2, #8
 8004e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0204 	bic.w	r2, r2, #4
 8004e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6999      	ldr	r1, [r3, #24]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	619a      	str	r2, [r3, #24]
      break;
 8004e3a:	e064      	b.n	8004f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fa68 	bl	8005318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6999      	ldr	r1, [r3, #24]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	021a      	lsls	r2, r3, #8
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	619a      	str	r2, [r3, #24]
      break;
 8004e7c:	e043      	b.n	8004f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fabd 	bl	8005404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0208 	orr.w	r2, r2, #8
 8004e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0204 	bic.w	r2, r2, #4
 8004ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69d9      	ldr	r1, [r3, #28]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	61da      	str	r2, [r3, #28]
      break;
 8004ebc:	e023      	b.n	8004f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fb11 	bl	80054ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69d9      	ldr	r1, [r3, #28]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	021a      	lsls	r2, r3, #8
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	61da      	str	r2, [r3, #28]
      break;
 8004efe:	e002      	b.n	8004f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
      break;
 8004f04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIM_ConfigClockSource+0x1c>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e0b4      	b.n	800509e <HAL_TIM_ConfigClockSource+0x186>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6c:	d03e      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0xd4>
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f72:	f200 8087 	bhi.w	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	f000 8086 	beq.w	800508a <HAL_TIM_ConfigClockSource+0x172>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f82:	d87f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d01a      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0xa6>
 8004f88:	2b70      	cmp	r3, #112	; 0x70
 8004f8a:	d87b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d050      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0x11a>
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d877      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f94:	2b50      	cmp	r3, #80	; 0x50
 8004f96:	d03c      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xfa>
 8004f98:	2b50      	cmp	r3, #80	; 0x50
 8004f9a:	d873      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d058      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x13a>
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d86f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d064      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa8:	2b30      	cmp	r3, #48	; 0x30
 8004faa:	d86b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d060      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d867      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05c      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d05a      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fbc:	e062      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6899      	ldr	r1, [r3, #8]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f000 fb5d 	bl	800568c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	609a      	str	r2, [r3, #8]
      break;
 8004fea:	e04f      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f000 fb46 	bl	800568c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500e:	609a      	str	r2, [r3, #8]
      break;
 8005010:	e03c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	f000 faba 	bl	8005598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2150      	movs	r1, #80	; 0x50
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fb13 	bl	8005656 <TIM_ITRx_SetConfig>
      break;
 8005030:	e02c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	461a      	mov	r2, r3
 8005040:	f000 fad9 	bl	80055f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2160      	movs	r1, #96	; 0x60
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fb03 	bl	8005656 <TIM_ITRx_SetConfig>
      break;
 8005050:	e01c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	461a      	mov	r2, r3
 8005060:	f000 fa9a 	bl	8005598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2140      	movs	r1, #64	; 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f000 faf3 	bl	8005656 <TIM_ITRx_SetConfig>
      break;
 8005070:	e00c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f000 faea 	bl	8005656 <TIM_ITRx_SetConfig>
      break;
 8005082:	e003      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      break;
 8005088:	e000      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800508a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a40      	ldr	r2, [pc, #256]	; (800520c <TIM_Base_SetConfig+0x114>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005116:	d00f      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a3d      	ldr	r2, [pc, #244]	; (8005210 <TIM_Base_SetConfig+0x118>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3c      	ldr	r2, [pc, #240]	; (8005214 <TIM_Base_SetConfig+0x11c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3b      	ldr	r2, [pc, #236]	; (8005218 <TIM_Base_SetConfig+0x120>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3a      	ldr	r2, [pc, #232]	; (800521c <TIM_Base_SetConfig+0x124>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2f      	ldr	r2, [pc, #188]	; (800520c <TIM_Base_SetConfig+0x114>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02b      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d027      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2c      	ldr	r2, [pc, #176]	; (8005210 <TIM_Base_SetConfig+0x118>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d023      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <TIM_Base_SetConfig+0x11c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01f      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2a      	ldr	r2, [pc, #168]	; (8005218 <TIM_Base_SetConfig+0x120>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01b      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a29      	ldr	r2, [pc, #164]	; (800521c <TIM_Base_SetConfig+0x124>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d017      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a28      	ldr	r2, [pc, #160]	; (8005220 <TIM_Base_SetConfig+0x128>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a27      	ldr	r2, [pc, #156]	; (8005224 <TIM_Base_SetConfig+0x12c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00f      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a26      	ldr	r2, [pc, #152]	; (8005228 <TIM_Base_SetConfig+0x130>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00b      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a25      	ldr	r2, [pc, #148]	; (800522c <TIM_Base_SetConfig+0x134>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a24      	ldr	r2, [pc, #144]	; (8005230 <TIM_Base_SetConfig+0x138>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a23      	ldr	r2, [pc, #140]	; (8005234 <TIM_Base_SetConfig+0x13c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d108      	bne.n	80051bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a0a      	ldr	r2, [pc, #40]	; (800520c <TIM_Base_SetConfig+0x114>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0xf8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a0c      	ldr	r2, [pc, #48]	; (800521c <TIM_Base_SetConfig+0x124>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d103      	bne.n	80051f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	615a      	str	r2, [r3, #20]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40010400 	.word	0x40010400
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800
 800522c:	40001800 	.word	0x40001800
 8005230:	40001c00 	.word	0x40001c00
 8005234:	40002000 	.word	0x40002000

08005238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0201 	bic.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 0302 	bic.w	r3, r3, #2
 8005280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a20      	ldr	r2, [pc, #128]	; (8005310 <TIM_OC1_SetConfig+0xd8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_OC1_SetConfig+0x64>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <TIM_OC1_SetConfig+0xdc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d10c      	bne.n	80052b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0308 	bic.w	r3, r3, #8
 80052a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <TIM_OC1_SetConfig+0xd8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_OC1_SetConfig+0x8e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a14      	ldr	r2, [pc, #80]	; (8005314 <TIM_OC1_SetConfig+0xdc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d111      	bne.n	80052ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	621a      	str	r2, [r3, #32]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40010000 	.word	0x40010000
 8005314:	40010400 	.word	0x40010400

08005318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f023 0210 	bic.w	r2, r3, #16
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0320 	bic.w	r3, r3, #32
 8005362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a22      	ldr	r2, [pc, #136]	; (80053fc <TIM_OC2_SetConfig+0xe4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC2_SetConfig+0x68>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a21      	ldr	r2, [pc, #132]	; (8005400 <TIM_OC2_SetConfig+0xe8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10d      	bne.n	800539c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a17      	ldr	r2, [pc, #92]	; (80053fc <TIM_OC2_SetConfig+0xe4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_OC2_SetConfig+0x94>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a16      	ldr	r2, [pc, #88]	; (8005400 <TIM_OC2_SetConfig+0xe8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d113      	bne.n	80053d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40010400 	.word	0x40010400

08005404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800544c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <TIM_OC3_SetConfig+0xe0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_OC3_SetConfig+0x66>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <TIM_OC3_SetConfig+0xe4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10d      	bne.n	8005486 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <TIM_OC3_SetConfig+0xe0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC3_SetConfig+0x92>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <TIM_OC3_SetConfig+0xe4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d113      	bne.n	80054be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800549c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	621a      	str	r2, [r3, #32]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40010400 	.word	0x40010400

080054ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	031b      	lsls	r3, r3, #12
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a12      	ldr	r2, [pc, #72]	; (8005590 <TIM_OC4_SetConfig+0xa4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_OC4_SetConfig+0x68>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a11      	ldr	r2, [pc, #68]	; (8005594 <TIM_OC4_SetConfig+0xa8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d109      	bne.n	8005568 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800555a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	019b      	lsls	r3, r3, #6
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40010400 	.word	0x40010400

08005598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f023 0201 	bic.w	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 030a 	bic.w	r3, r3, #10
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f023 0210 	bic.w	r2, r3, #16
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	031b      	lsls	r3, r3, #12
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	f043 0307 	orr.w	r3, r3, #7
 8005678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	609a      	str	r2, [r3, #8]
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	609a      	str	r2, [r3, #8]
}
 80056c0:	bf00      	nop
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	2201      	movs	r2, #1
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	43db      	mvns	r3, r3
 80056ee:	401a      	ands	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	fa01 f303 	lsl.w	r3, r1, r3
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800572c:	2302      	movs	r3, #2
 800572e:	e05a      	b.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d022      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d01d      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d018      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a18      	ldr	r2, [pc, #96]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a17      	ldr	r2, [pc, #92]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10c      	bne.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40010400 	.word	0x40010400
 8005808:	40014000 	.word	0x40014000
 800580c:	40001800 	.word	0x40001800

08005810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005838:	b084      	sub	sp, #16
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	f107 001c 	add.w	r0, r7, #28
 8005846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2b01      	cmp	r3, #1
 800584e:	d122      	bne.n	8005896 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587a:	2b01      	cmp	r3, #1
 800587c:	d105      	bne.n	800588a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f9c0 	bl	8005c10 <USB_CoreReset>
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
 8005894:	e01a      	b.n	80058cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f9b4 	bl	8005c10 <USB_CoreReset>
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
 80058be:	e005      	b.n	80058cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d10b      	bne.n	80058ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f043 0206 	orr.w	r2, r3, #6
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f043 0220 	orr.w	r2, r3, #32
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058f6:	b004      	add	sp, #16
 80058f8:	4770      	bx	lr

080058fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f043 0201 	orr.w	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 0201 	bic.w	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d115      	bne.n	800598c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800596c:	2001      	movs	r0, #1
 800596e:	f7fb fbcf 	bl	8001110 <HAL_Delay>
      ms++;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f93a 	bl	8005bf2 <USB_GetMode>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d01e      	beq.n	80059c2 <USB_SetCurrentMode+0x84>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b31      	cmp	r3, #49	; 0x31
 8005988:	d9f0      	bls.n	800596c <USB_SetCurrentMode+0x2e>
 800598a:	e01a      	b.n	80059c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d115      	bne.n	80059be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800599e:	2001      	movs	r0, #1
 80059a0:	f7fb fbb6 	bl	8001110 <HAL_Delay>
      ms++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f921 	bl	8005bf2 <USB_GetMode>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <USB_SetCurrentMode+0x84>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b31      	cmp	r3, #49	; 0x31
 80059ba:	d9f0      	bls.n	800599e <USB_SetCurrentMode+0x60>
 80059bc:	e001      	b.n	80059c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e005      	b.n	80059ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b32      	cmp	r3, #50	; 0x32
 80059c6:	d101      	bne.n	80059cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4a13      	ldr	r2, [pc, #76]	; (8005a3c <USB_FlushTxFifo+0x64>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e01b      	b.n	8005a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	daf2      	bge.n	80059e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	019b      	lsls	r3, r3, #6
 8005a08:	f043 0220 	orr.w	r2, r3, #32
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3301      	adds	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <USB_FlushTxFifo+0x64>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e006      	b.n	8005a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d0f0      	beq.n	8005a10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	00030d40 	.word	0x00030d40

08005a40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a11      	ldr	r2, [pc, #68]	; (8005a9c <USB_FlushRxFifo+0x5c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e018      	b.n	8005a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	daf2      	bge.n	8005a4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <USB_FlushRxFifo+0x5c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d901      	bls.n	8005a82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e006      	b.n	8005a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b10      	cmp	r3, #16
 8005a8c:	d0f0      	beq.n	8005a70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	00030d40 	.word	0x00030d40

08005aa0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b089      	sub	sp, #36	; 0x24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	460b      	mov	r3, r1
 8005ab0:	71fb      	strb	r3, [r7, #7]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005abe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d123      	bne.n	8005b0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ac6:	88bb      	ldrh	r3, [r7, #4]
 8005ac8:	3303      	adds	r3, #3
 8005aca:	089b      	lsrs	r3, r3, #2
 8005acc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e018      	b.n	8005b06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	031a      	lsls	r2, r3, #12
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	3301      	adds	r3, #1
 8005aec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	3301      	adds	r3, #1
 8005af2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3301      	adds	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3e2      	bcc.n	8005ad4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3724      	adds	r7, #36	; 0x24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b08b      	sub	sp, #44	; 0x2c
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	089b      	lsrs	r3, r3, #2
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b42:	2300      	movs	r3, #0
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	e014      	b.n	8005b72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	3301      	adds	r3, #1
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	3301      	adds	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	6a3a      	ldr	r2, [r7, #32]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d3e6      	bcc.n	8005b48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b7a:	8bfb      	ldrh	r3, [r7, #30]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01e      	beq.n	8005bbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f107 0310 	add.w	r3, r7, #16
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	3301      	adds	r3, #1
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bb2:	8bfb      	ldrh	r3, [r7, #30]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bb8:	8bfb      	ldrh	r3, [r7, #30]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1ea      	bne.n	8005b94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	372c      	adds	r7, #44	; 0x2c
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4013      	ands	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005be4:	68fb      	ldr	r3, [r7, #12]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <USB_CoreReset+0x64>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e01b      	b.n	8005c66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	daf2      	bge.n	8005c1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <USB_CoreReset+0x64>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e006      	b.n	8005c66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d0f0      	beq.n	8005c46 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	00030d40 	.word	0x00030d40

08005c78 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c78:	b084      	sub	sp, #16
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d018      	beq.n	8005d00 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d10a      	bne.n	8005cea <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ce2:	f043 0304 	orr.w	r3, r3, #4
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	e014      	b.n	8005d14 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cf8:	f023 0304 	bic.w	r3, r3, #4
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e009      	b.n	8005d14 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d0e:	f023 0304 	bic.w	r3, r3, #4
 8005d12:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d14:	2110      	movs	r1, #16
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff fe5e 	bl	80059d8 <USB_FlushTxFifo>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fe8a 	bl	8005a40 <USB_FlushRxFifo>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	e015      	b.n	8005d68 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	3301      	adds	r3, #1
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d3e5      	bcc.n	8005d3c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a13      	ldr	r2, [pc, #76]	; (8005de4 <USB_HostInit+0x16c>)
 8005d96:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <USB_HostInit+0x170>)
 8005d9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005da0:	e009      	b.n	8005db6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2280      	movs	r2, #128	; 0x80
 8005da6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a10      	ldr	r2, [pc, #64]	; (8005dec <USB_HostInit+0x174>)
 8005dac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <USB_HostInit+0x178>)
 8005db2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d105      	bne.n	8005dc8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f043 0210 	orr.w	r2, r3, #16
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699a      	ldr	r2, [r3, #24]
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <USB_HostInit+0x17c>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005de0:	b004      	add	sp, #16
 8005de2:	4770      	bx	lr
 8005de4:	01000200 	.word	0x01000200
 8005de8:	00e00300 	.word	0x00e00300
 8005dec:	00600080 	.word	0x00600080
 8005df0:	004000e0 	.word	0x004000e0
 8005df4:	a3200008 	.word	0xa3200008

08005df8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e16:	f023 0303 	bic.w	r3, r3, #3
 8005e1a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e30:	4313      	orrs	r3, r2
 8005e32:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d107      	bne.n	8005e4a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e40:	461a      	mov	r2, r3
 8005e42:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e46:	6053      	str	r3, [r2, #4]
 8005e48:	e009      	b.n	8005e5e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d106      	bne.n	8005e5e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e56:	461a      	mov	r2, r3
 8005e58:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e5c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e9c:	2064      	movs	r0, #100	; 0x64
 8005e9e:	f7fb f937 	bl	8001110 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005eb0:	200a      	movs	r0, #10
 8005eb2:	f7fb f92d 	bl	8001110 <HAL_Delay>

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ee4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d109      	bne.n	8005f04 <USB_DriveVbus+0x44>
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d106      	bne.n	8005f04 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005efe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f02:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0e:	d109      	bne.n	8005f24 <USB_DriveVbus+0x64>
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f22:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	0c5b      	lsrs	r3, r3, #17
 8005f50:	f003 0303 	and.w	r3, r3, #3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	b29b      	uxth	r3, r3
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	70fb      	strb	r3, [r7, #3]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70bb      	strb	r3, [r7, #2]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005fba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d87e      	bhi.n	80060c0 <USB_HC_Init+0x13c>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <USB_HC_Init+0x44>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fd9 	.word	0x08005fd9
 8005fcc:	08006083 	.word	0x08006083
 8005fd0:	08005fd9 	.word	0x08005fd9
 8005fd4:	08006045 	.word	0x08006045
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f240 439d 	movw	r3, #1181	; 0x49d
 8005fea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005fec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da10      	bge.n	8006016 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	440a      	add	r2, r1
 800600a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800600e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006012:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006014:	e057      	b.n	80060c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d051      	beq.n	80060c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	440a      	add	r2, r1
 8006038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006040:	60d3      	str	r3, [r2, #12]
      break;
 8006042:	e040      	b.n	80060c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	461a      	mov	r2, r3
 8006052:	f240 639d 	movw	r3, #1693	; 0x69d
 8006056:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006058:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800605c:	2b00      	cmp	r3, #0
 800605e:	da34      	bge.n	80060ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	440a      	add	r2, r1
 8006076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800607a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006080:	e023      	b.n	80060ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4413      	add	r3, r2
 800608a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608e:	461a      	mov	r2, r3
 8006090:	f240 2325 	movw	r3, #549	; 0x225
 8006094:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006096:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800609a:	2b00      	cmp	r3, #0
 800609c:	da17      	bge.n	80060ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060be:	e006      	b.n	80060ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	77fb      	strb	r3, [r7, #31]
      break;
 80060c4:	e004      	b.n	80060d0 <USB_HC_Init+0x14c>
      break;
 80060c6:	bf00      	nop
 80060c8:	e002      	b.n	80060d0 <USB_HC_Init+0x14c>
      break;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <USB_HC_Init+0x14c>
      break;
 80060ce:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ea:	f043 0302 	orr.w	r3, r3, #2
 80060ee:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f6:	699a      	ldr	r2, [r3, #24]
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	2101      	movs	r1, #1
 8006100:	fa01 f303 	lsl.w	r3, r1, r3
 8006104:	6939      	ldr	r1, [r7, #16]
 8006106:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800610a:	4313      	orrs	r3, r2
 800610c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800611a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800611e:	2b00      	cmp	r3, #0
 8006120:	da03      	bge.n	800612a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	e001      	b.n	800612e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff feff 	bl	8005f32 <USB_GetHostSpeed>
 8006134:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800613a:	2b02      	cmp	r3, #2
 800613c:	d106      	bne.n	800614c <USB_HC_Init+0x1c8>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d003      	beq.n	800614c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	e001      	b.n	8006150 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006150:	787b      	ldrb	r3, [r7, #1]
 8006152:	059b      	lsls	r3, r3, #22
 8006154:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006158:	78bb      	ldrb	r3, [r7, #2]
 800615a:	02db      	lsls	r3, r3, #11
 800615c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006160:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006162:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006166:	049b      	lsls	r3, r3, #18
 8006168:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800616c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800616e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006170:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006174:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	0159      	lsls	r1, r3, #5
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	440b      	add	r3, r1
 8006182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006186:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800618c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800618e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006192:	2b03      	cmp	r3, #3
 8006194:	d003      	beq.n	800619e <USB_HC_Init+0x21a>
 8006196:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10f      	bne.n	80061be <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061be:	7ffb      	ldrb	r3, [r7, #31]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3720      	adds	r7, #32
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08c      	sub	sp, #48	; 0x30
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80061e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d02d      	beq.n	800624e <USB_HC_StartXfer+0x86>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	791b      	ldrb	r3, [r3, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d129      	bne.n	800624e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d117      	bne.n	8006230 <USB_HC_StartXfer+0x68>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	79db      	ldrb	r3, [r3, #7]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <USB_HC_StartXfer+0x48>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	79db      	ldrb	r3, [r3, #7]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d10f      	bne.n	8006230 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	440a      	add	r2, r1
 8006226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <USB_HC_StartXfer+0x86>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	795b      	ldrb	r3, [r3, #5]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d107      	bne.n	800624e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	4619      	mov	r1, r3
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 fa0f 	bl	8006668 <USB_DoPing>
      return HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	e0f8      	b.n	8006440 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d018      	beq.n	8006288 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	8912      	ldrh	r2, [r2, #8]
 800625e:	4413      	add	r3, r2
 8006260:	3b01      	subs	r3, #1
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	8912      	ldrh	r2, [r2, #8]
 8006266:	fbb3 f3f2 	udiv	r3, r3, r2
 800626a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800626c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800626e:	8b7b      	ldrh	r3, [r7, #26]
 8006270:	429a      	cmp	r2, r3
 8006272:	d90b      	bls.n	800628c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006274:	8b7b      	ldrh	r3, [r7, #26]
 8006276:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	8912      	ldrh	r2, [r2, #8]
 800627e:	fb03 f202 	mul.w	r2, r3, r2
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	611a      	str	r2, [r3, #16]
 8006286:	e001      	b.n	800628c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006288:	2301      	movs	r3, #1
 800628a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	78db      	ldrb	r3, [r3, #3]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006294:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	8912      	ldrh	r2, [r2, #8]
 800629a:	fb03 f202 	mul.w	r2, r3, r2
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	611a      	str	r2, [r3, #16]
 80062a2:	e003      	b.n	80062ac <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062b6:	04d9      	lsls	r1, r3, #19
 80062b8:	4b63      	ldr	r3, [pc, #396]	; (8006448 <USB_HC_StartXfer+0x280>)
 80062ba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062bc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	7a9b      	ldrb	r3, [r3, #10]
 80062c2:	075b      	lsls	r3, r3, #29
 80062c4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062c8:	69f9      	ldr	r1, [r7, #28]
 80062ca:	0148      	lsls	r0, r1, #5
 80062cc:	6a39      	ldr	r1, [r7, #32]
 80062ce:	4401      	add	r1, r0
 80062d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062d4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062d6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	68d9      	ldr	r1, [r3, #12]
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ee:	460a      	mov	r2, r1
 80062f0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bf0c      	ite	eq
 8006302:	2301      	moveq	r3, #1
 8006304:	2300      	movne	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	4413      	add	r3, r2
 8006312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	0151      	lsls	r1, r2, #5
 800631c:	6a3a      	ldr	r2, [r7, #32]
 800631e:	440a      	add	r2, r1
 8006320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006324:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006328:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	7e7b      	ldrb	r3, [r7, #25]
 800633a:	075b      	lsls	r3, r3, #29
 800633c:	69f9      	ldr	r1, [r7, #28]
 800633e:	0148      	lsls	r0, r1, #5
 8006340:	6a39      	ldr	r1, [r7, #32]
 8006342:	4401      	add	r1, r0
 8006344:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006348:	4313      	orrs	r3, r2
 800634a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	4413      	add	r3, r2
 8006354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006362:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	78db      	ldrb	r3, [r3, #3]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	e003      	b.n	800637e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800637c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006384:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	4413      	add	r3, r2
 800638e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006392:	461a      	mov	r2, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e04e      	b.n	8006440 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	78db      	ldrb	r3, [r3, #3]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d149      	bne.n	800643e <USB_HC_StartXfer+0x276>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d045      	beq.n	800643e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	79db      	ldrb	r3, [r3, #7]
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d830      	bhi.n	800641c <USB_HC_StartXfer+0x254>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <USB_HC_StartXfer+0x1f8>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	080063f5 	.word	0x080063f5
 80063c8:	080063d1 	.word	0x080063d1
 80063cc:	080063f5 	.word	0x080063f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	3303      	adds	r3, #3
 80063d6:	089b      	lsrs	r3, r3, #2
 80063d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063da:	8afa      	ldrh	r2, [r7, #22]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d91c      	bls.n	8006420 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f043 0220 	orr.w	r2, r3, #32
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80063f2:	e015      	b.n	8006420 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	3303      	adds	r3, #3
 80063fa:	089b      	lsrs	r3, r3, #2
 80063fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063fe:	8afa      	ldrh	r2, [r7, #22]
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	b29b      	uxth	r3, r3
 800640a:	429a      	cmp	r2, r3
 800640c:	d90a      	bls.n	8006424 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	619a      	str	r2, [r3, #24]
        }
        break;
 800641a:	e003      	b.n	8006424 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800641c:	bf00      	nop
 800641e:	e002      	b.n	8006426 <USB_HC_StartXfer+0x25e>
        break;
 8006420:	bf00      	nop
 8006422:	e000      	b.n	8006426 <USB_HC_StartXfer+0x25e>
        break;
 8006424:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	68d9      	ldr	r1, [r3, #12]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	785a      	ldrb	r2, [r3, #1]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	b29b      	uxth	r3, r3
 8006434:	2000      	movs	r0, #0
 8006436:	9000      	str	r0, [sp, #0]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff fb31 	bl	8005aa0 <USB_WritePacket>
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3728      	adds	r7, #40	; 0x28
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	1ff80000 	.word	0x1ff80000

0800644c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	b29b      	uxth	r3, r3
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800646e:	b480      	push	{r7}
 8006470:	b089      	sub	sp, #36	; 0x24
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	0c9b      	lsrs	r3, r3, #18
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	0fdb      	lsrs	r3, r3, #31
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d104      	bne.n	80064c8 <USB_HC_Halt+0x5a>
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e0c8      	b.n	800665a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <USB_HC_Halt+0x66>
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d163      	bne.n	800659c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064f2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 80ab 	bne.w	8006658 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d133      	bne.n	8006576 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	440a      	add	r2, r1
 8006524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800652c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	440a      	add	r2, r1
 8006544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006548:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800654c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3301      	adds	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800655a:	d81d      	bhi.n	8006598 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800656e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006572:	d0ec      	beq.n	800654e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006574:	e070      	b.n	8006658 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	69fa      	ldr	r2, [r7, #28]
 800658a:	440a      	add	r2, r1
 800658c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006594:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006596:	e05f      	b.n	8006658 <USB_HC_Halt+0x1ea>
            break;
 8006598:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800659a:	e05d      	b.n	8006658 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065ba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d133      	bne.n	8006634 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	440a      	add	r2, r1
 8006602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800660a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006618:	d81d      	bhi.n	8006656 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800662c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006630:	d0ec      	beq.n	800660c <USB_HC_Halt+0x19e>
 8006632:	e011      	b.n	8006658 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	440a      	add	r2, r1
 800664a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800664e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	e000      	b.n	8006658 <USB_HC_Halt+0x1ea>
          break;
 8006656:	bf00      	nop
    }
  }

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3724      	adds	r7, #36	; 0x24
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800667c:	2301      	movs	r3, #1
 800667e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	04da      	lsls	r2, r3, #19
 8006684:	4b15      	ldr	r3, [pc, #84]	; (80066dc <USB_DoPing+0x74>)
 8006686:	4013      	ands	r3, r2
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	440a      	add	r2, r1
 8006690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006698:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	461a      	mov	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	1ff80000 	.word	0x1ff80000

080066e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff f911 	bl	800591c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066fa:	2110      	movs	r1, #16
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff f96b 	bl	80059d8 <USB_FlushTxFifo>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff f997 	bl	8005a40 <USB_FlushRxFifo>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800671c:	2300      	movs	r3, #0
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	e01f      	b.n	8006762 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	4413      	add	r3, r2
 800672a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006738:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006740:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006748:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	4413      	add	r3, r2
 8006752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006756:	461a      	mov	r2, r3
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	3301      	adds	r3, #1
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b0f      	cmp	r3, #15
 8006766:	d9dc      	bls.n	8006722 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006768:	2300      	movs	r3, #0
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	e034      	b.n	80067d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006784:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800678c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006794:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a2:	461a      	mov	r2, r3
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067b4:	d80c      	bhi.n	80067d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067cc:	d0ec      	beq.n	80067a8 <USB_StopHost+0xc8>
 80067ce:	e000      	b.n	80067d2 <USB_StopHost+0xf2>
        break;
 80067d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	3301      	adds	r3, #1
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b0f      	cmp	r3, #15
 80067dc:	d9c7      	bls.n	800676e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067e4:	461a      	mov	r2, r3
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f04f 32ff 	mov.w	r2, #4294967295
 80067f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff f880 	bl	80058fa <USB_EnableGlobalInt>

  return ret;
 80067fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006804:	b590      	push	{r4, r7, lr}
 8006806:	b089      	sub	sp, #36	; 0x24
 8006808:	af04      	add	r7, sp, #16
 800680a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800680c:	2301      	movs	r3, #1
 800680e:	2202      	movs	r2, #2
 8006810:	2102      	movs	r1, #2
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fc66 	bl	80070e4 <USBH_FindInterface>
 8006818:	4603      	mov	r3, r0
 800681a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	2bff      	cmp	r3, #255	; 0xff
 8006820:	d002      	beq.n	8006828 <USBH_CDC_InterfaceInit+0x24>
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d901      	bls.n	800682c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006828:	2302      	movs	r3, #2
 800682a:	e13d      	b.n	8006aa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fc3b 	bl	80070ac <USBH_SelectInterface>
 8006836:	4603      	mov	r3, r0
 8006838:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006840:	2302      	movs	r3, #2
 8006842:	e131      	b.n	8006aa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800684a:	2050      	movs	r0, #80	; 0x50
 800684c:	f002 fafa 	bl	8008e44 <malloc>
 8006850:	4603      	mov	r3, r0
 8006852:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006864:	2302      	movs	r3, #2
 8006866:	e11f      	b.n	8006aa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006868:	2250      	movs	r2, #80	; 0x50
 800686a:	2100      	movs	r1, #0
 800686c:	68b8      	ldr	r0, [r7, #8]
 800686e:	f002 faf9 	bl	8008e64 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	211a      	movs	r1, #26
 8006878:	fb01 f303 	mul.w	r3, r1, r3
 800687c:	4413      	add	r3, r2
 800687e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	b25b      	sxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	da15      	bge.n	80068b6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	211a      	movs	r1, #26
 8006890:	fb01 f303 	mul.w	r3, r1, r3
 8006894:	4413      	add	r3, r2
 8006896:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	211a      	movs	r1, #26
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068b0:	881a      	ldrh	r2, [r3, #0]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 ff2c 	bl	800871a <USBH_AllocPipe>
 80068c2:	4603      	mov	r3, r0
 80068c4:	461a      	mov	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	7819      	ldrb	r1, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	7858      	ldrb	r0, [r3, #1]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	8952      	ldrh	r2, [r2, #10]
 80068e2:	9202      	str	r2, [sp, #8]
 80068e4:	2203      	movs	r2, #3
 80068e6:	9201      	str	r2, [sp, #4]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	4623      	mov	r3, r4
 80068ec:	4602      	mov	r2, r0
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 fee4 	bl	80086bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2200      	movs	r2, #0
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f002 f9f3 	bl	8008ce8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006902:	2300      	movs	r3, #0
 8006904:	2200      	movs	r2, #0
 8006906:	210a      	movs	r1, #10
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fbeb 	bl	80070e4 <USBH_FindInterface>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2bff      	cmp	r3, #255	; 0xff
 8006916:	d002      	beq.n	800691e <USBH_CDC_InterfaceInit+0x11a>
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d901      	bls.n	8006922 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800691e:	2302      	movs	r3, #2
 8006920:	e0c2      	b.n	8006aa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	211a      	movs	r1, #26
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	4413      	add	r3, r2
 800692e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	b25b      	sxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	da16      	bge.n	8006968 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	211a      	movs	r1, #26
 8006940:	fb01 f303 	mul.w	r3, r1, r3
 8006944:	4413      	add	r3, r2
 8006946:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800694a:	781a      	ldrb	r2, [r3, #0]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	211a      	movs	r1, #26
 8006956:	fb01 f303 	mul.w	r3, r1, r3
 800695a:	4413      	add	r3, r2
 800695c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006960:	881a      	ldrh	r2, [r3, #0]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	835a      	strh	r2, [r3, #26]
 8006966:	e015      	b.n	8006994 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	211a      	movs	r1, #26
 800696e:	fb01 f303 	mul.w	r3, r1, r3
 8006972:	4413      	add	r3, r2
 8006974:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	211a      	movs	r1, #26
 8006984:	fb01 f303 	mul.w	r3, r1, r3
 8006988:	4413      	add	r3, r2
 800698a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800698e:	881a      	ldrh	r2, [r3, #0]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	211a      	movs	r1, #26
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	4413      	add	r3, r2
 80069a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	b25b      	sxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	da16      	bge.n	80069da <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	211a      	movs	r1, #26
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	4413      	add	r3, r2
 80069b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	211a      	movs	r1, #26
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069d2:	881a      	ldrh	r2, [r3, #0]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	835a      	strh	r2, [r3, #26]
 80069d8:	e015      	b.n	8006a06 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	211a      	movs	r1, #26
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	4413      	add	r3, r2
 80069e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069ea:	781a      	ldrb	r2, [r3, #0]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	211a      	movs	r1, #26
 80069f6:	fb01 f303 	mul.w	r3, r1, r3
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a00:	881a      	ldrh	r2, [r3, #0]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	7b9b      	ldrb	r3, [r3, #14]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 fe84 	bl	800871a <USBH_AllocPipe>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461a      	mov	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	7bdb      	ldrb	r3, [r3, #15]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 fe7a 	bl	800871a <USBH_AllocPipe>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	7b59      	ldrb	r1, [r3, #13]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	7b98      	ldrb	r0, [r3, #14]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	8b12      	ldrh	r2, [r2, #24]
 8006a46:	9202      	str	r2, [sp, #8]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	9201      	str	r2, [sp, #4]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	4623      	mov	r3, r4
 8006a50:	4602      	mov	r2, r0
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fe32 	bl	80086bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	7b19      	ldrb	r1, [r3, #12]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	7bd8      	ldrb	r0, [r3, #15]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	8b52      	ldrh	r2, [r2, #26]
 8006a70:	9202      	str	r2, [sp, #8]
 8006a72:	2202      	movs	r2, #2
 8006a74:	9201      	str	r2, [sp, #4]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	4623      	mov	r3, r4
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fe1d 	bl	80086bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	7b5b      	ldrb	r3, [r3, #13]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f002 f928 	bl	8008ce8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	7b1b      	ldrb	r3, [r3, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f002 f921 	bl	8008ce8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd90      	pop	{r4, r7, pc}

08006ab0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00e      	beq.n	8006ae8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fe12 	bl	80086fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fe3d 	bl	800875c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	7b1b      	ldrb	r3, [r3, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00e      	beq.n	8006b0e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	7b1b      	ldrb	r3, [r3, #12]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 fdff 	bl	80086fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	7b1b      	ldrb	r3, [r3, #12]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fe2a 	bl	800875c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	7b5b      	ldrb	r3, [r3, #13]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00e      	beq.n	8006b34 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	7b5b      	ldrb	r3, [r3, #13]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 fdec 	bl	80086fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	7b5b      	ldrb	r3, [r3, #13]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 fe17 	bl	800875c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f002 f983 	bl	8008e54 <free>
    phost->pActiveClass->pData = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b54:	2200      	movs	r2, #0
 8006b56:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3340      	adds	r3, #64	; 0x40
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8b1 	bl	8006ce2 <GetLineCoding>
 8006b80:	4603      	mov	r3, r0
 8006b82:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b84:	7afb      	ldrb	r3, [r7, #11]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b90:	2102      	movs	r1, #2
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b96:	7afb      	ldrb	r3, [r7, #11]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006bc0:	2b04      	cmp	r3, #4
 8006bc2:	d877      	bhi.n	8006cb4 <USBH_CDC_Process+0x114>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <USBH_CDC_Process+0x2c>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006be1 	.word	0x08006be1
 8006bd0:	08006be7 	.word	0x08006be7
 8006bd4:	08006c17 	.word	0x08006c17
 8006bd8:	08006c8b 	.word	0x08006c8b
 8006bdc:	08006c99 	.word	0x08006c99
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]
      break;
 8006be4:	e06d      	b.n	8006cc2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f897 	bl	8006d20 <SetLineCoding>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c04:	e058      	b.n	8006cb8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d055      	beq.n	8006cb8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2204      	movs	r2, #4
 8006c10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c14:	e050      	b.n	8006cb8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	3340      	adds	r3, #64	; 0x40
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f860 	bl	8006ce2 <GetLineCoding>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d126      	bne.n	8006c7a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3e:	791b      	ldrb	r3, [r3, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d13b      	bne.n	8006cbc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d133      	bne.n	8006cbc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d12b      	bne.n	8006cbc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d124      	bne.n	8006cbc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f958 	bl	8006f28 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c78:	e020      	b.n	8006cbc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d01d      	beq.n	8006cbc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2204      	movs	r2, #4
 8006c84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c88:	e018      	b.n	8006cbc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f867 	bl	8006d5e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f8da 	bl	8006e4a <CDC_ProcessReception>
      break;
 8006c96:	e014      	b.n	8006cc2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c98:	2100      	movs	r1, #0
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 ffef 	bl	8007c7e <USBH_ClrFeature>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006cb2:	e005      	b.n	8006cc0 <USBH_CDC_Process+0x120>

    default:
      break;
 8006cb4:	bf00      	nop
 8006cb6:	e004      	b.n	8006cc2 <USBH_CDC_Process+0x122>
      break;
 8006cb8:	bf00      	nop
 8006cba:	e002      	b.n	8006cc2 <USBH_CDC_Process+0x122>
      break;
 8006cbc:	bf00      	nop
 8006cbe:	e000      	b.n	8006cc2 <USBH_CDC_Process+0x122>
      break;
 8006cc0:	bf00      	nop

  }

  return status;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	22a1      	movs	r2, #161	; 0xa1
 8006cf0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2221      	movs	r2, #33	; 0x21
 8006cf6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2207      	movs	r2, #7
 8006d08:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2207      	movs	r2, #7
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 fa81 	bl	8008218 <USBH_CtlReq>
 8006d16:	4603      	mov	r3, r0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2221      	movs	r2, #33	; 0x21
 8006d2e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2207      	movs	r2, #7
 8006d46:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2207      	movs	r2, #7
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fa62 	bl	8008218 <USBH_CtlReq>
 8006d54:	4603      	mov	r3, r0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af02      	add	r7, sp, #8
 8006d64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d002      	beq.n	8006d84 <CDC_ProcessTransmission+0x26>
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d023      	beq.n	8006dca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d82:	e05e      	b.n	8006e42 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	8b12      	ldrh	r2, [r2, #24]
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d90b      	bls.n	8006da8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	69d9      	ldr	r1, [r3, #28]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8b1a      	ldrh	r2, [r3, #24]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	7b5b      	ldrb	r3, [r3, #13]
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	9000      	str	r0, [sp, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 fc48 	bl	8008636 <USBH_BulkSendData>
 8006da6:	e00b      	b.n	8006dc0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	7b5b      	ldrb	r3, [r3, #13]
 8006db6:	2001      	movs	r0, #1
 8006db8:	9000      	str	r0, [sp, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fc3b 	bl	8008636 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006dc8:	e03b      	b.n	8006e42 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	7b5b      	ldrb	r3, [r3, #13]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 ff5f 	bl	8008c94 <USBH_LL_GetURBState>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006dda:	7afb      	ldrb	r3, [r7, #11]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d128      	bne.n	8006e32 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	8b12      	ldrh	r2, [r2, #24]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d90e      	bls.n	8006e0a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	8b12      	ldrh	r2, [r2, #24]
 8006df4:	1a9a      	subs	r2, r3, r2
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	8b12      	ldrh	r2, [r2, #24]
 8006e02:	441a      	add	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	61da      	str	r2, [r3, #28]
 8006e08:	e002      	b.n	8006e10 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d004      	beq.n	8006e22 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e20:	e00e      	b.n	8006e40 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f868 	bl	8006f00 <USBH_CDC_TransmitCallback>
      break;
 8006e30:	e006      	b.n	8006e40 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d103      	bne.n	8006e40 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e40:	bf00      	nop
  }
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b086      	sub	sp, #24
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d002      	beq.n	8006e70 <CDC_ProcessReception+0x26>
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d00e      	beq.n	8006e8c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e6e:	e043      	b.n	8006ef8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6a19      	ldr	r1, [r3, #32]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	8b5a      	ldrh	r2, [r3, #26]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	7b1b      	ldrb	r3, [r3, #12]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fbff 	bl	8008680 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2204      	movs	r2, #4
 8006e86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e8a:	e035      	b.n	8006ef8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	7b1b      	ldrb	r3, [r3, #12]
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fefe 	bl	8008c94 <USBH_LL_GetURBState>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e9c:	7cfb      	ldrb	r3, [r7, #19]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d129      	bne.n	8006ef6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	7b1b      	ldrb	r3, [r3, #12]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fe61 	bl	8008b70 <USBH_LL_GetLastXferSize>
 8006eae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d016      	beq.n	8006ee8 <CDC_ProcessReception+0x9e>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	8b5b      	ldrh	r3, [r3, #26]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d910      	bls.n	8006ee8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1ad2      	subs	r2, r2, r3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6a1a      	ldr	r2, [r3, #32]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	441a      	add	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ee6:	e006      	b.n	8006ef6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f80f 	bl	8006f14 <USBH_CDC_ReceiveCallback>
      break;
 8006ef6:	bf00      	nop
  }
}
 8006ef8:	bf00      	nop
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f50:	2302      	movs	r3, #2
 8006f52:	e029      	b.n	8006fa8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	79fa      	ldrb	r2, [r7, #7]
 8006f58:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f81f 	bl	8006fb0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f001 fd31 	bl	8008a08 <USBH_LL_Init>

  return USBH_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	e009      	b.n	8006fd6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	33e0      	adds	r3, #224	; 0xe0
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	2200      	movs	r2, #0
 8006fce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b0f      	cmp	r3, #15
 8006fda:	d9f2      	bls.n	8006fc2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e009      	b.n	8006ff6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ffc:	d3f1      	bcc.n	8006fe2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2240      	movs	r2, #64	; 0x40
 8007022:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d016      	beq.n	800709a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10e      	bne.n	8007094 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800707c:	1c59      	adds	r1, r3, #1
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	33de      	adds	r3, #222	; 0xde
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
 8007092:	e004      	b.n	800709e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007094:	2302      	movs	r3, #2
 8007096:	73fb      	strb	r3, [r7, #15]
 8007098:	e001      	b.n	800709e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800709a:	2302      	movs	r3, #2
 800709c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070c2:	78fa      	ldrb	r2, [r7, #3]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d204      	bcs.n	80070d2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070d0:	e001      	b.n	80070d6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070d2:	2302      	movs	r3, #2
 80070d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	4608      	mov	r0, r1
 80070ee:	4611      	mov	r1, r2
 80070f0:	461a      	mov	r2, r3
 80070f2:	4603      	mov	r3, r0
 80070f4:	70fb      	strb	r3, [r7, #3]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70bb      	strb	r3, [r7, #2]
 80070fa:	4613      	mov	r3, r2
 80070fc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800710c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800710e:	e025      	b.n	800715c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	221a      	movs	r2, #26
 8007114:	fb02 f303 	mul.w	r3, r2, r3
 8007118:	3308      	adds	r3, #8
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	3302      	adds	r3, #2
 8007120:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	795b      	ldrb	r3, [r3, #5]
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	429a      	cmp	r2, r3
 800712a:	d002      	beq.n	8007132 <USBH_FindInterface+0x4e>
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	2bff      	cmp	r3, #255	; 0xff
 8007130:	d111      	bne.n	8007156 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007136:	78ba      	ldrb	r2, [r7, #2]
 8007138:	429a      	cmp	r2, r3
 800713a:	d002      	beq.n	8007142 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800713c:	78bb      	ldrb	r3, [r7, #2]
 800713e:	2bff      	cmp	r3, #255	; 0xff
 8007140:	d109      	bne.n	8007156 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007146:	787a      	ldrb	r2, [r7, #1]
 8007148:	429a      	cmp	r2, r3
 800714a:	d002      	beq.n	8007152 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800714c:	787b      	ldrb	r3, [r7, #1]
 800714e:	2bff      	cmp	r3, #255	; 0xff
 8007150:	d101      	bne.n	8007156 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	e006      	b.n	8007164 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	3301      	adds	r3, #1
 800715a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d9d6      	bls.n	8007110 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007162:	23ff      	movs	r3, #255	; 0xff
}
 8007164:	4618      	mov	r0, r3
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fc81 	bl	8008a80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800717e:	2101      	movs	r1, #1
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fd9a 	bl	8008cba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af04      	add	r7, sp, #16
 8007196:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007198:	2302      	movs	r3, #2
 800719a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d102      	bne.n	80071b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2203      	movs	r2, #3
 80071b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b0b      	cmp	r3, #11
 80071ba:	f200 81be 	bhi.w	800753a <USBH_Process+0x3aa>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <USBH_Process+0x34>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071f5 	.word	0x080071f5
 80071c8:	08007227 	.word	0x08007227
 80071cc:	0800728f 	.word	0x0800728f
 80071d0:	080074d5 	.word	0x080074d5
 80071d4:	0800753b 	.word	0x0800753b
 80071d8:	08007333 	.word	0x08007333
 80071dc:	0800747b 	.word	0x0800747b
 80071e0:	08007369 	.word	0x08007369
 80071e4:	08007389 	.word	0x08007389
 80071e8:	080073a9 	.word	0x080073a9
 80071ec:	080073ed 	.word	0x080073ed
 80071f0:	080074bd 	.word	0x080074bd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 819e 	beq.w	800753e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007208:	20c8      	movs	r0, #200	; 0xc8
 800720a:	f001 fd9d 	bl	8008d48 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fc93 	bl	8008b3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007224:	e18b      	b.n	800753e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800722c:	2b01      	cmp	r3, #1
 800722e:	d107      	bne.n	8007240 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800723e:	e18d      	b.n	800755c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800724a:	d914      	bls.n	8007276 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007252:	3301      	adds	r3, #1
 8007254:	b2da      	uxtb	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007262:	2b03      	cmp	r3, #3
 8007264:	d903      	bls.n	800726e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	220d      	movs	r2, #13
 800726a:	701a      	strb	r2, [r3, #0]
      break;
 800726c:	e176      	b.n	800755c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
      break;
 8007274:	e172      	b.n	800755c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800727c:	f103 020a 	add.w	r2, r3, #10
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007286:	200a      	movs	r0, #10
 8007288:	f001 fd5e 	bl	8008d48 <USBH_Delay>
      break;
 800728c:	e166      	b.n	800755c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800729e:	2104      	movs	r1, #4
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072a4:	2064      	movs	r0, #100	; 0x64
 80072a6:	f001 fd4f 	bl	8008d48 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fc1e 	bl	8008aec <USBH_LL_GetSpeed>
 80072b0:	4603      	mov	r3, r0
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2205      	movs	r2, #5
 80072be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072c0:	2100      	movs	r1, #0
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fa29 	bl	800871a <USBH_AllocPipe>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072d0:	2180      	movs	r1, #128	; 0x80
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fa21 	bl	800871a <USBH_AllocPipe>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7919      	ldrb	r1, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072f4:	b292      	uxth	r2, r2
 80072f6:	9202      	str	r2, [sp, #8]
 80072f8:	2200      	movs	r2, #0
 80072fa:	9201      	str	r2, [sp, #4]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	4603      	mov	r3, r0
 8007300:	2280      	movs	r2, #128	; 0x80
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 f9da 	bl	80086bc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7959      	ldrb	r1, [r3, #5]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800731c:	b292      	uxth	r2, r2
 800731e:	9202      	str	r2, [sp, #8]
 8007320:	2200      	movs	r2, #0
 8007322:	9201      	str	r2, [sp, #4]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	4603      	mov	r3, r0
 8007328:	2200      	movs	r2, #0
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 f9c6 	bl	80086bc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007330:	e114      	b.n	800755c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f918 	bl	8007568 <USBH_HandleEnum>
 8007338:	4603      	mov	r3, r0
 800733a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 80fe 	bne.w	8007542 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007354:	2b01      	cmp	r3, #1
 8007356:	d103      	bne.n	8007360 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2208      	movs	r2, #8
 800735c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800735e:	e0f0      	b.n	8007542 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2207      	movs	r2, #7
 8007364:	701a      	strb	r2, [r3, #0]
      break;
 8007366:	e0ec      	b.n	8007542 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80e9 	beq.w	8007546 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800737a:	2101      	movs	r1, #1
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2208      	movs	r2, #8
 8007384:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007386:	e0de      	b.n	8007546 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800738e:	b29b      	uxth	r3, r3
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fc2c 	bl	8007bf0 <USBH_SetCfg>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	f040 80d5 	bne.w	800754a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2209      	movs	r2, #9
 80073a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073a6:	e0d0      	b.n	800754a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d016      	beq.n	80073e4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80073b6:	2101      	movs	r1, #1
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fc3c 	bl	8007c36 <USBH_SetFeature>
 80073be:	4603      	mov	r3, r0
 80073c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	220a      	movs	r2, #10
 80073ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073d0:	e0bd      	b.n	800754e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	f040 80b9 	bne.w	800754e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	220a      	movs	r2, #10
 80073e0:	701a      	strb	r2, [r3, #0]
      break;
 80073e2:	e0b4      	b.n	800754e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	220a      	movs	r2, #10
 80073e8:	701a      	strb	r2, [r3, #0]
      break;
 80073ea:	e0b0      	b.n	800754e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80ad 	beq.w	8007552 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
 8007404:	e016      	b.n	8007434 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007406:	7bfa      	ldrb	r2, [r7, #15]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	32de      	adds	r2, #222	; 0xde
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	791a      	ldrb	r2, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007418:	429a      	cmp	r2, r3
 800741a:	d108      	bne.n	800742e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800741c:	7bfa      	ldrb	r2, [r7, #15]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	32de      	adds	r2, #222	; 0xde
 8007422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800742c:	e005      	b.n	800743a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	3301      	adds	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0e5      	beq.n	8007406 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d016      	beq.n	8007472 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2206      	movs	r2, #6
 800745a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007462:	2103      	movs	r1, #3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007468:	e073      	b.n	8007552 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	220d      	movs	r2, #13
 800746e:	701a      	strb	r2, [r3, #0]
      break;
 8007470:	e06f      	b.n	8007552 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	220d      	movs	r2, #13
 8007476:	701a      	strb	r2, [r3, #0]
      break;
 8007478:	e06b      	b.n	8007552 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d017      	beq.n	80074b4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
 8007490:	4603      	mov	r3, r0
 8007492:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d103      	bne.n	80074a4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	220b      	movs	r2, #11
 80074a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074a2:	e058      	b.n	8007556 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d154      	bne.n	8007556 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	220d      	movs	r2, #13
 80074b0:	701a      	strb	r2, [r3, #0]
      break;
 80074b2:	e050      	b.n	8007556 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	220d      	movs	r2, #13
 80074b8:	701a      	strb	r2, [r3, #0]
      break;
 80074ba:	e04c      	b.n	8007556 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d049      	beq.n	800755a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
      }
      break;
 80074d2:	e042      	b.n	800755a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff fd67 	bl	8006fb0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d009      	beq.n	8007500 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007510:	2105      	movs	r1, #5
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b01      	cmp	r3, #1
 8007520:	d107      	bne.n	8007532 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff fe20 	bl	8007170 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007530:	e014      	b.n	800755c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 faa4 	bl	8008a80 <USBH_LL_Start>
      break;
 8007538:	e010      	b.n	800755c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800753a:	bf00      	nop
 800753c:	e00e      	b.n	800755c <USBH_Process+0x3cc>
      break;
 800753e:	bf00      	nop
 8007540:	e00c      	b.n	800755c <USBH_Process+0x3cc>
      break;
 8007542:	bf00      	nop
 8007544:	e00a      	b.n	800755c <USBH_Process+0x3cc>
    break;
 8007546:	bf00      	nop
 8007548:	e008      	b.n	800755c <USBH_Process+0x3cc>
      break;
 800754a:	bf00      	nop
 800754c:	e006      	b.n	800755c <USBH_Process+0x3cc>
      break;
 800754e:	bf00      	nop
 8007550:	e004      	b.n	800755c <USBH_Process+0x3cc>
      break;
 8007552:	bf00      	nop
 8007554:	e002      	b.n	800755c <USBH_Process+0x3cc>
      break;
 8007556:	bf00      	nop
 8007558:	e000      	b.n	800755c <USBH_Process+0x3cc>
      break;
 800755a:	bf00      	nop
  }
  return USBH_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop

08007568 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af04      	add	r7, sp, #16
 800756e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007574:	2301      	movs	r3, #1
 8007576:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	2b07      	cmp	r3, #7
 800757e:	f200 81c1 	bhi.w	8007904 <USBH_HandleEnum+0x39c>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <USBH_HandleEnum+0x20>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075a9 	.word	0x080075a9
 800758c:	08007667 	.word	0x08007667
 8007590:	080076d1 	.word	0x080076d1
 8007594:	0800775f 	.word	0x0800775f
 8007598:	080077c9 	.word	0x080077c9
 800759c:	08007839 	.word	0x08007839
 80075a0:	0800787f 	.word	0x0800787f
 80075a4:	080078c5 	.word	0x080078c5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075a8:	2108      	movs	r1, #8
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa50 	bl	8007a50 <USBH_Get_DevDesc>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d130      	bne.n	800761c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7919      	ldrb	r1, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075de:	b292      	uxth	r2, r2
 80075e0:	9202      	str	r2, [sp, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	9201      	str	r2, [sp, #4]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4603      	mov	r3, r0
 80075ea:	2280      	movs	r2, #128	; 0x80
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 f865 	bl	80086bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7959      	ldrb	r1, [r3, #5]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007606:	b292      	uxth	r2, r2
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	4603      	mov	r3, r0
 8007612:	2200      	movs	r2, #0
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f851 	bl	80086bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800761a:	e175      	b.n	8007908 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b03      	cmp	r3, #3
 8007620:	f040 8172 	bne.w	8007908 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800762a:	3301      	adds	r3, #1
 800762c:	b2da      	uxtb	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800763a:	2b03      	cmp	r3, #3
 800763c:	d903      	bls.n	8007646 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	220d      	movs	r2, #13
 8007642:	701a      	strb	r2, [r3, #0]
      break;
 8007644:	e160      	b.n	8007908 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	795b      	ldrb	r3, [r3, #5]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f885 	bl	800875c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 f87f 	bl	800875c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
      break;
 8007664:	e150      	b.n	8007908 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007666:	2112      	movs	r1, #18
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f9f1 	bl	8007a50 <USBH_Get_DevDesc>
 800766e:	4603      	mov	r3, r0
 8007670:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800767e:	e145      	b.n	800790c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2b03      	cmp	r3, #3
 8007684:	f040 8142 	bne.w	800790c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800768e:	3301      	adds	r3, #1
 8007690:	b2da      	uxtb	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d903      	bls.n	80076aa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	220d      	movs	r2, #13
 80076a6:	701a      	strb	r2, [r3, #0]
      break;
 80076a8:	e130      	b.n	800790c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	795b      	ldrb	r3, [r3, #5]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f853 	bl	800875c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	791b      	ldrb	r3, [r3, #4]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 f84d 	bl	800875c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	701a      	strb	r2, [r3, #0]
      break;
 80076ce:	e11d      	b.n	800790c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076d0:	2101      	movs	r1, #1
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa68 	bl	8007ba8 <USBH_SetAddress>
 80076d8:	4603      	mov	r3, r0
 80076da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d132      	bne.n	8007748 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80076e2:	2002      	movs	r0, #2
 80076e4:	f001 fb30 	bl	8008d48 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2203      	movs	r2, #3
 80076f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	7919      	ldrb	r1, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800770a:	b292      	uxth	r2, r2
 800770c:	9202      	str	r2, [sp, #8]
 800770e:	2200      	movs	r2, #0
 8007710:	9201      	str	r2, [sp, #4]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	4603      	mov	r3, r0
 8007716:	2280      	movs	r2, #128	; 0x80
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 ffcf 	bl	80086bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	7959      	ldrb	r1, [r3, #5]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007732:	b292      	uxth	r2, r2
 8007734:	9202      	str	r2, [sp, #8]
 8007736:	2200      	movs	r2, #0
 8007738:	9201      	str	r2, [sp, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	4603      	mov	r3, r0
 800773e:	2200      	movs	r2, #0
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 ffbb 	bl	80086bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007746:	e0e3      	b.n	8007910 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	2b03      	cmp	r3, #3
 800774c:	f040 80e0 	bne.w	8007910 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	220d      	movs	r2, #13
 8007754:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	705a      	strb	r2, [r3, #1]
      break;
 800775c:	e0d8      	b.n	8007910 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800775e:	2109      	movs	r1, #9
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f99d 	bl	8007aa0 <USBH_Get_CfgDesc>
 8007766:	4603      	mov	r3, r0
 8007768:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d103      	bne.n	8007778 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2204      	movs	r2, #4
 8007774:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007776:	e0cd      	b.n	8007914 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b03      	cmp	r3, #3
 800777c:	f040 80ca 	bne.w	8007914 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007786:	3301      	adds	r3, #1
 8007788:	b2da      	uxtb	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007796:	2b03      	cmp	r3, #3
 8007798:	d903      	bls.n	80077a2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	220d      	movs	r2, #13
 800779e:	701a      	strb	r2, [r3, #0]
      break;
 80077a0:	e0b8      	b.n	8007914 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	795b      	ldrb	r3, [r3, #5]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 ffd7 	bl	800875c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	791b      	ldrb	r3, [r3, #4]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 ffd1 	bl	800875c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	701a      	strb	r2, [r3, #0]
      break;
 80077c6:	e0a5      	b.n	8007914 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f965 	bl	8007aa0 <USBH_Get_CfgDesc>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2205      	movs	r2, #5
 80077e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077e6:	e097      	b.n	8007918 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	f040 8094 	bne.w	8007918 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077f6:	3301      	adds	r3, #1
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007806:	2b03      	cmp	r3, #3
 8007808:	d903      	bls.n	8007812 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	220d      	movs	r2, #13
 800780e:	701a      	strb	r2, [r3, #0]
      break;
 8007810:	e082      	b.n	8007918 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 ff9f 	bl	800875c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	791b      	ldrb	r3, [r3, #4]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ff99 	bl	800875c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	701a      	strb	r2, [r3, #0]
      break;
 8007836:	e06f      	b.n	8007918 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800783e:	2b00      	cmp	r3, #0
 8007840:	d019      	beq.n	8007876 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800784e:	23ff      	movs	r3, #255	; 0xff
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f949 	bl	8007ae8 <USBH_Get_StringDesc>
 8007856:	4603      	mov	r3, r0
 8007858:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2206      	movs	r2, #6
 8007864:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007866:	e059      	b.n	800791c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d156      	bne.n	800791c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2206      	movs	r2, #6
 8007872:	705a      	strb	r2, [r3, #1]
      break;
 8007874:	e052      	b.n	800791c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2206      	movs	r2, #6
 800787a:	705a      	strb	r2, [r3, #1]
      break;
 800787c:	e04e      	b.n	800791c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007884:	2b00      	cmp	r3, #0
 8007886:	d019      	beq.n	80078bc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007894:	23ff      	movs	r3, #255	; 0xff
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f926 	bl	8007ae8 <USBH_Get_StringDesc>
 800789c:	4603      	mov	r3, r0
 800789e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d103      	bne.n	80078ae <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2207      	movs	r2, #7
 80078aa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078ac:	e038      	b.n	8007920 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d135      	bne.n	8007920 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2207      	movs	r2, #7
 80078b8:	705a      	strb	r2, [r3, #1]
      break;
 80078ba:	e031      	b.n	8007920 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2207      	movs	r2, #7
 80078c0:	705a      	strb	r2, [r3, #1]
      break;
 80078c2:	e02d      	b.n	8007920 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d017      	beq.n	80078fe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078da:	23ff      	movs	r3, #255	; 0xff
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f903 	bl	8007ae8 <USBH_Get_StringDesc>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80078f0:	e018      	b.n	8007924 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d115      	bne.n	8007924 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
      break;
 80078fc:	e012      	b.n	8007924 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
      break;
 8007902:	e00f      	b.n	8007924 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007904:	bf00      	nop
 8007906:	e00e      	b.n	8007926 <USBH_HandleEnum+0x3be>
      break;
 8007908:	bf00      	nop
 800790a:	e00c      	b.n	8007926 <USBH_HandleEnum+0x3be>
      break;
 800790c:	bf00      	nop
 800790e:	e00a      	b.n	8007926 <USBH_HandleEnum+0x3be>
      break;
 8007910:	bf00      	nop
 8007912:	e008      	b.n	8007926 <USBH_HandleEnum+0x3be>
      break;
 8007914:	bf00      	nop
 8007916:	e006      	b.n	8007926 <USBH_HandleEnum+0x3be>
      break;
 8007918:	bf00      	nop
 800791a:	e004      	b.n	8007926 <USBH_HandleEnum+0x3be>
      break;
 800791c:	bf00      	nop
 800791e:	e002      	b.n	8007926 <USBH_HandleEnum+0x3be>
      break;
 8007920:	bf00      	nop
 8007922:	e000      	b.n	8007926 <USBH_HandleEnum+0x3be>
      break;
 8007924:	bf00      	nop
  }
  return Status;
 8007926:	7bfb      	ldrb	r3, [r7, #15]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f804 	bl	8007972 <USBH_HandleSof>
}
 800796a:	bf00      	nop
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b0b      	cmp	r3, #11
 8007982:	d10a      	bne.n	800799a <USBH_HandleSof+0x28>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
  }
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079b2:	bf00      	nop
}
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079ce:	bf00      	nop
}
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 f844 	bl	8008ab6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	791b      	ldrb	r3, [r3, #4]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fe91 	bl	800875c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	795b      	ldrb	r3, [r3, #5]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fe8b 	bl	800875c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a6e:	2100      	movs	r1, #0
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f864 	bl	8007b3e <USBH_GetDescriptor>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	b292      	uxth	r2, r2
 8007a90:	4619      	mov	r1, r3
 8007a92:	f000 f918 	bl	8007cc6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	331c      	adds	r3, #28
 8007ab0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ab2:	887b      	ldrh	r3, [r7, #2]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007abc:	2100      	movs	r1, #0
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f83d 	bl	8007b3e <USBH_GetDescriptor>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d107      	bne.n	8007ade <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007ace:	887b      	ldrh	r3, [r7, #2]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f987 	bl	8007de8 <USBH_ParseCfgDesc>
 8007ada:	4603      	mov	r3, r0
 8007adc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	461a      	mov	r2, r3
 8007af4:	460b      	mov	r3, r1
 8007af6:	72fb      	strb	r3, [r7, #11]
 8007af8:	4613      	mov	r3, r2
 8007afa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b04:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b0c:	893b      	ldrh	r3, [r7, #8]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	460b      	mov	r3, r1
 8007b12:	2100      	movs	r1, #0
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f812 	bl	8007b3e <USBH_GetDescriptor>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d107      	bne.n	8007b34 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b2a:	893a      	ldrh	r2, [r7, #8]
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fb24 	bl	800817c <USBH_ParseStringDesc>
  }

  return status;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	607b      	str	r3, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	72fb      	strb	r3, [r7, #11]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	789b      	ldrb	r3, [r3, #2]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d11c      	bne.n	8007b92 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b58:	7afb      	ldrb	r3, [r7, #11]
 8007b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2206      	movs	r2, #6
 8007b68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	893a      	ldrh	r2, [r7, #8]
 8007b6e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b70:	893b      	ldrh	r3, [r7, #8]
 8007b72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b7a:	d104      	bne.n	8007b86 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f240 4209 	movw	r2, #1033	; 0x409
 8007b82:	829a      	strh	r2, [r3, #20]
 8007b84:	e002      	b.n	8007b8c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8b3a      	ldrh	r2, [r7, #24]
 8007b90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b92:	8b3b      	ldrh	r3, [r7, #24]
 8007b94:	461a      	mov	r2, r3
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fb3d 	bl	8008218 <USBH_CtlReq>
 8007b9e:	4603      	mov	r3, r0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	789b      	ldrb	r3, [r3, #2]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d10f      	bne.n	8007bdc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2205      	movs	r2, #5
 8007bc6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2100      	movs	r1, #0
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fb19 	bl	8008218 <USBH_CtlReq>
 8007be6:	4603      	mov	r3, r0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	789b      	ldrb	r3, [r3, #2]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d10e      	bne.n	8007c22 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2209      	movs	r2, #9
 8007c0e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	887a      	ldrh	r2, [r7, #2]
 8007c14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c22:	2200      	movs	r2, #0
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 faf6 	bl	8008218 <USBH_CtlReq>
 8007c2c:	4603      	mov	r3, r0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	789b      	ldrb	r3, [r3, #2]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d10f      	bne.n	8007c6a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2203      	movs	r2, #3
 8007c54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fad2 	bl	8008218 <USBH_CtlReq>
 8007c74:	4603      	mov	r3, r0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	789b      	ldrb	r3, [r3, #2]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d10f      	bne.n	8007cb2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 faae 	bl	8008218 <USBH_CtlReq>
 8007cbc:	4603      	mov	r3, r0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b085      	sub	sp, #20
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	781a      	ldrb	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	785a      	ldrb	r2, [r3, #1]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3302      	adds	r3, #2
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	3303      	adds	r3, #3
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	791a      	ldrb	r2, [r3, #4]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	795a      	ldrb	r2, [r3, #5]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	799a      	ldrb	r2, [r3, #6]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	79da      	ldrb	r2, [r3, #7]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	79db      	ldrb	r3, [r3, #7]
 8007d24:	2b20      	cmp	r3, #32
 8007d26:	dc11      	bgt.n	8007d4c <USBH_ParseDevDesc+0x86>
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	db16      	blt.n	8007d5a <USBH_ParseDevDesc+0x94>
 8007d2c:	3b08      	subs	r3, #8
 8007d2e:	2201      	movs	r2, #1
 8007d30:	fa02 f303 	lsl.w	r3, r2, r3
 8007d34:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bf14      	ite	ne
 8007d40:	2301      	movne	r3, #1
 8007d42:	2300      	moveq	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d102      	bne.n	8007d50 <USBH_ParseDevDesc+0x8a>
 8007d4a:	e006      	b.n	8007d5a <USBH_ParseDevDesc+0x94>
 8007d4c:	2b40      	cmp	r3, #64	; 0x40
 8007d4e:	d104      	bne.n	8007d5a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	79da      	ldrb	r2, [r3, #7]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	71da      	strb	r2, [r3, #7]
      break;
 8007d58:	e003      	b.n	8007d62 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2240      	movs	r2, #64	; 0x40
 8007d5e:	71da      	strb	r2, [r3, #7]
      break;
 8007d60:	bf00      	nop
  }

  if (length > 8U)
 8007d62:	88fb      	ldrh	r3, [r7, #6]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d939      	bls.n	8007ddc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	3309      	adds	r3, #9
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	330a      	adds	r3, #10
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	330b      	adds	r3, #11
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	021b      	lsls	r3, r3, #8
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	330c      	adds	r3, #12
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	330d      	adds	r3, #13
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	021b      	lsls	r3, r3, #8
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	4313      	orrs	r3, r2
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	7b9a      	ldrb	r2, [r3, #14]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	7bda      	ldrb	r2, [r3, #15]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	7c1a      	ldrb	r2, [r3, #16]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	7c5a      	ldrb	r2, [r3, #17]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	745a      	strb	r2, [r3, #17]
  }
}
 8007ddc:	bf00      	nop
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08c      	sub	sp, #48	; 0x30
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007dfc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	785a      	ldrb	r2, [r3, #1]
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	3303      	adds	r3, #3
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e44:	bf28      	it	cs
 8007e46:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	791a      	ldrb	r2, [r3, #4]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	795a      	ldrb	r2, [r3, #5]
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	799a      	ldrb	r2, [r3, #6]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	79da      	ldrb	r2, [r3, #7]
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	7a1a      	ldrb	r2, [r3, #8]
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b09      	cmp	r3, #9
 8007e7e:	d002      	beq.n	8007e86 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	2209      	movs	r2, #9
 8007e84:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	2b09      	cmp	r3, #9
 8007e8a:	f240 809d 	bls.w	8007fc8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e8e:	2309      	movs	r3, #9
 8007e90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e96:	e081      	b.n	8007f9c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e98:	f107 0316 	add.w	r3, r7, #22
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea0:	f000 f99f 	bl	80081e2 <USBH_GetNextDesc>
 8007ea4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d176      	bne.n	8007f9c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b09      	cmp	r3, #9
 8007eb4:	d002      	beq.n	8007ebc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	2209      	movs	r2, #9
 8007eba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ec0:	221a      	movs	r2, #26
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	6a3a      	ldr	r2, [r7, #32]
 8007eca:	4413      	add	r3, r2
 8007ecc:	3302      	adds	r3, #2
 8007ece:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ed2:	69f8      	ldr	r0, [r7, #28]
 8007ed4:	f000 f87e 	bl	8007fd4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ee2:	e043      	b.n	8007f6c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ee4:	f107 0316 	add.w	r3, r7, #22
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eec:	f000 f979 	bl	80081e2 <USBH_GetNextDesc>
 8007ef0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b05      	cmp	r3, #5
 8007ef8:	d138      	bne.n	8007f6c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	795b      	ldrb	r3, [r3, #5]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d10f      	bne.n	8007f22 <USBH_ParseCfgDesc+0x13a>
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	799b      	ldrb	r3, [r3, #6]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d10b      	bne.n	8007f22 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	79db      	ldrb	r3, [r3, #7]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10f      	bne.n	8007f32 <USBH_ParseCfgDesc+0x14a>
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d00b      	beq.n	8007f32 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	2209      	movs	r2, #9
 8007f1e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f20:	e007      	b.n	8007f32 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b07      	cmp	r3, #7
 8007f28:	d004      	beq.n	8007f34 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	2207      	movs	r2, #7
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e000      	b.n	8007f34 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f32:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f3c:	3201      	adds	r2, #1
 8007f3e:	00d2      	lsls	r2, r2, #3
 8007f40:	211a      	movs	r1, #26
 8007f42:	fb01 f303 	mul.w	r3, r1, r3
 8007f46:	4413      	add	r3, r2
 8007f48:	3308      	adds	r3, #8
 8007f4a:	6a3a      	ldr	r2, [r7, #32]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3304      	adds	r3, #4
 8007f50:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f54:	69b9      	ldr	r1, [r7, #24]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f86b 	bl	8008032 <USBH_ParseEPDesc>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007f62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f66:	3301      	adds	r3, #1
 8007f68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	791b      	ldrb	r3, [r3, #4]
 8007f70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d204      	bcs.n	8007f82 <USBH_ParseCfgDesc+0x19a>
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	885a      	ldrh	r2, [r3, #2]
 8007f7c:	8afb      	ldrh	r3, [r7, #22]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d8b0      	bhi.n	8007ee4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	791b      	ldrb	r3, [r3, #4]
 8007f86:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d201      	bcs.n	8007f92 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e01c      	b.n	8007fcc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f96:	3301      	adds	r3, #1
 8007f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d805      	bhi.n	8007fb0 <USBH_ParseCfgDesc+0x1c8>
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	885a      	ldrh	r2, [r3, #2]
 8007fa8:	8afb      	ldrh	r3, [r7, #22]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	f63f af74 	bhi.w	8007e98 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	791b      	ldrb	r3, [r3, #4]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	bf28      	it	cs
 8007fb8:	2302      	movcs	r3, #2
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d201      	bcs.n	8007fc8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e001      	b.n	8007fcc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3730      	adds	r7, #48	; 0x30
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781a      	ldrb	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	785a      	ldrb	r2, [r3, #1]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	789a      	ldrb	r2, [r3, #2]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	78da      	ldrb	r2, [r3, #3]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	791a      	ldrb	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	795a      	ldrb	r2, [r3, #5]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	799a      	ldrb	r2, [r3, #6]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	79da      	ldrb	r2, [r3, #7]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	7a1a      	ldrb	r2, [r3, #8]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	721a      	strb	r2, [r3, #8]
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008032:	b480      	push	{r7}
 8008034:	b087      	sub	sp, #28
 8008036:	af00      	add	r7, sp, #0
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	781a      	ldrb	r2, [r3, #0]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	785a      	ldrb	r2, [r3, #1]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	789a      	ldrb	r2, [r3, #2]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	78da      	ldrb	r2, [r3, #3]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3304      	adds	r3, #4
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	b29a      	uxth	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3305      	adds	r3, #5
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	b29b      	uxth	r3, r3
 8008076:	4313      	orrs	r3, r2
 8008078:	b29a      	uxth	r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	799a      	ldrb	r2, [r3, #6]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	889b      	ldrh	r3, [r3, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d102      	bne.n	8008094 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800808e:	2303      	movs	r3, #3
 8008090:	75fb      	strb	r3, [r7, #23]
 8008092:	e033      	b.n	80080fc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	889b      	ldrh	r3, [r3, #4]
 8008098:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800809c:	f023 0307 	bic.w	r3, r3, #7
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	889b      	ldrh	r3, [r3, #4]
 80080aa:	b21a      	sxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3304      	adds	r3, #4
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	b299      	uxth	r1, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3305      	adds	r3, #5
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	021b      	lsls	r3, r3, #8
 80080be:	b29b      	uxth	r3, r3
 80080c0:	430b      	orrs	r3, r1
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d110      	bne.n	80080ee <USBH_ParseEPDesc+0xbc>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3304      	adds	r3, #4
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	b299      	uxth	r1, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3305      	adds	r3, #5
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	b29b      	uxth	r3, r3
 80080e0:	430b      	orrs	r3, r1
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	b21b      	sxth	r3, r3
 80080e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080ea:	b21b      	sxth	r3, r3
 80080ec:	e001      	b.n	80080f2 <USBH_ParseEPDesc+0xc0>
 80080ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080f2:	4313      	orrs	r3, r2
 80080f4:	b21b      	sxth	r3, r3
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008102:	2b00      	cmp	r3, #0
 8008104:	d116      	bne.n	8008134 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	78db      	ldrb	r3, [r3, #3]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b01      	cmp	r3, #1
 8008110:	d005      	beq.n	800811e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	78db      	ldrb	r3, [r3, #3]
 8008116:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800811a:	2b03      	cmp	r3, #3
 800811c:	d127      	bne.n	800816e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	799b      	ldrb	r3, [r3, #6]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <USBH_ParseEPDesc+0xfc>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	799b      	ldrb	r3, [r3, #6]
 800812a:	2b10      	cmp	r3, #16
 800812c:	d91f      	bls.n	800816e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800812e:	2303      	movs	r3, #3
 8008130:	75fb      	strb	r3, [r7, #23]
 8008132:	e01c      	b.n	800816e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	78db      	ldrb	r3, [r3, #3]
 8008138:	f003 0303 	and.w	r3, r3, #3
 800813c:	2b01      	cmp	r3, #1
 800813e:	d10a      	bne.n	8008156 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	799b      	ldrb	r3, [r3, #6]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <USBH_ParseEPDesc+0x11e>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	799b      	ldrb	r3, [r3, #6]
 800814c:	2b10      	cmp	r3, #16
 800814e:	d90e      	bls.n	800816e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008150:	2303      	movs	r3, #3
 8008152:	75fb      	strb	r3, [r7, #23]
 8008154:	e00b      	b.n	800816e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	78db      	ldrb	r3, [r3, #3]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d105      	bne.n	800816e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	799b      	ldrb	r3, [r3, #6]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800816a:	2303      	movs	r3, #3
 800816c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800816e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008170:	4618      	mov	r0, r3
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b03      	cmp	r3, #3
 8008192:	d120      	bne.n	80081d6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	1e9a      	subs	r2, r3, #2
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	4293      	cmp	r3, r2
 800819e:	bf28      	it	cs
 80081a0:	4613      	movcs	r3, r2
 80081a2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3302      	adds	r3, #2
 80081a8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80081aa:	2300      	movs	r3, #0
 80081ac:	82fb      	strh	r3, [r7, #22]
 80081ae:	e00b      	b.n	80081c8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80081b0:	8afb      	ldrh	r3, [r7, #22]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4413      	add	r3, r2
 80081b6:	781a      	ldrb	r2, [r3, #0]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	701a      	strb	r2, [r3, #0]
      pdest++;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	3301      	adds	r3, #1
 80081c0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80081c2:	8afb      	ldrh	r3, [r7, #22]
 80081c4:	3302      	adds	r3, #2
 80081c6:	82fb      	strh	r3, [r7, #22]
 80081c8:	8afa      	ldrh	r2, [r7, #22]
 80081ca:	8abb      	ldrh	r3, [r7, #20]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d3ef      	bcc.n	80081b0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
  }
}
 80081d6:	bf00      	nop
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	881a      	ldrh	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4413      	add	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800820a:	68fb      	ldr	r3, [r7, #12]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008226:	2301      	movs	r3, #1
 8008228:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	789b      	ldrb	r3, [r3, #2]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d002      	beq.n	8008238 <USBH_CtlReq+0x20>
 8008232:	2b02      	cmp	r3, #2
 8008234:	d00f      	beq.n	8008256 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008236:	e027      	b.n	8008288 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	88fa      	ldrh	r2, [r7, #6]
 8008242:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2202      	movs	r2, #2
 800824e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008250:	2301      	movs	r3, #1
 8008252:	75fb      	strb	r3, [r7, #23]
      break;
 8008254:	e018      	b.n	8008288 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f81c 	bl	8008294 <USBH_HandleControl>
 800825c:	4603      	mov	r3, r0
 800825e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d002      	beq.n	800826c <USBH_CtlReq+0x54>
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	2b03      	cmp	r3, #3
 800826a:	d106      	bne.n	800827a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2201      	movs	r2, #1
 8008270:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	761a      	strb	r2, [r3, #24]
      break;
 8008278:	e005      	b.n	8008286 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	2b02      	cmp	r3, #2
 800827e:	d102      	bne.n	8008286 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2201      	movs	r2, #1
 8008284:	709a      	strb	r2, [r3, #2]
      break;
 8008286:	bf00      	nop
  }
  return status;
 8008288:	7dfb      	ldrb	r3, [r7, #23]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af02      	add	r7, sp, #8
 800829a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082a0:	2300      	movs	r3, #0
 80082a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7e1b      	ldrb	r3, [r3, #24]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	2b0a      	cmp	r3, #10
 80082ac:	f200 8156 	bhi.w	800855c <USBH_HandleControl+0x2c8>
 80082b0:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <USBH_HandleControl+0x24>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	080082ff 	.word	0x080082ff
 80082c0:	08008369 	.word	0x08008369
 80082c4:	0800838f 	.word	0x0800838f
 80082c8:	080083c7 	.word	0x080083c7
 80082cc:	080083f1 	.word	0x080083f1
 80082d0:	08008443 	.word	0x08008443
 80082d4:	08008465 	.word	0x08008465
 80082d8:	080084a1 	.word	0x080084a1
 80082dc:	080084c7 	.word	0x080084c7
 80082e0:	08008505 	.word	0x08008505
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f103 0110 	add.w	r1, r3, #16
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	795b      	ldrb	r3, [r3, #5]
 80082ee:	461a      	mov	r2, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f943 	bl	800857c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2202      	movs	r2, #2
 80082fa:	761a      	strb	r2, [r3, #24]
      break;
 80082fc:	e139      	b.n	8008572 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	795b      	ldrb	r3, [r3, #5]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fcc5 	bl	8008c94 <USBH_LL_GetURBState>
 800830a:	4603      	mov	r3, r0
 800830c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d11e      	bne.n	8008352 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7c1b      	ldrb	r3, [r3, #16]
 8008318:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800831c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	8adb      	ldrh	r3, [r3, #22]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008326:	7b7b      	ldrb	r3, [r7, #13]
 8008328:	2b80      	cmp	r3, #128	; 0x80
 800832a:	d103      	bne.n	8008334 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2203      	movs	r2, #3
 8008330:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008332:	e115      	b.n	8008560 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2205      	movs	r2, #5
 8008338:	761a      	strb	r2, [r3, #24]
      break;
 800833a:	e111      	b.n	8008560 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800833c:	7b7b      	ldrb	r3, [r7, #13]
 800833e:	2b80      	cmp	r3, #128	; 0x80
 8008340:	d103      	bne.n	800834a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2209      	movs	r2, #9
 8008346:	761a      	strb	r2, [r3, #24]
      break;
 8008348:	e10a      	b.n	8008560 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2207      	movs	r2, #7
 800834e:	761a      	strb	r2, [r3, #24]
      break;
 8008350:	e106      	b.n	8008560 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	2b04      	cmp	r3, #4
 8008356:	d003      	beq.n	8008360 <USBH_HandleControl+0xcc>
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b02      	cmp	r3, #2
 800835c:	f040 8100 	bne.w	8008560 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	220b      	movs	r2, #11
 8008364:	761a      	strb	r2, [r3, #24]
      break;
 8008366:	e0fb      	b.n	8008560 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6899      	ldr	r1, [r3, #8]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	899a      	ldrh	r2, [r3, #12]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	791b      	ldrb	r3, [r3, #4]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f93a 	bl	80085fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2204      	movs	r2, #4
 800838a:	761a      	strb	r2, [r3, #24]
      break;
 800838c:	e0f1      	b.n	8008572 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	791b      	ldrb	r3, [r3, #4]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fc7d 	bl	8008c94 <USBH_LL_GetURBState>
 800839a:	4603      	mov	r3, r0
 800839c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d102      	bne.n	80083aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2209      	movs	r2, #9
 80083a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b05      	cmp	r3, #5
 80083ae:	d102      	bne.n	80083b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083b0:	2303      	movs	r3, #3
 80083b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083b4:	e0d6      	b.n	8008564 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	f040 80d3 	bne.w	8008564 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	220b      	movs	r2, #11
 80083c2:	761a      	strb	r2, [r3, #24]
      break;
 80083c4:	e0ce      	b.n	8008564 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6899      	ldr	r1, [r3, #8]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	899a      	ldrh	r2, [r3, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	795b      	ldrb	r3, [r3, #5]
 80083d2:	2001      	movs	r0, #1
 80083d4:	9000      	str	r0, [sp, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f8ea 	bl	80085b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2206      	movs	r2, #6
 80083ec:	761a      	strb	r2, [r3, #24]
      break;
 80083ee:	e0c0      	b.n	8008572 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	795b      	ldrb	r3, [r3, #5]
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fc4c 	bl	8008c94 <USBH_LL_GetURBState>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d103      	bne.n	800840e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2207      	movs	r2, #7
 800840a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800840c:	e0ac      	b.n	8008568 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b05      	cmp	r3, #5
 8008412:	d105      	bne.n	8008420 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	220c      	movs	r2, #12
 8008418:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800841a:	2303      	movs	r3, #3
 800841c:	73fb      	strb	r3, [r7, #15]
      break;
 800841e:	e0a3      	b.n	8008568 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d103      	bne.n	800842e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2205      	movs	r2, #5
 800842a:	761a      	strb	r2, [r3, #24]
      break;
 800842c:	e09c      	b.n	8008568 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b04      	cmp	r3, #4
 8008432:	f040 8099 	bne.w	8008568 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	220b      	movs	r2, #11
 800843a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800843c:	2302      	movs	r3, #2
 800843e:	73fb      	strb	r3, [r7, #15]
      break;
 8008440:	e092      	b.n	8008568 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	791b      	ldrb	r3, [r3, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f8d5 	bl	80085fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008456:	b29a      	uxth	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2208      	movs	r2, #8
 8008460:	761a      	strb	r2, [r3, #24]

      break;
 8008462:	e086      	b.n	8008572 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	791b      	ldrb	r3, [r3, #4]
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc12 	bl	8008c94 <USBH_LL_GetURBState>
 8008470:	4603      	mov	r3, r0
 8008472:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d105      	bne.n	8008486 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	220d      	movs	r2, #13
 800847e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008484:	e072      	b.n	800856c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b04      	cmp	r3, #4
 800848a:	d103      	bne.n	8008494 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	220b      	movs	r2, #11
 8008490:	761a      	strb	r2, [r3, #24]
      break;
 8008492:	e06b      	b.n	800856c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	2b05      	cmp	r3, #5
 8008498:	d168      	bne.n	800856c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800849a:	2303      	movs	r3, #3
 800849c:	73fb      	strb	r3, [r7, #15]
      break;
 800849e:	e065      	b.n	800856c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	795b      	ldrb	r3, [r3, #5]
 80084a4:	2201      	movs	r2, #1
 80084a6:	9200      	str	r2, [sp, #0]
 80084a8:	2200      	movs	r2, #0
 80084aa:	2100      	movs	r1, #0
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f87f 	bl	80085b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	220a      	movs	r2, #10
 80084c2:	761a      	strb	r2, [r3, #24]
      break;
 80084c4:	e055      	b.n	8008572 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	795b      	ldrb	r3, [r3, #5]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fbe1 	bl	8008c94 <USBH_LL_GetURBState>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d105      	bne.n	80084e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	220d      	movs	r2, #13
 80084e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084e6:	e043      	b.n	8008570 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d103      	bne.n	80084f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2209      	movs	r2, #9
 80084f2:	761a      	strb	r2, [r3, #24]
      break;
 80084f4:	e03c      	b.n	8008570 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d139      	bne.n	8008570 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	220b      	movs	r2, #11
 8008500:	761a      	strb	r2, [r3, #24]
      break;
 8008502:	e035      	b.n	8008570 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	7e5b      	ldrb	r3, [r3, #25]
 8008508:	3301      	adds	r3, #1
 800850a:	b2da      	uxtb	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	765a      	strb	r2, [r3, #25]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	7e5b      	ldrb	r3, [r3, #25]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d806      	bhi.n	8008526 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008524:	e025      	b.n	8008572 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800852c:	2106      	movs	r1, #6
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	795b      	ldrb	r3, [r3, #5]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f90c 	bl	800875c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	791b      	ldrb	r3, [r3, #4]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f906 	bl	800875c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008556:	2302      	movs	r3, #2
 8008558:	73fb      	strb	r3, [r7, #15]
      break;
 800855a:	e00a      	b.n	8008572 <USBH_HandleControl+0x2de>

    default:
      break;
 800855c:	bf00      	nop
 800855e:	e008      	b.n	8008572 <USBH_HandleControl+0x2de>
      break;
 8008560:	bf00      	nop
 8008562:	e006      	b.n	8008572 <USBH_HandleControl+0x2de>
      break;
 8008564:	bf00      	nop
 8008566:	e004      	b.n	8008572 <USBH_HandleControl+0x2de>
      break;
 8008568:	bf00      	nop
 800856a:	e002      	b.n	8008572 <USBH_HandleControl+0x2de>
      break;
 800856c:	bf00      	nop
 800856e:	e000      	b.n	8008572 <USBH_HandleControl+0x2de>
      break;
 8008570:	bf00      	nop
  }

  return status;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af04      	add	r7, sp, #16
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800858a:	79f9      	ldrb	r1, [r7, #7]
 800858c:	2300      	movs	r3, #0
 800858e:	9303      	str	r3, [sp, #12]
 8008590:	2308      	movs	r3, #8
 8008592:	9302      	str	r3, [sp, #8]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	2300      	movs	r3, #0
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	2300      	movs	r3, #0
 800859e:	2200      	movs	r2, #0
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 fb46 	bl	8008c32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af04      	add	r7, sp, #16
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4611      	mov	r1, r2
 80085bc:	461a      	mov	r2, r3
 80085be:	460b      	mov	r3, r1
 80085c0:	80fb      	strh	r3, [r7, #6]
 80085c2:	4613      	mov	r3, r2
 80085c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085d4:	7979      	ldrb	r1, [r7, #5]
 80085d6:	7e3b      	ldrb	r3, [r7, #24]
 80085d8:	9303      	str	r3, [sp, #12]
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	9302      	str	r3, [sp, #8]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	2301      	movs	r3, #1
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	2200      	movs	r2, #0
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 fb21 	bl	8008c32 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b088      	sub	sp, #32
 80085fe:	af04      	add	r7, sp, #16
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	4611      	mov	r1, r2
 8008606:	461a      	mov	r2, r3
 8008608:	460b      	mov	r3, r1
 800860a:	80fb      	strh	r3, [r7, #6]
 800860c:	4613      	mov	r3, r2
 800860e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008610:	7979      	ldrb	r1, [r7, #5]
 8008612:	2300      	movs	r3, #0
 8008614:	9303      	str	r3, [sp, #12]
 8008616:	88fb      	ldrh	r3, [r7, #6]
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	2301      	movs	r3, #1
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	2300      	movs	r3, #0
 8008624:	2201      	movs	r2, #1
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 fb03 	bl	8008c32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800862c:	2300      	movs	r3, #0

}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b088      	sub	sp, #32
 800863a:	af04      	add	r7, sp, #16
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	4611      	mov	r1, r2
 8008642:	461a      	mov	r2, r3
 8008644:	460b      	mov	r3, r1
 8008646:	80fb      	strh	r3, [r7, #6]
 8008648:	4613      	mov	r3, r2
 800864a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800865a:	7979      	ldrb	r1, [r7, #5]
 800865c:	7e3b      	ldrb	r3, [r7, #24]
 800865e:	9303      	str	r3, [sp, #12]
 8008660:	88fb      	ldrh	r3, [r7, #6]
 8008662:	9302      	str	r3, [sp, #8]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	2301      	movs	r3, #1
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	2302      	movs	r3, #2
 800866e:	2200      	movs	r2, #0
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 fade 	bl	8008c32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af04      	add	r7, sp, #16
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4611      	mov	r1, r2
 800868c:	461a      	mov	r2, r3
 800868e:	460b      	mov	r3, r1
 8008690:	80fb      	strh	r3, [r7, #6]
 8008692:	4613      	mov	r3, r2
 8008694:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008696:	7979      	ldrb	r1, [r7, #5]
 8008698:	2300      	movs	r3, #0
 800869a:	9303      	str	r3, [sp, #12]
 800869c:	88fb      	ldrh	r3, [r7, #6]
 800869e:	9302      	str	r3, [sp, #8]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	2301      	movs	r3, #1
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	2302      	movs	r3, #2
 80086aa:	2201      	movs	r2, #1
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 fac0 	bl	8008c32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af04      	add	r7, sp, #16
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	4608      	mov	r0, r1
 80086c6:	4611      	mov	r1, r2
 80086c8:	461a      	mov	r2, r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	70fb      	strb	r3, [r7, #3]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70bb      	strb	r3, [r7, #2]
 80086d2:	4613      	mov	r3, r2
 80086d4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80086d6:	7878      	ldrb	r0, [r7, #1]
 80086d8:	78ba      	ldrb	r2, [r7, #2]
 80086da:	78f9      	ldrb	r1, [r7, #3]
 80086dc:	8b3b      	ldrh	r3, [r7, #24]
 80086de:	9302      	str	r3, [sp, #8]
 80086e0:	7d3b      	ldrb	r3, [r7, #20]
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	7c3b      	ldrb	r3, [r7, #16]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	4603      	mov	r3, r0
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa53 	bl	8008b96 <USBH_LL_OpenPipe>

  return USBH_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fa72 	bl	8008bf4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f836 	bl	8008798 <USBH_GetFreePipe>
 800872c:	4603      	mov	r3, r0
 800872e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008730:	89fb      	ldrh	r3, [r7, #14]
 8008732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008736:	4293      	cmp	r3, r2
 8008738:	d00a      	beq.n	8008750 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	89fb      	ldrh	r3, [r7, #14]
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	33e0      	adds	r3, #224	; 0xe0
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	440b      	add	r3, r1
 800874e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008750:	89fb      	ldrh	r3, [r7, #14]
 8008752:	b2db      	uxtb	r3, r3
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	2b0f      	cmp	r3, #15
 800876c:	d80d      	bhi.n	800878a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	33e0      	adds	r3, #224	; 0xe0
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	33e0      	adds	r3, #224	; 0xe0
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
 80087a8:	e00f      	b.n	80087ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	33e0      	adds	r3, #224	; 0xe0
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	e007      	b.n	80087d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	3301      	adds	r3, #1
 80087c8:	73fb      	strb	r3, [r7, #15]
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	2b0f      	cmp	r3, #15
 80087ce:	d9ec      	bls.n	80087aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80087e4:	2201      	movs	r2, #1
 80087e6:	490e      	ldr	r1, [pc, #56]	; (8008820 <MX_USB_HOST_Init+0x40>)
 80087e8:	480e      	ldr	r0, [pc, #56]	; (8008824 <MX_USB_HOST_Init+0x44>)
 80087ea:	f7fe fba7 	bl	8006f3c <USBH_Init>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80087f4:	f7f8 f968 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80087f8:	490b      	ldr	r1, [pc, #44]	; (8008828 <MX_USB_HOST_Init+0x48>)
 80087fa:	480a      	ldr	r0, [pc, #40]	; (8008824 <MX_USB_HOST_Init+0x44>)
 80087fc:	f7fe fc2c 	bl	8007058 <USBH_RegisterClass>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008806:	f7f8 f95f 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800880a:	4806      	ldr	r0, [pc, #24]	; (8008824 <MX_USB_HOST_Init+0x44>)
 800880c:	f7fe fcb0 	bl	8007170 <USBH_Start>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008816:	f7f8 f957 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800881a:	bf00      	nop
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	08008841 	.word	0x08008841
 8008824:	2000023c 	.word	0x2000023c
 8008828:	2000000c 	.word	0x2000000c

0800882c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008830:	4802      	ldr	r0, [pc, #8]	; (800883c <MX_USB_HOST_Process+0x10>)
 8008832:	f7fe fcad 	bl	8007190 <USBH_Process>
}
 8008836:	bf00      	nop
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	2000023c 	.word	0x2000023c

08008840 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800884c:	78fb      	ldrb	r3, [r7, #3]
 800884e:	3b01      	subs	r3, #1
 8008850:	2b04      	cmp	r3, #4
 8008852:	d819      	bhi.n	8008888 <USBH_UserProcess+0x48>
 8008854:	a201      	add	r2, pc, #4	; (adr r2, 800885c <USBH_UserProcess+0x1c>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	08008889 	.word	0x08008889
 8008860:	08008879 	.word	0x08008879
 8008864:	08008889 	.word	0x08008889
 8008868:	08008881 	.word	0x08008881
 800886c:	08008871 	.word	0x08008871
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008870:	4b09      	ldr	r3, [pc, #36]	; (8008898 <USBH_UserProcess+0x58>)
 8008872:	2203      	movs	r2, #3
 8008874:	701a      	strb	r2, [r3, #0]
  break;
 8008876:	e008      	b.n	800888a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008878:	4b07      	ldr	r3, [pc, #28]	; (8008898 <USBH_UserProcess+0x58>)
 800887a:	2202      	movs	r2, #2
 800887c:	701a      	strb	r2, [r3, #0]
  break;
 800887e:	e004      	b.n	800888a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008880:	4b05      	ldr	r3, [pc, #20]	; (8008898 <USBH_UserProcess+0x58>)
 8008882:	2201      	movs	r2, #1
 8008884:	701a      	strb	r2, [r3, #0]
  break;
 8008886:	e000      	b.n	800888a <USBH_UserProcess+0x4a>

  default:
  break;
 8008888:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800888a:	bf00      	nop
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	20000614 	.word	0x20000614

0800889c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	; 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a4:	f107 0314 	add.w	r3, r7, #20
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	605a      	str	r2, [r3, #4]
 80088ae:	609a      	str	r2, [r3, #8]
 80088b0:	60da      	str	r2, [r3, #12]
 80088b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088bc:	d147      	bne.n	800894e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	4b25      	ldr	r3, [pc, #148]	; (8008958 <HAL_HCD_MspInit+0xbc>)
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	4a24      	ldr	r2, [pc, #144]	; (8008958 <HAL_HCD_MspInit+0xbc>)
 80088c8:	f043 0301 	orr.w	r3, r3, #1
 80088cc:	6313      	str	r3, [r2, #48]	; 0x30
 80088ce:	4b22      	ldr	r3, [pc, #136]	; (8008958 <HAL_HCD_MspInit+0xbc>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088e8:	f107 0314 	add.w	r3, r7, #20
 80088ec:	4619      	mov	r1, r3
 80088ee:	481b      	ldr	r0, [pc, #108]	; (800895c <HAL_HCD_MspInit+0xc0>)
 80088f0:	f7f8 fd44 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80088f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088fa:	2302      	movs	r3, #2
 80088fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008902:	2300      	movs	r3, #0
 8008904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008906:	230a      	movs	r3, #10
 8008908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800890a:	f107 0314 	add.w	r3, r7, #20
 800890e:	4619      	mov	r1, r3
 8008910:	4812      	ldr	r0, [pc, #72]	; (800895c <HAL_HCD_MspInit+0xc0>)
 8008912:	f7f8 fd33 	bl	800137c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008916:	4b10      	ldr	r3, [pc, #64]	; (8008958 <HAL_HCD_MspInit+0xbc>)
 8008918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891a:	4a0f      	ldr	r2, [pc, #60]	; (8008958 <HAL_HCD_MspInit+0xbc>)
 800891c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008920:	6353      	str	r3, [r2, #52]	; 0x34
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <HAL_HCD_MspInit+0xbc>)
 8008928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892a:	4a0b      	ldr	r2, [pc, #44]	; (8008958 <HAL_HCD_MspInit+0xbc>)
 800892c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008930:	6453      	str	r3, [r2, #68]	; 0x44
 8008932:	4b09      	ldr	r3, [pc, #36]	; (8008958 <HAL_HCD_MspInit+0xbc>)
 8008934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800893e:	2200      	movs	r2, #0
 8008940:	2100      	movs	r1, #0
 8008942:	2043      	movs	r0, #67	; 0x43
 8008944:	f7f8 fce3 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008948:	2043      	movs	r0, #67	; 0x43
 800894a:	f7f8 fcfc 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800894e:	bf00      	nop
 8008950:	3728      	adds	r7, #40	; 0x28
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40023800 	.word	0x40023800
 800895c:	40020000 	.word	0x40020000

08008960 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe ffed 	bl	800794e <USBH_LL_IncTimer>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff f825 	bl	80079da <USBH_LL_Connect>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff f82e 	bl	8007a08 <USBH_LL_Disconnect>
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
 80089c0:	4613      	mov	r3, r2
 80089c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe ffdf 	bl	80079a2 <USBH_LL_PortEnabled>
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe ffdf 	bl	80079be <USBH_LL_PortDisabled>
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d12a      	bne.n	8008a70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a1a:	4a18      	ldr	r2, [pc, #96]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a15      	ldr	r2, [pc, #84]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a2a:	4b14      	ldr	r3, [pc, #80]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a34:	2208      	movs	r2, #8
 8008a36:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a38:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a44:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a46:	2202      	movs	r2, #2
 8008a48:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a4a:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a50:	480a      	ldr	r0, [pc, #40]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a52:	f7f8 fe7b 	bl	800174c <HAL_HCD_Init>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a5c:	f7f8 f834 	bl	8000ac8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a60:	4806      	ldr	r0, [pc, #24]	; (8008a7c <USBH_LL_Init+0x74>)
 8008a62:	f7f9 fa5e 	bl	8001f22 <HAL_HCD_GetCurrentFrame>
 8008a66:	4603      	mov	r3, r0
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7fe ff60 	bl	8007930 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000618 	.word	0x20000618

08008a80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f9 f9cd 	bl	8001e36 <HAL_HCD_Start>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 f95c 	bl	8008d60 <USBH_Get_USB_Status>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7f9 f9d5 	bl	8001e7c <HAL_HCD_Stop>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 f941 	bl	8008d60 <USBH_Get_USB_Status>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008af4:	2301      	movs	r3, #1
 8008af6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7f9 fa1d 	bl	8001f3e <HAL_HCD_GetCurrentSpeed>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d00c      	beq.n	8008b24 <USBH_LL_GetSpeed+0x38>
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d80d      	bhi.n	8008b2a <USBH_LL_GetSpeed+0x3e>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <USBH_LL_GetSpeed+0x2c>
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d003      	beq.n	8008b1e <USBH_LL_GetSpeed+0x32>
 8008b16:	e008      	b.n	8008b2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1c:	e008      	b.n	8008b30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	73fb      	strb	r3, [r7, #15]
    break;
 8008b22:	e005      	b.n	8008b30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b24:	2302      	movs	r3, #2
 8008b26:	73fb      	strb	r3, [r7, #15]
    break;
 8008b28:	e002      	b.n	8008b30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2e:	bf00      	nop
  }
  return  speed;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7f9 f9b0 	bl	8001eb6 <HAL_HCD_ResetPort>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 f8ff 	bl	8008d60 <USBH_Get_USB_Status>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7f9 f9b7 	bl	8001efa <HAL_HCD_HC_GetXferCount>
 8008b8c:	4603      	mov	r3, r0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b96:	b590      	push	{r4, r7, lr}
 8008b98:	b089      	sub	sp, #36	; 0x24
 8008b9a:	af04      	add	r7, sp, #16
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	4608      	mov	r0, r1
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	70fb      	strb	r3, [r7, #3]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70bb      	strb	r3, [r7, #2]
 8008bac:	4613      	mov	r3, r2
 8008bae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bbe:	787c      	ldrb	r4, [r7, #1]
 8008bc0:	78ba      	ldrb	r2, [r7, #2]
 8008bc2:	78f9      	ldrb	r1, [r7, #3]
 8008bc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bc6:	9302      	str	r3, [sp, #8]
 8008bc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	f7f8 fe1b 	bl	8001810 <HAL_HCD_HC_Init>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f8bd 	bl	8008d60 <USBH_Get_USB_Status>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}

08008bf4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f8 fe8b 	bl	800192e <HAL_HCD_HC_Halt>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f89e 	bl	8008d60 <USBH_Get_USB_Status>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c32:	b590      	push	{r4, r7, lr}
 8008c34:	b089      	sub	sp, #36	; 0x24
 8008c36:	af04      	add	r7, sp, #16
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	461a      	mov	r2, r3
 8008c40:	4603      	mov	r3, r0
 8008c42:	70fb      	strb	r3, [r7, #3]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70bb      	strb	r3, [r7, #2]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c5a:	787c      	ldrb	r4, [r7, #1]
 8008c5c:	78ba      	ldrb	r2, [r7, #2]
 8008c5e:	78f9      	ldrb	r1, [r7, #3]
 8008c60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c68:	9302      	str	r3, [sp, #8]
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	4623      	mov	r3, r4
 8008c76:	f7f8 fe7d 	bl	8001974 <HAL_HCD_HC_SubmitRequest>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f86d 	bl	8008d60 <USBH_Get_USB_Status>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd90      	pop	{r4, r7, pc}

08008c94 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ca6:	78fa      	ldrb	r2, [r7, #3]
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7f9 f911 	bl	8001ed2 <HAL_HCD_HC_GetURBState>
 8008cb0:	4603      	mov	r3, r0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d103      	bne.n	8008cd8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f870 	bl	8008db8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008cd8:	20c8      	movs	r0, #200	; 0xc8
 8008cda:	f7f8 fa19 	bl	8001110 <HAL_Delay>
  return USBH_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cfe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	212c      	movs	r1, #44	; 0x2c
 8008d06:	fb01 f303 	mul.w	r3, r1, r3
 8008d0a:	4413      	add	r3, r2
 8008d0c:	333b      	adds	r3, #59	; 0x3b
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	212c      	movs	r1, #44	; 0x2c
 8008d1a:	fb01 f303 	mul.w	r3, r1, r3
 8008d1e:	4413      	add	r3, r2
 8008d20:	3354      	adds	r3, #84	; 0x54
 8008d22:	78ba      	ldrb	r2, [r7, #2]
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	e008      	b.n	8008d3a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	212c      	movs	r1, #44	; 0x2c
 8008d2e:	fb01 f303 	mul.w	r3, r1, r3
 8008d32:	4413      	add	r3, r2
 8008d34:	3355      	adds	r3, #85	; 0x55
 8008d36:	78ba      	ldrb	r2, [r7, #2]
 8008d38:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7f8 f9dd 	bl	8001110 <HAL_Delay>
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d817      	bhi.n	8008da4 <USBH_Get_USB_Status+0x44>
 8008d74:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <USBH_Get_USB_Status+0x1c>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008d8d 	.word	0x08008d8d
 8008d80:	08008d93 	.word	0x08008d93
 8008d84:	08008d99 	.word	0x08008d99
 8008d88:	08008d9f 	.word	0x08008d9f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d90:	e00b      	b.n	8008daa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d92:	2302      	movs	r3, #2
 8008d94:	73fb      	strb	r3, [r7, #15]
    break;
 8008d96:	e008      	b.n	8008daa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9c:	e005      	b.n	8008daa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	73fb      	strb	r3, [r7, #15]
    break;
 8008da2:	e002      	b.n	8008daa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008da4:	2302      	movs	r3, #2
 8008da6:	73fb      	strb	r3, [r7, #15]
    break;
 8008da8:	bf00      	nop
  }
  return usb_status;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
 8008dd0:	e001      	b.n	8008dd6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	2101      	movs	r1, #1
 8008ddc:	4803      	ldr	r0, [pc, #12]	; (8008dec <MX_DriverVbusFS+0x34>)
 8008dde:	f7f8 fc69 	bl	80016b4 <HAL_GPIO_WritePin>
}
 8008de2:	bf00      	nop
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	40020800 	.word	0x40020800

08008df0 <__errno>:
 8008df0:	4b01      	ldr	r3, [pc, #4]	; (8008df8 <__errno+0x8>)
 8008df2:	6818      	ldr	r0, [r3, #0]
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	2000002c 	.word	0x2000002c

08008dfc <__libc_init_array>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	4d0d      	ldr	r5, [pc, #52]	; (8008e34 <__libc_init_array+0x38>)
 8008e00:	4c0d      	ldr	r4, [pc, #52]	; (8008e38 <__libc_init_array+0x3c>)
 8008e02:	1b64      	subs	r4, r4, r5
 8008e04:	10a4      	asrs	r4, r4, #2
 8008e06:	2600      	movs	r6, #0
 8008e08:	42a6      	cmp	r6, r4
 8008e0a:	d109      	bne.n	8008e20 <__libc_init_array+0x24>
 8008e0c:	4d0b      	ldr	r5, [pc, #44]	; (8008e3c <__libc_init_array+0x40>)
 8008e0e:	4c0c      	ldr	r4, [pc, #48]	; (8008e40 <__libc_init_array+0x44>)
 8008e10:	f000 f92e 	bl	8009070 <_init>
 8008e14:	1b64      	subs	r4, r4, r5
 8008e16:	10a4      	asrs	r4, r4, #2
 8008e18:	2600      	movs	r6, #0
 8008e1a:	42a6      	cmp	r6, r4
 8008e1c:	d105      	bne.n	8008e2a <__libc_init_array+0x2e>
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e24:	4798      	blx	r3
 8008e26:	3601      	adds	r6, #1
 8008e28:	e7ee      	b.n	8008e08 <__libc_init_array+0xc>
 8008e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2e:	4798      	blx	r3
 8008e30:	3601      	adds	r6, #1
 8008e32:	e7f2      	b.n	8008e1a <__libc_init_array+0x1e>
 8008e34:	080090ac 	.word	0x080090ac
 8008e38:	080090ac 	.word	0x080090ac
 8008e3c:	080090ac 	.word	0x080090ac
 8008e40:	080090b0 	.word	0x080090b0

08008e44 <malloc>:
 8008e44:	4b02      	ldr	r3, [pc, #8]	; (8008e50 <malloc+0xc>)
 8008e46:	4601      	mov	r1, r0
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	f000 b87f 	b.w	8008f4c <_malloc_r>
 8008e4e:	bf00      	nop
 8008e50:	2000002c 	.word	0x2000002c

08008e54 <free>:
 8008e54:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <free+0xc>)
 8008e56:	4601      	mov	r1, r0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f000 b80b 	b.w	8008e74 <_free_r>
 8008e5e:	bf00      	nop
 8008e60:	2000002c 	.word	0x2000002c

08008e64 <memset>:
 8008e64:	4402      	add	r2, r0
 8008e66:	4603      	mov	r3, r0
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d100      	bne.n	8008e6e <memset+0xa>
 8008e6c:	4770      	bx	lr
 8008e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e72:	e7f9      	b.n	8008e68 <memset+0x4>

08008e74 <_free_r>:
 8008e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d044      	beq.n	8008f04 <_free_r+0x90>
 8008e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7e:	9001      	str	r0, [sp, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f1a1 0404 	sub.w	r4, r1, #4
 8008e86:	bfb8      	it	lt
 8008e88:	18e4      	addlt	r4, r4, r3
 8008e8a:	f000 f8e3 	bl	8009054 <__malloc_lock>
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <_free_r+0x94>)
 8008e90:	9801      	ldr	r0, [sp, #4]
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	b933      	cbnz	r3, 8008ea4 <_free_r+0x30>
 8008e96:	6063      	str	r3, [r4, #4]
 8008e98:	6014      	str	r4, [r2, #0]
 8008e9a:	b003      	add	sp, #12
 8008e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea0:	f000 b8de 	b.w	8009060 <__malloc_unlock>
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d908      	bls.n	8008eba <_free_r+0x46>
 8008ea8:	6825      	ldr	r5, [r4, #0]
 8008eaa:	1961      	adds	r1, r4, r5
 8008eac:	428b      	cmp	r3, r1
 8008eae:	bf01      	itttt	eq
 8008eb0:	6819      	ldreq	r1, [r3, #0]
 8008eb2:	685b      	ldreq	r3, [r3, #4]
 8008eb4:	1949      	addeq	r1, r1, r5
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	e7ed      	b.n	8008e96 <_free_r+0x22>
 8008eba:	461a      	mov	r2, r3
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	b10b      	cbz	r3, 8008ec4 <_free_r+0x50>
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	d9fa      	bls.n	8008eba <_free_r+0x46>
 8008ec4:	6811      	ldr	r1, [r2, #0]
 8008ec6:	1855      	adds	r5, r2, r1
 8008ec8:	42a5      	cmp	r5, r4
 8008eca:	d10b      	bne.n	8008ee4 <_free_r+0x70>
 8008ecc:	6824      	ldr	r4, [r4, #0]
 8008ece:	4421      	add	r1, r4
 8008ed0:	1854      	adds	r4, r2, r1
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	6011      	str	r1, [r2, #0]
 8008ed6:	d1e0      	bne.n	8008e9a <_free_r+0x26>
 8008ed8:	681c      	ldr	r4, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	6053      	str	r3, [r2, #4]
 8008ede:	4421      	add	r1, r4
 8008ee0:	6011      	str	r1, [r2, #0]
 8008ee2:	e7da      	b.n	8008e9a <_free_r+0x26>
 8008ee4:	d902      	bls.n	8008eec <_free_r+0x78>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	e7d6      	b.n	8008e9a <_free_r+0x26>
 8008eec:	6825      	ldr	r5, [r4, #0]
 8008eee:	1961      	adds	r1, r4, r5
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	bf04      	itt	eq
 8008ef4:	6819      	ldreq	r1, [r3, #0]
 8008ef6:	685b      	ldreq	r3, [r3, #4]
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	bf04      	itt	eq
 8008efc:	1949      	addeq	r1, r1, r5
 8008efe:	6021      	streq	r1, [r4, #0]
 8008f00:	6054      	str	r4, [r2, #4]
 8008f02:	e7ca      	b.n	8008e9a <_free_r+0x26>
 8008f04:	b003      	add	sp, #12
 8008f06:	bd30      	pop	{r4, r5, pc}
 8008f08:	2000091c 	.word	0x2000091c

08008f0c <sbrk_aligned>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	4e0e      	ldr	r6, [pc, #56]	; (8008f48 <sbrk_aligned+0x3c>)
 8008f10:	460c      	mov	r4, r1
 8008f12:	6831      	ldr	r1, [r6, #0]
 8008f14:	4605      	mov	r5, r0
 8008f16:	b911      	cbnz	r1, 8008f1e <sbrk_aligned+0x12>
 8008f18:	f000 f88c 	bl	8009034 <_sbrk_r>
 8008f1c:	6030      	str	r0, [r6, #0]
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 f887 	bl	8009034 <_sbrk_r>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d00a      	beq.n	8008f40 <sbrk_aligned+0x34>
 8008f2a:	1cc4      	adds	r4, r0, #3
 8008f2c:	f024 0403 	bic.w	r4, r4, #3
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d007      	beq.n	8008f44 <sbrk_aligned+0x38>
 8008f34:	1a21      	subs	r1, r4, r0
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 f87c 	bl	8009034 <_sbrk_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d101      	bne.n	8008f44 <sbrk_aligned+0x38>
 8008f40:	f04f 34ff 	mov.w	r4, #4294967295
 8008f44:	4620      	mov	r0, r4
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	20000920 	.word	0x20000920

08008f4c <_malloc_r>:
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	1ccd      	adds	r5, r1, #3
 8008f52:	f025 0503 	bic.w	r5, r5, #3
 8008f56:	3508      	adds	r5, #8
 8008f58:	2d0c      	cmp	r5, #12
 8008f5a:	bf38      	it	cc
 8008f5c:	250c      	movcc	r5, #12
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	4607      	mov	r7, r0
 8008f62:	db01      	blt.n	8008f68 <_malloc_r+0x1c>
 8008f64:	42a9      	cmp	r1, r5
 8008f66:	d905      	bls.n	8008f74 <_malloc_r+0x28>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	4630      	mov	r0, r6
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	4e2e      	ldr	r6, [pc, #184]	; (8009030 <_malloc_r+0xe4>)
 8008f76:	f000 f86d 	bl	8009054 <__malloc_lock>
 8008f7a:	6833      	ldr	r3, [r6, #0]
 8008f7c:	461c      	mov	r4, r3
 8008f7e:	bb34      	cbnz	r4, 8008fce <_malloc_r+0x82>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4638      	mov	r0, r7
 8008f84:	f7ff ffc2 	bl	8008f0c <sbrk_aligned>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	d14d      	bne.n	800902a <_malloc_r+0xde>
 8008f8e:	6834      	ldr	r4, [r6, #0]
 8008f90:	4626      	mov	r6, r4
 8008f92:	2e00      	cmp	r6, #0
 8008f94:	d140      	bne.n	8009018 <_malloc_r+0xcc>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	eb04 0803 	add.w	r8, r4, r3
 8008fa0:	f000 f848 	bl	8009034 <_sbrk_r>
 8008fa4:	4580      	cmp	r8, r0
 8008fa6:	d13a      	bne.n	800901e <_malloc_r+0xd2>
 8008fa8:	6821      	ldr	r1, [r4, #0]
 8008faa:	3503      	adds	r5, #3
 8008fac:	1a6d      	subs	r5, r5, r1
 8008fae:	f025 0503 	bic.w	r5, r5, #3
 8008fb2:	3508      	adds	r5, #8
 8008fb4:	2d0c      	cmp	r5, #12
 8008fb6:	bf38      	it	cc
 8008fb8:	250c      	movcc	r5, #12
 8008fba:	4629      	mov	r1, r5
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	f7ff ffa5 	bl	8008f0c <sbrk_aligned>
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	d02b      	beq.n	800901e <_malloc_r+0xd2>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	442b      	add	r3, r5
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	e00e      	b.n	8008fec <_malloc_r+0xa0>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	1b52      	subs	r2, r2, r5
 8008fd2:	d41e      	bmi.n	8009012 <_malloc_r+0xc6>
 8008fd4:	2a0b      	cmp	r2, #11
 8008fd6:	d916      	bls.n	8009006 <_malloc_r+0xba>
 8008fd8:	1961      	adds	r1, r4, r5
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	6025      	str	r5, [r4, #0]
 8008fde:	bf18      	it	ne
 8008fe0:	6059      	strne	r1, [r3, #4]
 8008fe2:	6863      	ldr	r3, [r4, #4]
 8008fe4:	bf08      	it	eq
 8008fe6:	6031      	streq	r1, [r6, #0]
 8008fe8:	5162      	str	r2, [r4, r5]
 8008fea:	604b      	str	r3, [r1, #4]
 8008fec:	4638      	mov	r0, r7
 8008fee:	f104 060b 	add.w	r6, r4, #11
 8008ff2:	f000 f835 	bl	8009060 <__malloc_unlock>
 8008ff6:	f026 0607 	bic.w	r6, r6, #7
 8008ffa:	1d23      	adds	r3, r4, #4
 8008ffc:	1af2      	subs	r2, r6, r3
 8008ffe:	d0b6      	beq.n	8008f6e <_malloc_r+0x22>
 8009000:	1b9b      	subs	r3, r3, r6
 8009002:	50a3      	str	r3, [r4, r2]
 8009004:	e7b3      	b.n	8008f6e <_malloc_r+0x22>
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	42a3      	cmp	r3, r4
 800900a:	bf0c      	ite	eq
 800900c:	6032      	streq	r2, [r6, #0]
 800900e:	605a      	strne	r2, [r3, #4]
 8009010:	e7ec      	b.n	8008fec <_malloc_r+0xa0>
 8009012:	4623      	mov	r3, r4
 8009014:	6864      	ldr	r4, [r4, #4]
 8009016:	e7b2      	b.n	8008f7e <_malloc_r+0x32>
 8009018:	4634      	mov	r4, r6
 800901a:	6876      	ldr	r6, [r6, #4]
 800901c:	e7b9      	b.n	8008f92 <_malloc_r+0x46>
 800901e:	230c      	movs	r3, #12
 8009020:	603b      	str	r3, [r7, #0]
 8009022:	4638      	mov	r0, r7
 8009024:	f000 f81c 	bl	8009060 <__malloc_unlock>
 8009028:	e7a1      	b.n	8008f6e <_malloc_r+0x22>
 800902a:	6025      	str	r5, [r4, #0]
 800902c:	e7de      	b.n	8008fec <_malloc_r+0xa0>
 800902e:	bf00      	nop
 8009030:	2000091c 	.word	0x2000091c

08009034 <_sbrk_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4d06      	ldr	r5, [pc, #24]	; (8009050 <_sbrk_r+0x1c>)
 8009038:	2300      	movs	r3, #0
 800903a:	4604      	mov	r4, r0
 800903c:	4608      	mov	r0, r1
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	f7f7 fe3e 	bl	8000cc0 <_sbrk>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_sbrk_r+0x1a>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	b103      	cbz	r3, 800904e <_sbrk_r+0x1a>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	20000924 	.word	0x20000924

08009054 <__malloc_lock>:
 8009054:	4801      	ldr	r0, [pc, #4]	; (800905c <__malloc_lock+0x8>)
 8009056:	f000 b809 	b.w	800906c <__retarget_lock_acquire_recursive>
 800905a:	bf00      	nop
 800905c:	20000928 	.word	0x20000928

08009060 <__malloc_unlock>:
 8009060:	4801      	ldr	r0, [pc, #4]	; (8009068 <__malloc_unlock+0x8>)
 8009062:	f000 b804 	b.w	800906e <__retarget_lock_release_recursive>
 8009066:	bf00      	nop
 8009068:	20000928 	.word	0x20000928

0800906c <__retarget_lock_acquire_recursive>:
 800906c:	4770      	bx	lr

0800906e <__retarget_lock_release_recursive>:
 800906e:	4770      	bx	lr

08009070 <_init>:
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009072:	bf00      	nop
 8009074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009076:	bc08      	pop	{r3}
 8009078:	469e      	mov	lr, r3
 800907a:	4770      	bx	lr

0800907c <_fini>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	bf00      	nop
 8009080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009082:	bc08      	pop	{r3}
 8009084:	469e      	mov	lr, r3
 8009086:	4770      	bx	lr


Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000856c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008710  08008710  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008718  08008718  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000898  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000928  20000928  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e4f6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004318  00000000  00000000  0003e5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  000428d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001638  00000000  00000000  000440a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025976  00000000  00000000  000456e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4da  00000000  00000000  0006b056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4908  00000000  00000000  0008a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ee38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006688  00000000  00000000  0015ee88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080086dc 	.word	0x080086dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080086dc 	.word	0x080086dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
     PB10   ------> I2S2_CK
     PC7   ------> I2S3_MCK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b86      	ldr	r3, [pc, #536]	; (8000700 <MX_GPIO_Init+0x234>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <MX_GPIO_Init+0x234>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b83      	ldr	r3, [pc, #524]	; (8000700 <MX_GPIO_Init+0x234>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b7f      	ldr	r3, [pc, #508]	; (8000700 <MX_GPIO_Init+0x234>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a7e      	ldr	r2, [pc, #504]	; (8000700 <MX_GPIO_Init+0x234>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b7c      	ldr	r3, [pc, #496]	; (8000700 <MX_GPIO_Init+0x234>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b78      	ldr	r3, [pc, #480]	; (8000700 <MX_GPIO_Init+0x234>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a77      	ldr	r2, [pc, #476]	; (8000700 <MX_GPIO_Init+0x234>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b75      	ldr	r3, [pc, #468]	; (8000700 <MX_GPIO_Init+0x234>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b71      	ldr	r3, [pc, #452]	; (8000700 <MX_GPIO_Init+0x234>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a70      	ldr	r2, [pc, #448]	; (8000700 <MX_GPIO_Init+0x234>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b6e      	ldr	r3, [pc, #440]	; (8000700 <MX_GPIO_Init+0x234>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <MX_GPIO_Init+0x234>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a69      	ldr	r2, [pc, #420]	; (8000700 <MX_GPIO_Init+0x234>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b67      	ldr	r3, [pc, #412]	; (8000700 <MX_GPIO_Init+0x234>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b63      	ldr	r3, [pc, #396]	; (8000700 <MX_GPIO_Init+0x234>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a62      	ldr	r2, [pc, #392]	; (8000700 <MX_GPIO_Init+0x234>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b60      	ldr	r3, [pc, #384]	; (8000700 <MX_GPIO_Init+0x234>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	485d      	ldr	r0, [pc, #372]	; (8000704 <MX_GPIO_Init+0x238>)
 8000590:	f001 f948 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	485b      	ldr	r0, [pc, #364]	; (8000708 <MX_GPIO_Init+0x23c>)
 800059a:	f001 f943 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f247 0110 	movw	r1, #28688	; 0x7010
 80005a4:	4859      	ldr	r0, [pc, #356]	; (800070c <MX_GPIO_Init+0x240>)
 80005a6:	f001 f93d 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	4850      	ldr	r0, [pc, #320]	; (8000704 <MX_GPIO_Init+0x238>)
 80005c2:	f000 ff93 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	484a      	ldr	r0, [pc, #296]	; (8000708 <MX_GPIO_Init+0x23c>)
 80005de:	f000 ff85 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4842      	ldr	r0, [pc, #264]	; (8000708 <MX_GPIO_Init+0x23c>)
 80005fe:	f000 ff75 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000606:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	483e      	ldr	r0, [pc, #248]	; (8000710 <MX_GPIO_Init+0x244>)
 8000618:	f000 ff68 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800061c:	2310      	movs	r3, #16
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800062c:	2306      	movs	r3, #6
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4836      	ldr	r0, [pc, #216]	; (8000710 <MX_GPIO_Init+0x244>)
 8000638:	f000 ff58 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800063c:	2304      	movs	r3, #4
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4831      	ldr	r0, [pc, #196]	; (8000714 <MX_GPIO_Init+0x248>)
 8000650:	f000 ff4c 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000666:	2305      	movs	r3, #5
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	4828      	ldr	r0, [pc, #160]	; (8000714 <MX_GPIO_Init+0x248>)
 8000672:	f000 ff3b 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 8000676:	f247 0310 	movw	r3, #28688	; 0x7010
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	481f      	ldr	r0, [pc, #124]	; (800070c <MX_GPIO_Init+0x240>)
 8000690:	f000 ff2c 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SD_Pin;
 8000694:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006a6:	2306      	movs	r3, #6
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4815      	ldr	r0, [pc, #84]	; (8000708 <MX_GPIO_Init+0x23c>)
 80006b2:	f000 ff1b 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006b6:	2320      	movs	r3, #32
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4810      	ldr	r0, [pc, #64]	; (800070c <MX_GPIO_Init+0x240>)
 80006ca:	f000 ff0f 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <MX_GPIO_Init+0x238>)
 80006e4:	f000 ff02 	bl	80014ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2006      	movs	r0, #6
 80006ee:	f000 fe34 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006f2:	2006      	movs	r0, #6
 80006f4:	f000 fe4d 	bl	8001392 <HAL_NVIC_EnableIRQ>

}
 80006f8:	bf00      	nop
 80006fa:	3730      	adds	r7, #48	; 0x30
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40021000 	.word	0x40021000
 8000708:	40020800 	.word	0x40020800
 800070c:	40020c00 	.word	0x40020c00
 8000710:	40020000 	.word	0x40020000
 8000714:	40020400 	.word	0x40020400

08000718 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C1_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <MX_I2C1_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C1_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_I2C1_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_I2C1_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C1_Init+0x50>)
 8000756:	f002 fc9f 	bl	8003098 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f94e 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000ac 	.word	0x200000ac
 800076c:	40005400 	.word	0x40005400
 8000770:	000186a0 	.word	0x000186a0

08000774 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <HAL_I2C_MspInit+0x84>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d12c      	bne.n	80007f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_I2C_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b8:	2312      	movs	r3, #18
 80007ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c4:	2304      	movs	r3, #4
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <HAL_I2C_MspInit+0x8c>)
 80007d0:	f000 fe8c 	bl	80014ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40005400 	.word	0x40005400
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020400 	.word	0x40020400

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fc36 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f840 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f7ff fe5c 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000814:	f7ff ff80 	bl	8000718 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000818:	f000 f8f8 	bl	8000a0c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800081c:	f007 fb6e 	bl	8007efc <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000820:	f000 fa90 	bl	8000d44 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000824:	f000 fa40 	bl	8000ca8 <MX_TIM2_Init>
  MX_UART4_Init();
 8000828:	f000 fb82 	bl	8000f30 <MX_UART4_Init>

  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800082c:	210c      	movs	r1, #12
 800082e:	4812      	ldr	r0, [pc, #72]	; (8000878 <main+0x74>)
 8000830:	f003 fbb0 	bl	8003f94 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <main+0x78>)
 8000836:	f003 fae3 	bl	8003e00 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4_data, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	4910      	ldr	r1, [pc, #64]	; (8000880 <main+0x7c>)
 800083e:	4811      	ldr	r0, [pc, #68]	; (8000884 <main+0x80>)
 8000840:	f004 fba9 	bl	8004f96 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//매크로 (언더바 2개)
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, ccr);
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <main+0x84>)
 8000846:	881a      	ldrh	r2, [r3, #0]
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <main+0x74>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	641a      	str	r2, [r3, #64]	; 0x40
		//TIM4 -> CCR4 = ccr; //위의 매크로 대신 이렇게 써도됨
		ccr += 1000;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <main+0x84>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000856:	b29a      	uxth	r2, r3
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <main+0x84>)
 800085a:	801a      	strh	r2, [r3, #0]
		if(ccr > TIM4->ARR) ccr = 0;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <main+0x84>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <main+0x88>)
 8000864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000866:	429a      	cmp	r2, r3
 8000868:	d902      	bls.n	8000870 <main+0x6c>
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <main+0x84>)
 800086c:	2200      	movs	r2, #0
 800086e:	801a      	strh	r2, [r3, #0]
		HAL_Delay(50);
 8000870:	2032      	movs	r0, #50	; 0x32
 8000872:	f000 fc73 	bl	800115c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, ccr);
 8000876:	e7e5      	b.n	8000844 <main+0x40>
 8000878:	200001a8 	.word	0x200001a8
 800087c:	20000160 	.word	0x20000160
 8000880:	20000102 	.word	0x20000102
 8000884:	200001f0 	.word	0x200001f0
 8000888:	20000100 	.word	0x20000100
 800088c:	40000800 	.word	0x40000800

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	; 0x50
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2230      	movs	r2, #48	; 0x30
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f007 fe16 	bl	80084d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <SystemClock_Config+0xcc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	4a27      	ldr	r2, [pc, #156]	; (800095c <SystemClock_Config+0xcc>)
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	; 0x40
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <SystemClock_Config+0xcc>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <SystemClock_Config+0xd0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a21      	ldr	r2, [pc, #132]	; (8000960 <SystemClock_Config+0xd0>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <SystemClock_Config+0xd0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000900:	2308      	movs	r3, #8
 8000902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000904:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000908:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090a:	2302      	movs	r3, #2
 800090c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800090e:	2307      	movs	r3, #7
 8000910:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	4618      	mov	r0, r3
 8000918:	f002 fd02 	bl	8003320 <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000922:	f000 f86d 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	230f      	movs	r3, #15
 8000928:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2302      	movs	r3, #2
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000932:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000936:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2105      	movs	r1, #5
 8000944:	4618      	mov	r0, r3
 8000946:	f002 ff63 	bl	8003810 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000950:	f000 f856 	bl	8000a00 <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3750      	adds	r7, #80	; 0x50
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40007000 	.word	0x40007000

08000964 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//Interrupt Switch
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d104      	bne.n	800097e <HAL_GPIO_EXTI_Callback+0x1a>
		Blue_LED_Toggle;
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <HAL_GPIO_EXTI_Callback+0x24>)
 800097a:	f000 ff6c 	bl	8001856 <HAL_GPIO_TogglePin>
	}
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020c00 	.word	0x40020c00

0800098c <HAL_TIM_PeriodElapsedCallback>:

//Timer Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800099c:	d104      	bne.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		Green_LED_Toggle;
 800099e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80009a4:	f000 ff57 	bl	8001856 <HAL_GPIO_TogglePin>
	}
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <HAL_UART_RxCpltCallback>:

//Rx Complete Call Back
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == UART4) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <HAL_UART_RxCpltCallback+0x3c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d10f      	bne.n	80009e6 <HAL_UART_RxCpltCallback+0x32>
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4_data, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	490a      	ldr	r1, [pc, #40]	; (80009f4 <HAL_UART_RxCpltCallback+0x40>)
 80009ca:	480b      	ldr	r0, [pc, #44]	; (80009f8 <HAL_UART_RxCpltCallback+0x44>)
 80009cc:	f004 fae3 	bl	8004f96 <HAL_UART_Receive_IT>
		Red_LED_Toggle;
 80009d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <HAL_UART_RxCpltCallback+0x48>)
 80009d6:	f000 ff3e 	bl	8001856 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart4, (uint8_t*)&rx4_data, 1, 10);
 80009da:	230a      	movs	r3, #10
 80009dc:	2201      	movs	r2, #1
 80009de:	4905      	ldr	r1, [pc, #20]	; (80009f4 <HAL_UART_RxCpltCallback+0x40>)
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_RxCpltCallback+0x44>)
 80009e2:	f004 fa46 	bl	8004e72 <HAL_UART_Transmit>
	}
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004c00 	.word	0x40004c00
 80009f4:	20000102 	.word	0x20000102
 80009f8:	200001f0 	.word	0x200001f0
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <MX_SPI1_Init+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a58:	220a      	movs	r2, #10
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a5e:	f003 f8f7 	bl	8003c50 <HAL_SPI_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a68:	f7ff ffca 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000104 	.word	0x20000104
 8000a74:	40013000 	.word	0x40013000

08000a78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_SPI_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12b      	bne.n	8000af2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_SPI_MspInit+0x88>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <HAL_SPI_MspInit+0x88>)
 8000aa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_SPI_MspInit+0x88>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_SPI_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_SPI_MspInit+0x88>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_SPI_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ad2:	23e0      	movs	r3, #224	; 0xe0
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000aee:	f000 fcfd 	bl	80014ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40013000 	.word	0x40013000
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b46:	2007      	movs	r0, #7
 8000b48:	f000 fbfc 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 faba 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 fe6b 	bl	800188c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM2_IRQHandler+0x10>)
 8000bc2:	f003 faaf 	bl	8004124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000160 	.word	0x20000160

08000bd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <TIM4_IRQHandler+0x10>)
 8000bd6:	f003 faa5 	bl	8004124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200001a8 	.word	0x200001a8

08000be4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Orange_LED_Toggle;
 8000be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <UART4_IRQHandler+0x18>)
 8000bee:	f000 fe32 	bl	8001856 <HAL_GPIO_TogglePin>

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <UART4_IRQHandler+0x1c>)
 8000bf4:	f004 fa00 	bl	8004ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40020c00 	.word	0x40020c00
 8000c00:	200001f0 	.word	0x200001f0

08000c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <OTG_FS_IRQHandler+0x10>)
 8000c0a:	f001 f8c1 	bl	8001d90 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000614 	.word	0x20000614

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f007 fc08 	bl	800845c <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	2000015c 	.word	0x2000015c
 8000c80:	20000928 	.word	0x20000928

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cce:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000cd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cdc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ce0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cee:	4814      	ldr	r0, [pc, #80]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cf0:	f003 f837 	bl	8003d62 <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cfa:	f7ff fe81 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000d0c:	f003 fbd4 	bl	80044b8 <HAL_TIM_ConfigClockSource>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d16:	f7ff fe73 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000d28:	f003 ffc6 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d32:	f7ff fe65 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000160 	.word	0x20000160

08000d44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d76:	4a2e      	ldr	r2, [pc, #184]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d7c:	2213      	movs	r2, #19
 8000d7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000-1;
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d88:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000d8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d9a:	4824      	ldr	r0, [pc, #144]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d9c:	f002 ffe1 	bl	8003d62 <HAL_TIM_Base_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000da6:	f7ff fe2b 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db4:	4619      	mov	r1, r3
 8000db6:	481d      	ldr	r0, [pc, #116]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000db8:	f003 fb7e 	bl	80044b8 <HAL_TIM_ConfigClockSource>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000dc2:	f7ff fe1d 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc6:	4819      	ldr	r0, [pc, #100]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000dc8:	f003 f88a 	bl	8003ee0 <HAL_TIM_PWM_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000dd2:	f7ff fe15 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	4619      	mov	r1, r3
 8000de4:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000de6:	f003 ff67 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000df0:	f7ff fe06 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df4:	2360      	movs	r3, #96	; 0x60
 8000df6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21000-1;
 8000df8:	f245 2307 	movw	r3, #20999	; 0x5207
 8000dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	220c      	movs	r2, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000e0e:	f003 fa91 	bl	8004334 <HAL_TIM_PWM_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000e18:	f7ff fdf2 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000e1e:	f000 f84d 	bl	8000ebc <HAL_TIM_MspPostInit>

}
 8000e22:	bf00      	nop
 8000e24:	3738      	adds	r7, #56	; 0x38
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200001a8 	.word	0x200001a8
 8000e30:	40000800 	.word	0x40000800

08000e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e44:	d116      	bne.n	8000e74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	201c      	movs	r0, #28
 8000e68:	f000 fa77 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e6c:	201c      	movs	r0, #28
 8000e6e:	f000 fa90 	bl	8001392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e72:	e01a      	b.n	8000eaa <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <HAL_TIM_Base_MspInit+0x84>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d115      	bne.n	8000eaa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	201e      	movs	r0, #30
 8000ea0:	f000 fa5b 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ea4:	201e      	movs	r0, #30
 8000ea6:	f000 fa74 	bl	8001392 <HAL_NVIC_EnableIRQ>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40000800 	.word	0x40000800

08000ebc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_TIM_MspPostInit+0x68>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d11e      	bne.n	8000f1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000efe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4619      	mov	r1, r3
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_TIM_MspPostInit+0x70>)
 8000f18:	f000 fae8 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40000800 	.word	0x40000800
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020c00 	.word	0x40020c00

08000f30 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_UART4_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_UART4_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_UART4_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_UART4_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_UART4_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_UART4_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_UART4_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_UART4_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_UART4_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_UART4_Init+0x4c>)
 8000f68:	f003 ff36 	bl	8004dd8 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f72:	f7ff fd45 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001f0 	.word	0x200001f0
 8000f80:	40004c00 	.word	0x40004c00

08000f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <HAL_UART_MspInit+0x94>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d134      	bne.n	8001010 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_UART_MspInit+0x98>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a1b      	ldr	r2, [pc, #108]	; (800101c <HAL_UART_MspInit+0x98>)
 8000fb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_UART_MspInit+0x98>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_UART_MspInit+0x98>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_UART_MspInit+0x98>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_UART_MspInit+0x98>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <HAL_UART_MspInit+0x9c>)
 8000ffc:	f000 fa76 	bl	80014ec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2034      	movs	r0, #52	; 0x34
 8001006:	f000 f9a8 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800100a:	2034      	movs	r0, #52	; 0x34
 800100c:	f000 f9c1 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40004c00 	.word	0x40004c00
 800101c:	40023800 	.word	0x40023800
 8001020:	40020800 	.word	0x40020800

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff fe19 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f007 fa09 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fbd5 	bl	8000804 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800105c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001068:	08008720 	.word	0x08008720
  ldr r2, =_sbss
 800106c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001070:	20000928 	.word	0x20000928

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f94f 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fd2c 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f967 	bl	80013ae <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f92f 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000008 	.word	0x20000008
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008
 8001140:	20000234 	.word	0x20000234

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000234 	.word	0x20000234

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db0b      	blt.n	8001232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 021f 	and.w	r2, r3, #31
 8001220:	4907      	ldr	r1, [pc, #28]	; (8001240 <__NVIC_EnableIRQ+0x38>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	2001      	movs	r0, #1
 800122a:	fa00 f202 	lsl.w	r2, r0, r2
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff29 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff3e 	bl	80011ec <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff8e 	bl	8001298 <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff31 	bl	8001208 <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa2 	bl	8001300 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff feb6 	bl	8001144 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d008      	beq.n	80013f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e052      	b.n	800149e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0216 	bic.w	r2, r2, #22
 8001406:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001416:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	2b00      	cmp	r3, #0
 800141e:	d103      	bne.n	8001428 <HAL_DMA_Abort+0x62>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0208 	bic.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001448:	e013      	b.n	8001472 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144a:	f7ff fe7b 	bl	8001144 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b05      	cmp	r3, #5
 8001456:	d90c      	bls.n	8001472 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2220      	movs	r2, #32
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e015      	b.n	800149e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e4      	bne.n	800144a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001484:	223f      	movs	r2, #63	; 0x3f
 8001486:	409a      	lsls	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d004      	beq.n	80014c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e00c      	b.n	80014de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2205      	movs	r2, #5
 80014c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e16b      	b.n	80017e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001508:	2201      	movs	r2, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 815a 	bne.w	80017da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d005      	beq.n	800153e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	2b02      	cmp	r3, #2
 800153c:	d130      	bne.n	80015a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 0201 	and.w	r2, r3, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d017      	beq.n	80015dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d123      	bne.n	8001630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	69b9      	ldr	r1, [r7, #24]
 800162c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0203 	and.w	r2, r3, #3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80b4 	beq.w	80017da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b60      	ldr	r3, [pc, #384]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a5f      	ldr	r2, [pc, #380]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168e:	4a5b      	ldr	r2, [pc, #364]	; (80017fc <HAL_GPIO_Init+0x310>)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	3302      	adds	r3, #2
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x314>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d02b      	beq.n	8001712 <HAL_GPIO_Init+0x226>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x318>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d025      	beq.n	800170e <HAL_GPIO_Init+0x222>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_GPIO_Init+0x31c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d01f      	beq.n	800170a <HAL_GPIO_Init+0x21e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_GPIO_Init+0x320>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x21a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_GPIO_Init+0x324>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x216>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_GPIO_Init+0x328>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x212>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_GPIO_Init+0x32c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x20e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4b      	ldr	r2, [pc, #300]	; (800181c <HAL_GPIO_Init+0x330>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x20a>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e00e      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016f6:	2308      	movs	r3, #8
 80016f8:	e00c      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016fa:	2306      	movs	r3, #6
 80016fc:	e00a      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016fe:	2305      	movs	r3, #5
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001702:	2304      	movs	r3, #4
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x228>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x228>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001712:	2300      	movs	r3, #0
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001724:	4935      	ldr	r1, [pc, #212]	; (80017fc <HAL_GPIO_Init+0x310>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_GPIO_Init+0x334>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001780:	4a27      	ldr	r2, [pc, #156]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017aa:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3301      	adds	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	f67f ae90 	bls.w	8001508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40013800 	.word	0x40013800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020400 	.word	0x40020400
 8001808:	40020800 	.word	0x40020800
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40021000 	.word	0x40021000
 8001814:	40021400 	.word	0x40021400
 8001818:	40021800 	.word	0x40021800
 800181c:	40021c00 	.word	0x40021c00
 8001820:	40013c00 	.word	0x40013c00

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001840:	e003      	b.n	800184a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	619a      	str	r2, [r3, #24]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001868:	887a      	ldrh	r2, [r7, #2]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	041a      	lsls	r2, r3, #16
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43d9      	mvns	r1, r3
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	400b      	ands	r3, r1
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	619a      	str	r2, [r3, #24]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f85a 	bl	8000964 <HAL_GPIO_EXTI_Callback>
  }
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40013c00 	.word	0x40013c00

080018bc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	b08f      	sub	sp, #60	; 0x3c
 80018c0:	af0a      	add	r7, sp, #40	; 0x28
 80018c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e054      	b.n	8001978 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d106      	bne.n	80018ee <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f006 fb5b 	bl	8007fa4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2203      	movs	r2, #3
 80018f2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f004 fb4d 	bl	8005fac <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	687e      	ldr	r6, [r7, #4]
 800191a:	466d      	mov	r5, sp
 800191c:	f106 0410 	add.w	r4, r6, #16
 8001920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001928:	e894 0003 	ldmia.w	r4, {r0, r1}
 800192c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001930:	1d33      	adds	r3, r6, #4
 8001932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001934:	6838      	ldr	r0, [r7, #0]
 8001936:	f004 fac7 	bl	8005ec8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2101      	movs	r1, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fb44 	bl	8005fce <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	687e      	ldr	r6, [r7, #4]
 800194e:	466d      	mov	r5, sp
 8001950:	f106 0410 	add.w	r4, r6, #16
 8001954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001960:	e885 0003 	stmia.w	r5, {r0, r1}
 8001964:	1d33      	adds	r3, r6, #4
 8001966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f004 fccd 	bl	8006308 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001980 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af04      	add	r7, sp, #16
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	4608      	mov	r0, r1
 800198a:	4611      	mov	r1, r2
 800198c:	461a      	mov	r2, r3
 800198e:	4603      	mov	r3, r0
 8001990:	70fb      	strb	r3, [r7, #3]
 8001992:	460b      	mov	r3, r1
 8001994:	70bb      	strb	r3, [r7, #2]
 8001996:	4613      	mov	r3, r2
 8001998:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_HCD_HC_Init+0x28>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e076      	b.n	8001a96 <HAL_HCD_HC_Init+0x116>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	333d      	adds	r3, #61	; 0x3d
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3338      	adds	r3, #56	; 0x38
 80019d0:	787a      	ldrb	r2, [r7, #1]
 80019d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3340      	adds	r3, #64	; 0x40
 80019e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019e4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3339      	adds	r3, #57	; 0x39
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	333f      	adds	r3, #63	; 0x3f
 8001a06:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	78ba      	ldrb	r2, [r7, #2]
 8001a10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a14:	b2d0      	uxtb	r0, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	333a      	adds	r3, #58	; 0x3a
 8001a22:	4602      	mov	r2, r0
 8001a24:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da09      	bge.n	8001a42 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	212c      	movs	r1, #44	; 0x2c
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	333b      	adds	r3, #59	; 0x3b
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
 8001a40:	e008      	b.n	8001a54 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	333b      	adds	r3, #59	; 0x3b
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	212c      	movs	r1, #44	; 0x2c
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	333c      	adds	r3, #60	; 0x3c
 8001a62:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a66:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	787c      	ldrb	r4, [r7, #1]
 8001a6e:	78ba      	ldrb	r2, [r7, #2]
 8001a70:	78f9      	ldrb	r1, [r7, #3]
 8001a72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	4623      	mov	r3, r4
 8001a84:	f004 fd9c 	bl	80065c0 <USB_HC_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}

08001a9e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_HCD_HC_Halt+0x1e>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e00f      	b.n	8001adc <HAL_HCD_HC_Halt+0x3e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 ffec 	bl	8006aaa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	70fb      	strb	r3, [r7, #3]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70bb      	strb	r3, [r7, #2]
 8001afa:	4613      	mov	r3, r2
 8001afc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	333b      	adds	r3, #59	; 0x3b
 8001b0c:	78ba      	ldrb	r2, [r7, #2]
 8001b0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	333f      	adds	r3, #63	; 0x3f
 8001b1e:	787a      	ldrb	r2, [r7, #1]
 8001b20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b22:	7c3b      	ldrb	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d112      	bne.n	8001b4e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3342      	adds	r3, #66	; 0x42
 8001b36:	2203      	movs	r2, #3
 8001b38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	212c      	movs	r1, #44	; 0x2c
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	333d      	adds	r3, #61	; 0x3d
 8001b48:	7f3a      	ldrb	r2, [r7, #28]
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	e008      	b.n	8001b60 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	212c      	movs	r1, #44	; 0x2c
 8001b54:	fb01 f303 	mul.w	r3, r1, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	3342      	adds	r3, #66	; 0x42
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	f200 80c6 	bhi.w	8001cf4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001ce1 	.word	0x08001ce1
 8001b78:	08001be5 	.word	0x08001be5
 8001b7c:	08001c63 	.word	0x08001c63
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b80:	7c3b      	ldrb	r3, [r7, #16]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	f040 80b8 	bne.w	8001cf8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b88:	78bb      	ldrb	r3, [r7, #2]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 80b4 	bne.w	8001cf8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b90:	8b3b      	ldrh	r3, [r7, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d108      	bne.n	8001ba8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3355      	adds	r3, #85	; 0x55
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3355      	adds	r3, #85	; 0x55
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3342      	adds	r3, #66	; 0x42
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bce:	e093      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3342      	adds	r3, #66	; 0x42
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]
      break;
 8001be2:	e089      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001be4:	78bb      	ldrb	r3, [r7, #2]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d11d      	bne.n	8001c26 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3355      	adds	r3, #85	; 0x55
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3342      	adds	r3, #66	; 0x42
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c10:	e073      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3342      	adds	r3, #66	; 0x42
 8001c20:	2202      	movs	r2, #2
 8001c22:	701a      	strb	r2, [r3, #0]
      break;
 8001c24:	e069      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3354      	adds	r3, #84	; 0x54
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	3342      	adds	r3, #66	; 0x42
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
      break;
 8001c4c:	e055      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3342      	adds	r3, #66	; 0x42
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	701a      	strb	r2, [r3, #0]
      break;
 8001c60:	e04b      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c62:	78bb      	ldrb	r3, [r7, #2]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11d      	bne.n	8001ca4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3355      	adds	r3, #85	; 0x55
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3342      	adds	r3, #66	; 0x42
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c8e:	e034      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3342      	adds	r3, #66	; 0x42
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	701a      	strb	r2, [r3, #0]
      break;
 8001ca2:	e02a      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3354      	adds	r3, #84	; 0x54
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	212c      	movs	r1, #44	; 0x2c
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3342      	adds	r3, #66	; 0x42
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
      break;
 8001cca:	e016      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	212c      	movs	r1, #44	; 0x2c
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3342      	adds	r3, #66	; 0x42
 8001cda:	2202      	movs	r2, #2
 8001cdc:	701a      	strb	r2, [r3, #0]
      break;
 8001cde:	e00c      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	3342      	adds	r3, #66	; 0x42
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
      break;
 8001cf2:	e002      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001cf4:	bf00      	nop
 8001cf6:	e000      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001cf8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	212c      	movs	r1, #44	; 0x2c
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	3344      	adds	r3, #68	; 0x44
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	8b3a      	ldrh	r2, [r7, #24]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	202c      	movs	r0, #44	; 0x2c
 8001d14:	fb00 f303 	mul.w	r3, r0, r3
 8001d18:	440b      	add	r3, r1
 8001d1a:	334c      	adds	r3, #76	; 0x4c
 8001d1c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3360      	adds	r3, #96	; 0x60
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3350      	adds	r3, #80	; 0x50
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	212c      	movs	r1, #44	; 0x2c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3339      	adds	r3, #57	; 0x39
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3361      	adds	r3, #97	; 0x61
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	222c      	movs	r2, #44	; 0x2c
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	3338      	adds	r3, #56	; 0x38
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	18d1      	adds	r1, r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f004 fd40 	bl	8006804 <USB_HC_StartXfer>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop

08001d90 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 fa6b 	bl	8006282 <USB_GetMode>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	f040 80f6 	bne.w	8001fa0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f004 fa4f 	bl	800625c <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80ec 	beq.w	8001f9e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 fa46 	bl	800625c <USB_ReadInterrupts>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dda:	d104      	bne.n	8001de6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001de4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 fa36 	bl	800625c <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dfa:	d104      	bne.n	8001e06 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f004 fa26 	bl	800625c <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e1a:	d104      	bne.n	8001e26 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 fa16 	bl	800625c <USB_ReadInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d103      	bne.n	8001e42 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 fa08 	bl	800625c <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e56:	d11c      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e60:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10f      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e72:	2110      	movs	r1, #16
 8001e74:	6938      	ldr	r0, [r7, #16]
 8001e76:	f004 f8f7 	bl	8006068 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e7a:	6938      	ldr	r0, [r7, #16]
 8001e7c:	f004 f928 	bl	80060d0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 fafe 	bl	8006488 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f006 f907 	bl	80080a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 f9e0 	bl	800625c <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea6:	d102      	bne.n	8001eae <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f001 f882 	bl	8002fb2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 f9d2 	bl	800625c <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d106      	bne.n	8001ed0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f006 f8d0 	bl	8008068 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 f9c1 	bl	800625c <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d101      	bne.n	8001ee8 <HAL_HCD_IRQHandler+0x158>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_HCD_IRQHandler+0x15a>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d012      	beq.n	8001f14 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699a      	ldr	r2, [r3, #24]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0210 	bic.w	r2, r2, #16
 8001efc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 ff85 	bl	8002e0e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0210 	orr.w	r2, r2, #16
 8001f12:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f004 f99f 	bl	800625c <USB_ReadInterrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f28:	d13a      	bne.n	8001fa0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 fdaa 	bl	8006a88 <USB_HC_ReadInterrupt>
 8001f34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e025      	b.n	8001f88 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d018      	beq.n	8001f82 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f66:	d106      	bne.n	8001f76 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f88f 	bl	8002092 <HCD_HC_IN_IRQHandler>
 8001f74:	e005      	b.n	8001f82 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fbdd 	bl	800273c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3d4      	bcc.n	8001f3c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9a:	615a      	str	r2, [r3, #20]
 8001f9c:	e000      	b.n	8001fa0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f9e:	bf00      	nop
    }
  }
}
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_HCD_Start+0x16>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e013      	b.n	8001fe4 <HAL_HCD_Start+0x3e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 fa96 	bl	80064fc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 ffd8 	bl	8005f8a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_HCD_Stop+0x16>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e00d      	b.n	800201e <HAL_HCD_Stop+0x32>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fe84 	bl	8006d1c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3360      	adds	r3, #96	; 0x60
 8002040:	781b      	ldrb	r3, [r3, #0]
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3350      	adds	r3, #80	; 0x50
 8002068:	681b      	ldr	r3, [r3, #0]
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fa8a 	bl	800659c <USB_GetCurrentFrame>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d11a      	bne.n	80020f8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	461a      	mov	r2, r3
 80020d0:	2304      	movs	r3, #4
 80020d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3361      	adds	r3, #97	; 0x61
 80020e2:	2206      	movs	r2, #6
 80020e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 fcda 	bl	8006aaa <USB_HC_Halt>
 80020f6:	e0af      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800210e:	d11b      	bne.n	8002148 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	461a      	mov	r2, r3
 800211e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002122:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3361      	adds	r3, #97	; 0x61
 8002132:	2207      	movs	r2, #7
 8002134:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f004 fcb2 	bl	8006aaa <USB_HC_Halt>
 8002146:	e087      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b20      	cmp	r3, #32
 800215c:	d109      	bne.n	8002172 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	461a      	mov	r2, r3
 800216c:	2320      	movs	r3, #32
 800216e:	6093      	str	r3, [r2, #8]
 8002170:	e072      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b08      	cmp	r3, #8
 8002186:	d11a      	bne.n	80021be <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	461a      	mov	r2, r3
 8002196:	2308      	movs	r3, #8
 8002198:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3361      	adds	r3, #97	; 0x61
 80021a8:	2205      	movs	r2, #5
 80021aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 fc77 	bl	8006aaa <USB_HC_Halt>
 80021bc:	e04c      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d4:	d11b      	bne.n	800220e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3361      	adds	r3, #97	; 0x61
 80021f8:	2208      	movs	r2, #8
 80021fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fc4f 	bl	8006aaa <USB_HC_Halt>
 800220c:	e024      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d119      	bne.n	8002258 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	461a      	mov	r2, r3
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	3361      	adds	r3, #97	; 0x61
 8002244:	2206      	movs	r2, #6
 8002246:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f004 fc29 	bl	8006aaa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226e:	d112      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fc15 	bl	8006aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	461a      	mov	r2, r3
 800228e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002292:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002294:	e24e      	b.n	8002734 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f040 80df 	bne.w	800246c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3348      	adds	r3, #72	; 0x48
 80022c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	0159      	lsls	r1, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	440b      	add	r3, r1
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022d8:	1ad2      	subs	r2, r2, r3
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	202c      	movs	r0, #44	; 0x2c
 80022e0:	fb00 f303 	mul.w	r3, r0, r3
 80022e4:	440b      	add	r3, r1
 80022e6:	3350      	adds	r3, #80	; 0x50
 80022e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3361      	adds	r3, #97	; 0x61
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	335c      	adds	r3, #92	; 0x5c
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	461a      	mov	r2, r3
 800231c:	2301      	movs	r3, #1
 800231e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	333f      	adds	r3, #63	; 0x3f
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	333f      	adds	r3, #63	; 0x3f
 8002342:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002344:	2b02      	cmp	r3, #2
 8002346:	d111      	bne.n	800236c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f004 fba9 	bl	8006aaa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4413      	add	r3, r2
 8002360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002364:	461a      	mov	r2, r3
 8002366:	2310      	movs	r3, #16
 8002368:	6093      	str	r3, [r2, #8]
 800236a:	e03a      	b.n	80023e2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	333f      	adds	r3, #63	; 0x3f
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d009      	beq.n	8002394 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	333f      	adds	r3, #63	; 0x3f
 800238e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002390:	2b01      	cmp	r3, #1
 8002392:	d126      	bne.n	80023e2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	0151      	lsls	r1, r2, #5
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	440a      	add	r2, r1
 80023aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023b2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3360      	adds	r3, #96	; 0x60
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	b2d9      	uxtb	r1, r3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	202c      	movs	r0, #44	; 0x2c
 80023d0:	fb00 f303 	mul.w	r3, r0, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3360      	adds	r3, #96	; 0x60
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 fe6d 	bl	80080bc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d12b      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	3348      	adds	r3, #72	; 0x48
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	202c      	movs	r0, #44	; 0x2c
 8002400:	fb00 f202 	mul.w	r2, r0, r2
 8002404:	440a      	add	r2, r1
 8002406:	3240      	adds	r2, #64	; 0x40
 8002408:	8812      	ldrh	r2, [r2, #0]
 800240a:	fbb3 f3f2 	udiv	r3, r3, r2
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 818e 	beq.w	8002734 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3354      	adds	r3, #84	; 0x54
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f083 0301 	eor.w	r3, r3, #1
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3354      	adds	r3, #84	; 0x54
 800243c:	4602      	mov	r2, r0
 800243e:	701a      	strb	r2, [r3, #0]
}
 8002440:	e178      	b.n	8002734 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	3354      	adds	r3, #84	; 0x54
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	f083 0301 	eor.w	r3, r3, #1
 8002456:	b2d8      	uxtb	r0, r3
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3354      	adds	r3, #84	; 0x54
 8002466:	4602      	mov	r2, r0
 8002468:	701a      	strb	r2, [r3, #0]
}
 800246a:	e163      	b.n	8002734 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	f040 80f6 	bne.w	8002670 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3361      	adds	r3, #97	; 0x61
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d109      	bne.n	80024ac <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3360      	adds	r3, #96	; 0x60
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e0c9      	b.n	8002640 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3361      	adds	r3, #97	; 0x61
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d109      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3360      	adds	r3, #96	; 0x60
 80024ce:	2205      	movs	r2, #5
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e0b5      	b.n	8002640 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3361      	adds	r3, #97	; 0x61
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b06      	cmp	r3, #6
 80024e6:	d009      	beq.n	80024fc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3361      	adds	r3, #97	; 0x61
 80024f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d150      	bne.n	800259e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	335c      	adds	r3, #92	; 0x5c
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	202c      	movs	r0, #44	; 0x2c
 8002514:	fb00 f303 	mul.w	r3, r0, r3
 8002518:	440b      	add	r3, r1
 800251a:	335c      	adds	r3, #92	; 0x5c
 800251c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	335c      	adds	r3, #92	; 0x5c
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d912      	bls.n	8002558 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	335c      	adds	r3, #92	; 0x5c
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3360      	adds	r3, #96	; 0x60
 8002552:	2204      	movs	r2, #4
 8002554:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002556:	e073      	b.n	8002640 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3360      	adds	r3, #96	; 0x60
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002580:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002588:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800259c:	e050      	b.n	8002640 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3361      	adds	r3, #97	; 0x61
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d122      	bne.n	80025f8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	3360      	adds	r3, #96	; 0x60
 80025c0:	2202      	movs	r2, #2
 80025c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	461a      	mov	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e023      	b.n	8002640 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3361      	adds	r3, #97	; 0x61
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b07      	cmp	r3, #7
 800260a:	d119      	bne.n	8002640 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	335c      	adds	r3, #92	; 0x5c
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	202c      	movs	r0, #44	; 0x2c
 8002624:	fb00 f303 	mul.w	r3, r0, r3
 8002628:	440b      	add	r3, r1
 800262a:	335c      	adds	r3, #92	; 0x5c
 800262c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3360      	adds	r3, #96	; 0x60
 800263c:	2204      	movs	r2, #4
 800263e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	2302      	movs	r3, #2
 8002650:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	b2d9      	uxtb	r1, r3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	202c      	movs	r0, #44	; 0x2c
 800265c:	fb00 f303 	mul.w	r3, r0, r3
 8002660:	4413      	add	r3, r2
 8002662:	3360      	adds	r3, #96	; 0x60
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f005 fd27 	bl	80080bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800266e:	e061      	b.n	8002734 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b10      	cmp	r3, #16
 8002684:	d156      	bne.n	8002734 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	333f      	adds	r3, #63	; 0x3f
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d111      	bne.n	80026be <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	335c      	adds	r3, #92	; 0x5c
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 f9f7 	bl	8006aaa <USB_HC_Halt>
 80026bc:	e031      	b.n	8002722 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	333f      	adds	r3, #63	; 0x3f
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	333f      	adds	r3, #63	; 0x3f
 80026e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d11d      	bne.n	8002722 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	335c      	adds	r3, #92	; 0x5c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d110      	bne.n	8002722 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3361      	adds	r3, #97	; 0x61
 800270e:	2203      	movs	r2, #3
 8002710:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f004 f9c4 	bl	8006aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	461a      	mov	r2, r3
 8002730:	2310      	movs	r3, #16
 8002732:	6093      	str	r3, [r2, #8]
}
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d11a      	bne.n	80027a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	461a      	mov	r2, r3
 800277a:	2304      	movs	r3, #4
 800277c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	3361      	adds	r3, #97	; 0x61
 800278c:	2206      	movs	r2, #6
 800278e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f004 f985 	bl	8006aaa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027a0:	e331      	b.n	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d12e      	bne.n	8002816 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	461a      	mov	r2, r3
 80027c6:	2320      	movs	r3, #32
 80027c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	333d      	adds	r3, #61	; 0x3d
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	f040 8313 	bne.w	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	333d      	adds	r3, #61	; 0x3d
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3360      	adds	r3, #96	; 0x60
 8002800:	2202      	movs	r2, #2
 8002802:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f004 f94b 	bl	8006aaa <USB_HC_Halt>
}
 8002814:	e2f7      	b.n	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282c:	d112      	bne.n	8002854 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002840:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f004 f92c 	bl	8006aaa <USB_HC_Halt>
}
 8002852:	e2d8      	b.n	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d140      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	335c      	adds	r3, #92	; 0x5c
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d111      	bne.n	80028b6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	333d      	adds	r3, #61	; 0x3d
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	461a      	mov	r2, r3
 80028b2:	2340      	movs	r3, #64	; 0x40
 80028b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	2301      	movs	r3, #1
 80028c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3361      	adds	r3, #97	; 0x61
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 f8e0 	bl	8006aaa <USB_HC_Halt>
}
 80028ea:	e28c      	b.n	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d12c      	bne.n	800295c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3361      	adds	r3, #97	; 0x61
 8002910:	2204      	movs	r2, #4
 8002912:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	333d      	adds	r3, #61	; 0x3d
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f004 f8b1 	bl	8006aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	6093      	str	r3, [r2, #8]
}
 800295a:	e254      	b.n	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b08      	cmp	r3, #8
 8002970:	d11a      	bne.n	80029a8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	461a      	mov	r2, r3
 8002980:	2308      	movs	r3, #8
 8002982:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3361      	adds	r3, #97	; 0x61
 8002992:	2205      	movs	r2, #5
 8002994:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 f882 	bl	8006aaa <USB_HC_Halt>
}
 80029a6:	e22e      	b.n	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d140      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	335c      	adds	r3, #92	; 0x5c
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3361      	adds	r3, #97	; 0x61
 80029de:	2203      	movs	r2, #3
 80029e0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	333d      	adds	r3, #61	; 0x3d
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d112      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	333c      	adds	r3, #60	; 0x3c
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	333d      	adds	r3, #61	; 0x3d
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 f83f 	bl	8006aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	6093      	str	r3, [r2, #8]
}
 8002a3e:	e1e2      	b.n	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b80      	cmp	r3, #128	; 0x80
 8002a54:	d164      	bne.n	8002b20 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d111      	bne.n	8002a82 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3361      	adds	r3, #97	; 0x61
 8002a6c:	2206      	movs	r2, #6
 8002a6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 f815 	bl	8006aaa <USB_HC_Halt>
 8002a80:	e044      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	335c      	adds	r3, #92	; 0x5c
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	202c      	movs	r0, #44	; 0x2c
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	335c      	adds	r3, #92	; 0x5c
 8002aa2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	335c      	adds	r3, #92	; 0x5c
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d920      	bls.n	8002afa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	335c      	adds	r3, #92	; 0x5c
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3360      	adds	r3, #96	; 0x60
 8002ad8:	2204      	movs	r2, #4
 8002ada:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	b2d9      	uxtb	r1, r3
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	202c      	movs	r0, #44	; 0x2c
 8002ae6:	fb00 f303 	mul.w	r3, r0, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3360      	adds	r3, #96	; 0x60
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f005 fae2 	bl	80080bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002af8:	e008      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3360      	adds	r3, #96	; 0x60
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	6093      	str	r3, [r2, #8]
}
 8002b1e:	e172      	b.n	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b36:	d11b      	bne.n	8002b70 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3361      	adds	r3, #97	; 0x61
 8002b46:	2208      	movs	r2, #8
 8002b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 ffa8 	bl	8006aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	461a      	mov	r2, r3
 8002b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6c:	6093      	str	r3, [r2, #8]
}
 8002b6e:	e14a      	b.n	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	f040 813f 	bne.w	8002e06 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3361      	adds	r3, #97	; 0x61
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d17d      	bne.n	8002c98 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3360      	adds	r3, #96	; 0x60
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	333f      	adds	r3, #63	; 0x3f
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d00a      	beq.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	333f      	adds	r3, #63	; 0x3f
 8002bd0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	f040 8100 	bne.w	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d113      	bne.n	8002c08 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3355      	adds	r3, #85	; 0x55
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f083 0301 	eor.w	r3, r3, #1
 8002bf4:	b2d8      	uxtb	r0, r3
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3355      	adds	r3, #85	; 0x55
 8002c04:	4602      	mov	r2, r0
 8002c06:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 80e3 	bne.w	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	334c      	adds	r3, #76	; 0x4c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80d8 	beq.w	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	334c      	adds	r3, #76	; 0x4c
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	202c      	movs	r0, #44	; 0x2c
 8002c3e:	fb00 f202 	mul.w	r2, r0, r2
 8002c42:	440a      	add	r2, r1
 8002c44:	3240      	adds	r2, #64	; 0x40
 8002c46:	8812      	ldrh	r2, [r2, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	202c      	movs	r0, #44	; 0x2c
 8002c52:	fb00 f202 	mul.w	r2, r0, r2
 8002c56:	440a      	add	r2, r1
 8002c58:	3240      	adds	r2, #64	; 0x40
 8002c5a:	8812      	ldrh	r2, [r2, #0]
 8002c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80b5 	beq.w	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3355      	adds	r3, #85	; 0x55
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f083 0301 	eor.w	r3, r3, #1
 8002c82:	b2d8      	uxtb	r0, r3
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3355      	adds	r3, #85	; 0x55
 8002c92:	4602      	mov	r2, r0
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	e09f      	b.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3361      	adds	r3, #97	; 0x61
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d109      	bne.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3360      	adds	r3, #96	; 0x60
 8002cba:	2202      	movs	r2, #2
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e08b      	b.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3361      	adds	r3, #97	; 0x61
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d109      	bne.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e077      	b.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3361      	adds	r3, #97	; 0x61
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d109      	bne.n	8002d10 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e063      	b.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3361      	adds	r3, #97	; 0x61
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b06      	cmp	r3, #6
 8002d22:	d009      	beq.n	8002d38 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3361      	adds	r3, #97	; 0x61
 8002d32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d14f      	bne.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	335c      	adds	r3, #92	; 0x5c
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	202c      	movs	r0, #44	; 0x2c
 8002d50:	fb00 f303 	mul.w	r3, r0, r3
 8002d54:	440b      	add	r3, r1
 8002d56:	335c      	adds	r3, #92	; 0x5c
 8002d58:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	335c      	adds	r3, #92	; 0x5c
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d912      	bls.n	8002d94 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	335c      	adds	r3, #92	; 0x5c
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3360      	adds	r3, #96	; 0x60
 8002d8e:	2204      	movs	r2, #4
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e021      	b.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3360      	adds	r3, #96	; 0x60
 8002da2:	2202      	movs	r2, #2
 8002da4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dbc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dc4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	2302      	movs	r3, #2
 8002de8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	b2d9      	uxtb	r1, r3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	202c      	movs	r0, #44	; 0x2c
 8002df4:	fb00 f303 	mul.w	r3, r0, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3360      	adds	r3, #96	; 0x60
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f005 f95b 	bl	80080bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e06:	bf00      	nop
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b08a      	sub	sp, #40	; 0x28
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	0c5b      	lsrs	r3, r3, #17
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e42:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d004      	beq.n	8002e54 <HCD_RXQLVL_IRQHandler+0x46>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b05      	cmp	r3, #5
 8002e4e:	f000 80a9 	beq.w	8002fa4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e52:	e0aa      	b.n	8002faa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80a6 	beq.w	8002fa8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3344      	adds	r3, #68	; 0x44
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 809b 	beq.w	8002fa8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3350      	adds	r3, #80	; 0x50
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	441a      	add	r2, r3
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	202c      	movs	r0, #44	; 0x2c
 8002e8c:	fb00 f303 	mul.w	r3, r0, r3
 8002e90:	440b      	add	r3, r1
 8002e92:	334c      	adds	r3, #76	; 0x4c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d87a      	bhi.n	8002f90 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3344      	adds	r3, #68	; 0x44
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	f003 f97a 	bl	80061ac <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3344      	adds	r3, #68	; 0x44
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	441a      	add	r2, r3
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	202c      	movs	r0, #44	; 0x2c
 8002ed2:	fb00 f303 	mul.w	r3, r0, r3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3344      	adds	r3, #68	; 0x44
 8002eda:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3350      	adds	r3, #80	; 0x50
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	441a      	add	r2, r3
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	202c      	movs	r0, #44	; 0x2c
 8002ef6:	fb00 f303 	mul.w	r3, r0, r3
 8002efa:	440b      	add	r3, r1
 8002efc:	3350      	adds	r3, #80	; 0x50
 8002efe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	0cdb      	lsrs	r3, r3, #19
 8002f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f14:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3340      	adds	r3, #64	; 0x40
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d13c      	bne.n	8002fa8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d039      	beq.n	8002fa8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f4a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f52:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	3354      	adds	r3, #84	; 0x54
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	f083 0301 	eor.w	r3, r3, #1
 8002f7a:	b2d8      	uxtb	r0, r3
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3354      	adds	r3, #84	; 0x54
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	701a      	strb	r2, [r3, #0]
      break;
 8002f8e:	e00b      	b.n	8002fa8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3360      	adds	r3, #96	; 0x60
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	701a      	strb	r2, [r3, #0]
      break;
 8002fa2:	e001      	b.n	8002fa8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fa4:	bf00      	nop
 8002fa6:	e000      	b.n	8002faa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fa8:	bf00      	nop
  }
}
 8002faa:	bf00      	nop
 8002fac:	3728      	adds	r7, #40	; 0x28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fde:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d10b      	bne.n	8003002 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d102      	bne.n	8002ffa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f005 f845 	bl	8008084 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b08      	cmp	r3, #8
 800300a:	d132      	bne.n	8003072 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f043 0308 	orr.w	r3, r3, #8
 8003012:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b04      	cmp	r3, #4
 800301c:	d126      	bne.n	800306c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d113      	bne.n	800304e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800302c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003030:	d106      	bne.n	8003040 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2102      	movs	r1, #2
 8003038:	4618      	mov	r0, r3
 800303a:	f003 fa25 	bl	8006488 <USB_InitFSLSPClkSel>
 800303e:	e011      	b.n	8003064 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fa1e 	bl	8006488 <USB_InitFSLSPClkSel>
 800304c:	e00a      	b.n	8003064 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d106      	bne.n	8003064 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800305c:	461a      	mov	r2, r3
 800305e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003062:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f005 f837 	bl	80080d8 <HAL_HCD_PortEnabled_Callback>
 800306a:	e002      	b.n	8003072 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f005 f841 	bl	80080f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b20      	cmp	r3, #32
 800307a:	d103      	bne.n	8003084 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f043 0320 	orr.w	r3, r3, #32
 8003082:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e12b      	b.n	8003302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd fb58 	bl	8000774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030fc:	f000 fd80 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 8003100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a81      	ldr	r2, [pc, #516]	; (800330c <HAL_I2C_Init+0x274>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d807      	bhi.n	800311c <HAL_I2C_Init+0x84>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a80      	ldr	r2, [pc, #512]	; (8003310 <HAL_I2C_Init+0x278>)
 8003110:	4293      	cmp	r3, r2
 8003112:	bf94      	ite	ls
 8003114:	2301      	movls	r3, #1
 8003116:	2300      	movhi	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e006      	b.n	800312a <HAL_I2C_Init+0x92>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a7d      	ldr	r2, [pc, #500]	; (8003314 <HAL_I2C_Init+0x27c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	bf94      	ite	ls
 8003124:	2301      	movls	r3, #1
 8003126:	2300      	movhi	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0e7      	b.n	8003302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4a78      	ldr	r2, [pc, #480]	; (8003318 <HAL_I2C_Init+0x280>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0c9b      	lsrs	r3, r3, #18
 800313c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a6a      	ldr	r2, [pc, #424]	; (800330c <HAL_I2C_Init+0x274>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d802      	bhi.n	800316c <HAL_I2C_Init+0xd4>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3301      	adds	r3, #1
 800316a:	e009      	b.n	8003180 <HAL_I2C_Init+0xe8>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	4a69      	ldr	r2, [pc, #420]	; (800331c <HAL_I2C_Init+0x284>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	3301      	adds	r3, #1
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003192:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	495c      	ldr	r1, [pc, #368]	; (800330c <HAL_I2C_Init+0x274>)
 800319c:	428b      	cmp	r3, r1
 800319e:	d819      	bhi.n	80031d4 <HAL_I2C_Init+0x13c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e59      	subs	r1, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ae:	1c59      	adds	r1, r3, #1
 80031b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031b4:	400b      	ands	r3, r1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_I2C_Init+0x138>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1e59      	subs	r1, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c8:	3301      	adds	r3, #1
 80031ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ce:	e051      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e04f      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d111      	bne.n	8003200 <HAL_I2C_Init+0x168>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	440b      	add	r3, r1
 80031ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e012      	b.n	8003226 <HAL_I2C_Init+0x18e>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	0099      	lsls	r1, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Init+0x196>
 800322a:	2301      	movs	r3, #1
 800322c:	e022      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10e      	bne.n	8003254 <HAL_I2C_Init+0x1bc>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e58      	subs	r0, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	440b      	add	r3, r1
 8003244:	fbb0 f3f3 	udiv	r3, r0, r3
 8003248:	3301      	adds	r3, #1
 800324a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003252:	e00f      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	0099      	lsls	r1, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	6809      	ldr	r1, [r1, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6911      	ldr	r1, [r2, #16]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68d2      	ldr	r2, [r2, #12]
 80032ae:	4311      	orrs	r1, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	000186a0 	.word	0x000186a0
 8003310:	001e847f 	.word	0x001e847f
 8003314:	003d08ff 	.word	0x003d08ff
 8003318:	431bde83 	.word	0x431bde83
 800331c:	10624dd3 	.word	0x10624dd3

08003320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e267      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d075      	beq.n	800342a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333e:	4b88      	ldr	r3, [pc, #544]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b04      	cmp	r3, #4
 8003348:	d00c      	beq.n	8003364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334a:	4b85      	ldr	r3, [pc, #532]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003352:	2b08      	cmp	r3, #8
 8003354:	d112      	bne.n	800337c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003356:	4b82      	ldr	r3, [pc, #520]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003362:	d10b      	bne.n	800337c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	4b7e      	ldr	r3, [pc, #504]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d05b      	beq.n	8003428 <HAL_RCC_OscConfig+0x108>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d157      	bne.n	8003428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e242      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d106      	bne.n	8003394 <HAL_RCC_OscConfig+0x74>
 8003386:	4b76      	ldr	r3, [pc, #472]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a75      	ldr	r2, [pc, #468]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xb0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x98>
 800339e:	4b70      	ldr	r3, [pc, #448]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a6f      	ldr	r2, [pc, #444]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6c      	ldr	r2, [pc, #432]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xb0>
 80033b8:	4b69      	ldr	r3, [pc, #420]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a68      	ldr	r2, [pc, #416]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a65      	ldr	r2, [pc, #404]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fd feb4 	bl	8001144 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fd feb0 	bl	8001144 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e207      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xc0>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fd fea0 	bl	8001144 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7fd fe9c 	bl	8001144 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1f3      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	4b51      	ldr	r3, [pc, #324]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0xe8>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d063      	beq.n	80034fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003436:	4b4a      	ldr	r3, [pc, #296]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344a:	2b08      	cmp	r3, #8
 800344c:	d11c      	bne.n	8003488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344e:	4b44      	ldr	r3, [pc, #272]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d116      	bne.n	8003488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	4b41      	ldr	r3, [pc, #260]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_RCC_OscConfig+0x152>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e1c7      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4937      	ldr	r1, [pc, #220]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	e03a      	b.n	80034fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003490:	4b34      	ldr	r3, [pc, #208]	; (8003564 <HAL_RCC_OscConfig+0x244>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fd fe55 	bl	8001144 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800349e:	f7fd fe51 	bl	8001144 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1a8      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b0:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4925      	ldr	r1, [pc, #148]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]
 80034d0:	e015      	b.n	80034fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d2:	4b24      	ldr	r3, [pc, #144]	; (8003564 <HAL_RCC_OscConfig+0x244>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fe34 	bl	8001144 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fd fe30 	bl	8001144 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e187      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d036      	beq.n	8003578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_RCC_OscConfig+0x248>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7fd fe14 	bl	8001144 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003520:	f7fd fe10 	bl	8001144 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e167      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003532:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_OscConfig+0x240>)
 8003534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x200>
 800353e:	e01b      	b.n	8003578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_OscConfig+0x248>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003546:	f7fd fdfd 	bl	8001144 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	e00e      	b.n	800356c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354e:	f7fd fdf9 	bl	8001144 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d907      	bls.n	800356c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e150      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
 8003560:	40023800 	.word	0x40023800
 8003564:	42470000 	.word	0x42470000
 8003568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	4b88      	ldr	r3, [pc, #544]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ea      	bne.n	800354e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8097 	beq.w	80036b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003586:	2300      	movs	r3, #0
 8003588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358a:	4b81      	ldr	r3, [pc, #516]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	4b7d      	ldr	r3, [pc, #500]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	4a7c      	ldr	r2, [pc, #496]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
 80035a6:	4b7a      	ldr	r3, [pc, #488]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b6:	4b77      	ldr	r3, [pc, #476]	; (8003794 <HAL_RCC_OscConfig+0x474>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d118      	bne.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c2:	4b74      	ldr	r3, [pc, #464]	; (8003794 <HAL_RCC_OscConfig+0x474>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a73      	ldr	r2, [pc, #460]	; (8003794 <HAL_RCC_OscConfig+0x474>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7fd fdb9 	bl	8001144 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7fd fdb5 	bl	8001144 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e10c      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x474>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d106      	bne.n	800360a <HAL_RCC_OscConfig+0x2ea>
 80035fc:	4b64      	ldr	r3, [pc, #400]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a63      	ldr	r2, [pc, #396]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6713      	str	r3, [r2, #112]	; 0x70
 8003608:	e01c      	b.n	8003644 <HAL_RCC_OscConfig+0x324>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b05      	cmp	r3, #5
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0x30c>
 8003612:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	4a5e      	ldr	r2, [pc, #376]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 8003618:	f043 0304 	orr.w	r3, r3, #4
 800361c:	6713      	str	r3, [r2, #112]	; 0x70
 800361e:	4b5c      	ldr	r3, [pc, #368]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a5b      	ldr	r2, [pc, #364]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
 800362a:	e00b      	b.n	8003644 <HAL_RCC_OscConfig+0x324>
 800362c:	4b58      	ldr	r3, [pc, #352]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a57      	ldr	r2, [pc, #348]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
 8003638:	4b55      	ldr	r3, [pc, #340]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a54      	ldr	r2, [pc, #336]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 800363e:	f023 0304 	bic.w	r3, r3, #4
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d015      	beq.n	8003678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fd7a 	bl	8001144 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	e00a      	b.n	800366a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd fd76 	bl	8001144 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0cb      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366a:	4b49      	ldr	r3, [pc, #292]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ee      	beq.n	8003654 <HAL_RCC_OscConfig+0x334>
 8003676:	e014      	b.n	80036a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003678:	f7fd fd64 	bl	8001144 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fd fd60 	bl	8001144 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0b5      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003696:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1ee      	bne.n	8003680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	4a38      	ldr	r2, [pc, #224]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80a1 	beq.w	8003800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036be:	4b34      	ldr	r3, [pc, #208]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d05c      	beq.n	8003784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d141      	bne.n	8003756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCC_OscConfig+0x478>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fd fd34 	bl	8001144 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fd fd30 	bl	8001144 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e087      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b27      	ldr	r3, [pc, #156]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	019b      	lsls	r3, r3, #6
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	3b01      	subs	r3, #1
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	491b      	ldr	r1, [pc, #108]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x478>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372e:	f7fd fd09 	bl	8001144 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003736:	f7fd fd05 	bl	8001144 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e05c      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x416>
 8003754:	e054      	b.n	8003800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCC_OscConfig+0x478>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd fcf2 	bl	8001144 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003764:	f7fd fcee 	bl	8001144 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e045      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCC_OscConfig+0x470>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x444>
 8003782:	e03d      	b.n	8003800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e038      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
 8003790:	40023800 	.word	0x40023800
 8003794:	40007000 	.word	0x40007000
 8003798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCC_OscConfig+0x4ec>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d028      	beq.n	80037fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d121      	bne.n	80037fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d11a      	bne.n	80037fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037cc:	4013      	ands	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d111      	bne.n	80037fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	3b01      	subs	r3, #1
 80037e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d107      	bne.n	80037fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800

08003810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0cc      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003824:	4b68      	ldr	r3, [pc, #416]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d90c      	bls.n	800384c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b65      	ldr	r3, [pc, #404]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0b8      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003864:	4b59      	ldr	r3, [pc, #356]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a58      	ldr	r2, [pc, #352]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800386e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800387c:	4b53      	ldr	r3, [pc, #332]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a52      	ldr	r2, [pc, #328]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	494d      	ldr	r1, [pc, #308]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d044      	beq.n	8003930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	4b47      	ldr	r3, [pc, #284]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d119      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07f      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ce:	4b3f      	ldr	r3, [pc, #252]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e06f      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e067      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ee:	4b37      	ldr	r3, [pc, #220]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4934      	ldr	r1, [pc, #208]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003900:	f7fd fc20 	bl	8001144 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	e00a      	b.n	800391e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003908:	f7fd fc1c 	bl	8001144 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e04f      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 020c 	and.w	r2, r3, #12
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	429a      	cmp	r2, r3
 800392e:	d1eb      	bne.n	8003908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d20c      	bcs.n	8003958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e032      	b.n	80039be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4916      	ldr	r1, [pc, #88]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	490e      	ldr	r1, [pc, #56]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003996:	f000 f821 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800399a:	4602      	mov	r2, r0
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	490a      	ldr	r1, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	5ccb      	ldrb	r3, [r1, r3]
 80039aa:	fa22 f303 	lsr.w	r3, r2, r3
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fb80 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023c00 	.word	0x40023c00
 80039cc:	40023800 	.word	0x40023800
 80039d0:	080086f8 	.word	0x080086f8
 80039d4:	20000000 	.word	0x20000000
 80039d8:	20000004 	.word	0x20000004

080039dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e0:	b094      	sub	sp, #80	; 0x50
 80039e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	647b      	str	r3, [r7, #68]	; 0x44
 80039e8:	2300      	movs	r3, #0
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ec:	2300      	movs	r3, #0
 80039ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f4:	4b79      	ldr	r3, [pc, #484]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x200>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d00d      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x40>
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	f200 80e1 	bhi.w	8003bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a0e:	e0db      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a14:	e0db      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a16:	4b73      	ldr	r3, [pc, #460]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a1a:	e0d8      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a1c:	4b6f      	ldr	r3, [pc, #444]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a26:	4b6d      	ldr	r3, [pc, #436]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d063      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a32:	4b6a      	ldr	r3, [pc, #424]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	2200      	movs	r2, #0
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a44:	633b      	str	r3, [r7, #48]	; 0x30
 8003a46:	2300      	movs	r3, #0
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a4e:	4622      	mov	r2, r4
 8003a50:	462b      	mov	r3, r5
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	0159      	lsls	r1, r3, #5
 8003a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a60:	0150      	lsls	r0, r2, #5
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4621      	mov	r1, r4
 8003a68:	1a51      	subs	r1, r2, r1
 8003a6a:	6139      	str	r1, [r7, #16]
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a80:	4659      	mov	r1, fp
 8003a82:	018b      	lsls	r3, r1, #6
 8003a84:	4651      	mov	r1, sl
 8003a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	018a      	lsls	r2, r1, #6
 8003a8e:	4651      	mov	r1, sl
 8003a90:	ebb2 0801 	subs.w	r8, r2, r1
 8003a94:	4659      	mov	r1, fp
 8003a96:	eb63 0901 	sbc.w	r9, r3, r1
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aae:	4690      	mov	r8, r2
 8003ab0:	4699      	mov	r9, r3
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	eb18 0303 	adds.w	r3, r8, r3
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	462b      	mov	r3, r5
 8003abc:	eb49 0303 	adc.w	r3, r9, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ace:	4629      	mov	r1, r5
 8003ad0:	024b      	lsls	r3, r1, #9
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ad8:	4621      	mov	r1, r4
 8003ada:	024a      	lsls	r2, r1, #9
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aec:	f7fc fb6c 	bl	80001c8 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4613      	mov	r3, r2
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	e058      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	099b      	lsrs	r3, r3, #6
 8003b00:	2200      	movs	r2, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	4611      	mov	r1, r2
 8003b06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b14:	4642      	mov	r2, r8
 8003b16:	464b      	mov	r3, r9
 8003b18:	f04f 0000 	mov.w	r0, #0
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	0159      	lsls	r1, r3, #5
 8003b22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b26:	0150      	lsls	r0, r2, #5
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b32:	4649      	mov	r1, r9
 8003b34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b50:	eb63 050b 	sbc.w	r5, r3, fp
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	00eb      	lsls	r3, r5, #3
 8003b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b62:	00e2      	lsls	r2, r4, #3
 8003b64:	4614      	mov	r4, r2
 8003b66:	461d      	mov	r5, r3
 8003b68:	4643      	mov	r3, r8
 8003b6a:	18e3      	adds	r3, r4, r3
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	464b      	mov	r3, r9
 8003b70:	eb45 0303 	adc.w	r3, r5, r3
 8003b74:	607b      	str	r3, [r7, #4]
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b82:	4629      	mov	r1, r5
 8003b84:	028b      	lsls	r3, r1, #10
 8003b86:	4621      	mov	r1, r4
 8003b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	028a      	lsls	r2, r1, #10
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b96:	2200      	movs	r2, #0
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	61fa      	str	r2, [r7, #28]
 8003b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba0:	f7fc fb12 	bl	80001c8 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4613      	mov	r3, r2
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bc6:	e002      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3750      	adds	r7, #80	; 0x50
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	007a1200 	.word	0x007a1200

08003be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000000 	.word	0x20000000

08003c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c04:	f7ff fff0 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0a9b      	lsrs	r3, r3, #10
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4903      	ldr	r1, [pc, #12]	; (8003c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	08008708 	.word	0x08008708

08003c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c2c:	f7ff ffdc 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0b5b      	lsrs	r3, r3, #13
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4903      	ldr	r1, [pc, #12]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	08008708 	.word	0x08008708

08003c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07b      	b.n	8003d5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d108      	bne.n	8003c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c72:	d009      	beq.n	8003c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
 8003c7a:	e005      	b.n	8003c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fc fee8 	bl	8000a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	ea42 0103 	orr.w	r1, r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	f003 0104 	and.w	r1, r3, #4
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0210 	and.w	r2, r3, #16
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e041      	b.n	8003df8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fd f853 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f000 fc79 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d001      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e04e      	b.n	8003eb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x80>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d01d      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x80>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x80>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <HAL_TIM_Base_Start_IT+0xcc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x80>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1c      	ldr	r2, [pc, #112]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x80>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1b      	ldr	r2, [pc, #108]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x80>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x80>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a18      	ldr	r2, [pc, #96]	; (8003edc <HAL_TIM_Base_Start_IT+0xdc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d111      	bne.n	8003ea4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b06      	cmp	r3, #6
 8003e90:	d010      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea2:	e007      	b.n	8003eb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40010400 	.word	0x40010400
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40001800 	.word	0x40001800

08003ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f839 	bl	8003f7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fbba 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <HAL_TIM_PWM_Start+0x24>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e022      	b.n	8003ffe <HAL_TIM_PWM_Start+0x6a>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d109      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0x3e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	bf14      	ite	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	2300      	moveq	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e015      	b.n	8003ffe <HAL_TIM_PWM_Start+0x6a>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d109      	bne.n	8003fec <HAL_TIM_PWM_Start+0x58>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e008      	b.n	8003ffe <HAL_TIM_PWM_Start+0x6a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	bf14      	ite	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	2300      	moveq	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07c      	b.n	8004100 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <HAL_TIM_PWM_Start+0x82>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004014:	e013      	b.n	800403e <HAL_TIM_PWM_Start+0xaa>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d104      	bne.n	8004026 <HAL_TIM_PWM_Start+0x92>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004024:	e00b      	b.n	800403e <HAL_TIM_PWM_Start+0xaa>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d104      	bne.n	8004036 <HAL_TIM_PWM_Start+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004034:	e003      	b.n	800403e <HAL_TIM_PWM_Start+0xaa>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2201      	movs	r2, #1
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fe10 	bl	8004c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2d      	ldr	r2, [pc, #180]	; (8004108 <HAL_TIM_PWM_Start+0x174>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_TIM_PWM_Start+0xcc>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2c      	ldr	r2, [pc, #176]	; (800410c <HAL_TIM_PWM_Start+0x178>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_TIM_PWM_Start+0xd0>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_TIM_PWM_Start+0xd2>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a22      	ldr	r2, [pc, #136]	; (8004108 <HAL_TIM_PWM_Start+0x174>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d022      	beq.n	80040ca <HAL_TIM_PWM_Start+0x136>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d01d      	beq.n	80040ca <HAL_TIM_PWM_Start+0x136>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_TIM_PWM_Start+0x17c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d018      	beq.n	80040ca <HAL_TIM_PWM_Start+0x136>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <HAL_TIM_PWM_Start+0x180>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_TIM_PWM_Start+0x136>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_TIM_PWM_Start+0x184>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00e      	beq.n	80040ca <HAL_TIM_PWM_Start+0x136>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <HAL_TIM_PWM_Start+0x178>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d009      	beq.n	80040ca <HAL_TIM_PWM_Start+0x136>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a18      	ldr	r2, [pc, #96]	; (800411c <HAL_TIM_PWM_Start+0x188>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d004      	beq.n	80040ca <HAL_TIM_PWM_Start+0x136>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <HAL_TIM_PWM_Start+0x18c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d111      	bne.n	80040ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b06      	cmp	r3, #6
 80040da:	d010      	beq.n	80040fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	e007      	b.n	80040fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40010000 	.word	0x40010000
 800410c:	40010400 	.word	0x40010400
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40014000 	.word	0x40014000
 8004120:	40001800 	.word	0x40001800

08004124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d122      	bne.n	8004180 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d11b      	bne.n	8004180 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0202 	mvn.w	r2, #2
 8004150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa77 	bl	800465a <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa69 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fa7a 	bl	800466e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b04      	cmp	r3, #4
 800418c:	d122      	bne.n	80041d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b04      	cmp	r3, #4
 800419a:	d11b      	bne.n	80041d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0204 	mvn.w	r2, #4
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa4d 	bl	800465a <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fa3f 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fa50 	bl	800466e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d122      	bne.n	8004228 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d11b      	bne.n	8004228 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0208 	mvn.w	r2, #8
 80041f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2204      	movs	r2, #4
 80041fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa23 	bl	800465a <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fa15 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fa26 	bl	800466e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b10      	cmp	r3, #16
 8004234:	d122      	bne.n	800427c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b10      	cmp	r3, #16
 8004242:	d11b      	bne.n	800427c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0210 	mvn.w	r2, #16
 800424c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2208      	movs	r2, #8
 8004252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9f9 	bl	800465a <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9eb 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f9fc 	bl	800466e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b01      	cmp	r3, #1
 8004288:	d10e      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d107      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0201 	mvn.w	r2, #1
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc fb72 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d10e      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d107      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fd78 	bl	8004dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d10e      	bne.n	8004300 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d107      	bne.n	8004300 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9c1 	bl	8004682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b20      	cmp	r3, #32
 800430c:	d10e      	bne.n	800432c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b20      	cmp	r3, #32
 800431a:	d107      	bne.n	800432c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0220 	mvn.w	r2, #32
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fd42 	bl	8004db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800434e:	2302      	movs	r3, #2
 8004350:	e0ae      	b.n	80044b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b0c      	cmp	r3, #12
 800435e:	f200 809f 	bhi.w	80044a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800439d 	.word	0x0800439d
 800436c:	080044a1 	.word	0x080044a1
 8004370:	080044a1 	.word	0x080044a1
 8004374:	080044a1 	.word	0x080044a1
 8004378:	080043dd 	.word	0x080043dd
 800437c:	080044a1 	.word	0x080044a1
 8004380:	080044a1 	.word	0x080044a1
 8004384:	080044a1 	.word	0x080044a1
 8004388:	0800441f 	.word	0x0800441f
 800438c:	080044a1 	.word	0x080044a1
 8004390:	080044a1 	.word	0x080044a1
 8004394:	080044a1 	.word	0x080044a1
 8004398:	0800445f 	.word	0x0800445f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fa18 	bl	80047d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0208 	orr.w	r2, r2, #8
 80043b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0204 	bic.w	r2, r2, #4
 80043c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	619a      	str	r2, [r3, #24]
      break;
 80043da:	e064      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fa68 	bl	80048b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6999      	ldr	r1, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	021a      	lsls	r2, r3, #8
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	619a      	str	r2, [r3, #24]
      break;
 800441c:	e043      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fabd 	bl	80049a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0208 	orr.w	r2, r2, #8
 8004438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0204 	bic.w	r2, r2, #4
 8004448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69d9      	ldr	r1, [r3, #28]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	61da      	str	r2, [r3, #28]
      break;
 800445c:	e023      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fb11 	bl	8004a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	021a      	lsls	r2, r3, #8
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	61da      	str	r2, [r3, #28]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
      break;
 80044a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_TIM_ConfigClockSource+0x1c>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e0b4      	b.n	800463e <HAL_TIM_ConfigClockSource+0x186>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450c:	d03e      	beq.n	800458c <HAL_TIM_ConfigClockSource+0xd4>
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004512:	f200 8087 	bhi.w	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451a:	f000 8086 	beq.w	800462a <HAL_TIM_ConfigClockSource+0x172>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	d87f      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b70      	cmp	r3, #112	; 0x70
 8004526:	d01a      	beq.n	800455e <HAL_TIM_ConfigClockSource+0xa6>
 8004528:	2b70      	cmp	r3, #112	; 0x70
 800452a:	d87b      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b60      	cmp	r3, #96	; 0x60
 800452e:	d050      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004530:	2b60      	cmp	r3, #96	; 0x60
 8004532:	d877      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b50      	cmp	r3, #80	; 0x50
 8004536:	d03c      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004538:	2b50      	cmp	r3, #80	; 0x50
 800453a:	d873      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d058      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d86f      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b30      	cmp	r3, #48	; 0x30
 8004546:	d064      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x15a>
 8004548:	2b30      	cmp	r3, #48	; 0x30
 800454a:	d86b      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 800454c:	2b20      	cmp	r3, #32
 800454e:	d060      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x15a>
 8004550:	2b20      	cmp	r3, #32
 8004552:	d867      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d05c      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x15a>
 8004558:	2b10      	cmp	r3, #16
 800455a:	d05a      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x15a>
 800455c:	e062      	b.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6899      	ldr	r1, [r3, #8]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f000 fb5d 	bl	8004c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	609a      	str	r2, [r3, #8]
      break;
 800458a:	e04f      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6899      	ldr	r1, [r3, #8]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f000 fb46 	bl	8004c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ae:	609a      	str	r2, [r3, #8]
      break;
 80045b0:	e03c      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6859      	ldr	r1, [r3, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	461a      	mov	r2, r3
 80045c0:	f000 faba 	bl	8004b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2150      	movs	r1, #80	; 0x50
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fb13 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80045d0:	e02c      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6859      	ldr	r1, [r3, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	461a      	mov	r2, r3
 80045e0:	f000 fad9 	bl	8004b96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2160      	movs	r1, #96	; 0x60
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fb03 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80045f0:	e01c      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	461a      	mov	r2, r3
 8004600:	f000 fa9a 	bl	8004b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2140      	movs	r1, #64	; 0x40
 800460a:	4618      	mov	r0, r3
 800460c:	f000 faf3 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 8004610:	e00c      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f000 faea 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 8004622:	e003      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      break;
 8004628:	e000      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800462a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a40      	ldr	r2, [pc, #256]	; (80047ac <TIM_Base_SetConfig+0x114>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d00f      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3d      	ldr	r2, [pc, #244]	; (80047b0 <TIM_Base_SetConfig+0x118>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00b      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3c      	ldr	r2, [pc, #240]	; (80047b4 <TIM_Base_SetConfig+0x11c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3b      	ldr	r2, [pc, #236]	; (80047b8 <TIM_Base_SetConfig+0x120>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3a      	ldr	r2, [pc, #232]	; (80047bc <TIM_Base_SetConfig+0x124>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d108      	bne.n	80046ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2f      	ldr	r2, [pc, #188]	; (80047ac <TIM_Base_SetConfig+0x114>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d02b      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f8:	d027      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <TIM_Base_SetConfig+0x118>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d023      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <TIM_Base_SetConfig+0x11c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01f      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <TIM_Base_SetConfig+0x120>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01b      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a29      	ldr	r2, [pc, #164]	; (80047bc <TIM_Base_SetConfig+0x124>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d017      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <TIM_Base_SetConfig+0x128>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <TIM_Base_SetConfig+0x12c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00f      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <TIM_Base_SetConfig+0x130>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00b      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a25      	ldr	r2, [pc, #148]	; (80047cc <TIM_Base_SetConfig+0x134>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <TIM_Base_SetConfig+0x138>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a23      	ldr	r2, [pc, #140]	; (80047d4 <TIM_Base_SetConfig+0x13c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d108      	bne.n	800475c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <TIM_Base_SetConfig+0x114>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_Base_SetConfig+0xf8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <TIM_Base_SetConfig+0x124>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d103      	bne.n	8004798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	615a      	str	r2, [r3, #20]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40010400 	.word	0x40010400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	40001800 	.word	0x40001800
 80047d0:	40001c00 	.word	0x40001c00
 80047d4:	40002000 	.word	0x40002000

080047d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f023 0201 	bic.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 0302 	bic.w	r3, r3, #2
 8004820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <TIM_OC1_SetConfig+0xd8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_OC1_SetConfig+0x64>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <TIM_OC1_SetConfig+0xdc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d10c      	bne.n	8004856 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f023 0308 	bic.w	r3, r3, #8
 8004842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a15      	ldr	r2, [pc, #84]	; (80048b0 <TIM_OC1_SetConfig+0xd8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_OC1_SetConfig+0x8e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <TIM_OC1_SetConfig+0xdc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d111      	bne.n	800488a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40010400 	.word	0x40010400

080048b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f023 0210 	bic.w	r2, r3, #16
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0320 	bic.w	r3, r3, #32
 8004902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a22      	ldr	r2, [pc, #136]	; (800499c <TIM_OC2_SetConfig+0xe4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC2_SetConfig+0x68>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <TIM_OC2_SetConfig+0xe8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10d      	bne.n	800493c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a17      	ldr	r2, [pc, #92]	; (800499c <TIM_OC2_SetConfig+0xe4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_OC2_SetConfig+0x94>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <TIM_OC2_SetConfig+0xe8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d113      	bne.n	8004974 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	40010400 	.word	0x40010400

080049a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a21      	ldr	r2, [pc, #132]	; (8004a84 <TIM_OC3_SetConfig+0xe0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC3_SetConfig+0x66>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <TIM_OC3_SetConfig+0xe4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10d      	bne.n	8004a26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <TIM_OC3_SetConfig+0xe0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_OC3_SetConfig+0x92>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <TIM_OC3_SetConfig+0xe4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d113      	bne.n	8004a5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	621a      	str	r2, [r3, #32]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40010400 	.word	0x40010400

08004a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <TIM_OC4_SetConfig+0xa4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC4_SetConfig+0x68>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a11      	ldr	r2, [pc, #68]	; (8004b34 <TIM_OC4_SetConfig+0xa8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d109      	bne.n	8004b08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	019b      	lsls	r3, r3, #6
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40010400 	.word	0x40010400

08004b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f023 0201 	bic.w	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 030a 	bic.w	r3, r3, #10
 8004b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b087      	sub	sp, #28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f023 0210 	bic.w	r2, r3, #16
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	031b      	lsls	r3, r3, #12
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f043 0307 	orr.w	r3, r3, #7
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	021a      	lsls	r2, r3, #8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2201      	movs	r2, #1
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	401a      	ands	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1a      	ldr	r2, [r3, #32]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e05a      	b.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d022      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1c:	d01d      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1d      	ldr	r2, [pc, #116]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d018      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a1a      	ldr	r2, [pc, #104]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d10c      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40010400 	.word	0x40010400
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40001800 	.word	0x40001800

08004db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e03f      	b.n	8004e6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc f8c0 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fddf 	bl	80059e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b08a      	sub	sp, #40	; 0x28
 8004e76:	af02      	add	r7, sp, #8
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d17c      	bne.n	8004f8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_UART_Transmit+0x2c>
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e075      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Transmit+0x3e>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e06e      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2221      	movs	r2, #33	; 0x21
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ec6:	f7fc f93d 	bl	8001144 <HAL_GetTick>
 8004eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	88fa      	ldrh	r2, [r7, #6]
 8004ed0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee0:	d108      	bne.n	8004ef4 <HAL_UART_Transmit+0x82>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	e003      	b.n	8004efc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f04:	e02a      	b.n	8004f5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fb1f 	bl	8005554 <UART_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e036      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	3302      	adds	r3, #2
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	e007      	b.n	8004f4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	781a      	ldrb	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1cf      	bne.n	8004f06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2140      	movs	r1, #64	; 0x40
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 faef 	bl	8005554 <UART_WaitOnFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d11d      	bne.n	8004fec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_UART_Receive_IT+0x26>
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e016      	b.n	8004fee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Receive_IT+0x38>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e00f      	b.n	8004fee <HAL_UART_Receive_IT+0x58>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fb24 	bl	8005630 <UART_Start_Receive_IT>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	e000      	b.n	8004fee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
  }
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b0ba      	sub	sp, #232	; 0xe8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800501e:	2300      	movs	r3, #0
 8005020:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005024:	2300      	movs	r3, #0
 8005026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800502a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10f      	bne.n	800505e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_UART_IRQHandler+0x66>
 800504a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fc07 	bl	800586a <UART_Receive_IT>
      return;
 800505c:	e256      	b.n	800550c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800505e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80de 	beq.w	8005224 <HAL_UART_IRQHandler+0x22c>
 8005068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005078:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80d1 	beq.w	8005224 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00b      	beq.n	80050a6 <HAL_UART_IRQHandler+0xae>
 800508e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_UART_IRQHandler+0xd2>
 80050b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f043 0202 	orr.w	r2, r3, #2
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00b      	beq.n	80050ee <HAL_UART_IRQHandler+0xf6>
 80050d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f043 0204 	orr.w	r2, r3, #4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d011      	beq.n	800511e <HAL_UART_IRQHandler+0x126>
 80050fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d105      	bne.n	8005112 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f043 0208 	orr.w	r2, r3, #8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 81ed 	beq.w	8005502 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_UART_IRQHandler+0x14e>
 8005134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fb92 	bl	800586a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d103      	bne.n	8005172 <HAL_UART_IRQHandler+0x17a>
 800516a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d04f      	beq.n	8005212 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa9a 	bl	80056ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	d141      	bne.n	800520a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3314      	adds	r3, #20
 800518c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800519c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3314      	adds	r3, #20
 80051ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1d9      	bne.n	8005186 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d013      	beq.n	8005202 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	4a7d      	ldr	r2, [pc, #500]	; (80053d4 <HAL_UART_IRQHandler+0x3dc>)
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fc f95d 	bl	80014a6 <HAL_DMA_Abort_IT>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051fc:	4610      	mov	r0, r2
 80051fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	e00e      	b.n	8005220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f990 	bl	8005528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005208:	e00a      	b.n	8005220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f98c 	bl	8005528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	e006      	b.n	8005220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f988 	bl	8005528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800521e:	e170      	b.n	8005502 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005220:	bf00      	nop
    return;
 8005222:	e16e      	b.n	8005502 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	2b01      	cmp	r3, #1
 800522a:	f040 814a 	bne.w	80054c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 8143 	beq.w	80054c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 813c 	beq.w	80054c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800524a:	2300      	movs	r3, #0
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	f040 80b4 	bne.w	80053d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800527c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8140 	beq.w	8005506 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800528a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800528e:	429a      	cmp	r2, r3
 8005290:	f080 8139 	bcs.w	8005506 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800529a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a6:	f000 8088 	beq.w	80053ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1d9      	bne.n	80052aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3314      	adds	r3, #20
 80052fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800531a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800531e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005322:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800532c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e1      	bne.n	80052f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3314      	adds	r3, #20
 8005338:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3314      	adds	r3, #20
 8005352:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005356:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005358:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800535c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e3      	bne.n	8005332 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538a:	f023 0310 	bic.w	r3, r3, #16
 800538e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800539c:	65ba      	str	r2, [r7, #88]	; 0x58
 800539e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e3      	bne.n	8005378 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fc f806 	bl	80013c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8b6 	bl	800553c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053d0:	e099      	b.n	8005506 <HAL_UART_IRQHandler+0x50e>
 80053d2:	bf00      	nop
 80053d4:	08005773 	.word	0x08005773
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 808b 	beq.w	800550a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8086 	beq.w	800550a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005414:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005422:	647a      	str	r2, [r7, #68]	; 0x44
 8005424:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e3      	bne.n	80053fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	623b      	str	r3, [r7, #32]
   return(result);
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3314      	adds	r3, #20
 8005456:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800545a:	633a      	str	r2, [r7, #48]	; 0x30
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e3      	bne.n	8005436 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	60fb      	str	r3, [r7, #12]
   return(result);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0310 	bic.w	r3, r3, #16
 8005492:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054a0:	61fa      	str	r2, [r7, #28]
 80054a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	617b      	str	r3, [r7, #20]
   return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e3      	bne.n	800547c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f83e 	bl	800553c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054c0:	e023      	b.n	800550a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <HAL_UART_IRQHandler+0x4ea>
 80054ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f95d 	bl	800579a <UART_Transmit_IT>
    return;
 80054e0:	e014      	b.n	800550c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <HAL_UART_IRQHandler+0x514>
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f99d 	bl	800583a <UART_EndTransmit_IT>
    return;
 8005500:	e004      	b.n	800550c <HAL_UART_IRQHandler+0x514>
    return;
 8005502:	bf00      	nop
 8005504:	e002      	b.n	800550c <HAL_UART_IRQHandler+0x514>
      return;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <HAL_UART_IRQHandler+0x514>
      return;
 800550a:	bf00      	nop
  }
}
 800550c:	37e8      	adds	r7, #232	; 0xe8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop

08005514 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b090      	sub	sp, #64	; 0x40
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005564:	e050      	b.n	8005608 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d04c      	beq.n	8005608 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800556e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <UART_WaitOnFlagUntilTimeout+0x30>
 8005574:	f7fb fde6 	bl	8001144 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005580:	429a      	cmp	r2, r3
 8005582:	d241      	bcs.n	8005608 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055a4:	637a      	str	r2, [r7, #52]	; 0x34
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e5      	bne.n	8005584 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3314      	adds	r3, #20
 80055be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	613b      	str	r3, [r7, #16]
   return(result);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3314      	adds	r3, #20
 80055d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055d8:	623a      	str	r2, [r7, #32]
 80055da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	69f9      	ldr	r1, [r7, #28]
 80055de:	6a3a      	ldr	r2, [r7, #32]
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e5      	bne.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e00f      	b.n	8005628 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4013      	ands	r3, r2
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	bf0c      	ite	eq
 8005618:	2301      	moveq	r3, #1
 800561a:	2300      	movne	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	429a      	cmp	r2, r3
 8005624:	d09f      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3740      	adds	r7, #64	; 0x40
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2222      	movs	r2, #34	; 0x22
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800567c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695a      	ldr	r2, [r3, #20]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0220 	orr.w	r2, r2, #32
 800569c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b095      	sub	sp, #84	; 0x54
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056d4:	643a      	str	r2, [r7, #64]	; 0x40
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e5      	bne.n	80056b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3314      	adds	r3, #20
 80056ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f023 0301 	bic.w	r3, r3, #1
 80056fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3314      	adds	r3, #20
 8005706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005708:	62fa      	str	r2, [r7, #44]	; 0x2c
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800570e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e5      	bne.n	80056e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	2b01      	cmp	r3, #1
 8005722:	d119      	bne.n	8005758 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	60bb      	str	r3, [r7, #8]
   return(result);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f023 0310 	bic.w	r3, r3, #16
 800573a:	647b      	str	r3, [r7, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005744:	61ba      	str	r2, [r7, #24]
 8005746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6979      	ldr	r1, [r7, #20]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	613b      	str	r3, [r7, #16]
   return(result);
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e5      	bne.n	8005724 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005766:	bf00      	nop
 8005768:	3754      	adds	r7, #84	; 0x54
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fecb 	bl	8005528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b21      	cmp	r3, #33	; 0x21
 80057ac:	d13e      	bne.n	800582c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b6:	d114      	bne.n	80057e2 <UART_Transmit_IT+0x48>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d110      	bne.n	80057e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	1c9a      	adds	r2, r3, #2
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	621a      	str	r2, [r3, #32]
 80057e0:	e008      	b.n	80057f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	1c59      	adds	r1, r3, #1
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6211      	str	r1, [r2, #32]
 80057ec:	781a      	ldrb	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4619      	mov	r1, r3
 8005802:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10f      	bne.n	8005828 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005816:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005826:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	e000      	b.n	800582e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800582c:	2302      	movs	r3, #2
  }
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005850:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fe5a 	bl	8005514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b08c      	sub	sp, #48	; 0x30
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b22      	cmp	r3, #34	; 0x22
 800587c:	f040 80ab 	bne.w	80059d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005888:	d117      	bne.n	80058ba <UART_Receive_IT+0x50>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d113      	bne.n	80058ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	1c9a      	adds	r2, r3, #2
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28
 80058b8:	e026      	b.n	8005908 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058cc:	d007      	beq.n	80058de <UART_Receive_IT+0x74>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <UART_Receive_IT+0x82>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	e008      	b.n	80058fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29b      	uxth	r3, r3
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4619      	mov	r1, r3
 8005916:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005918:	2b00      	cmp	r3, #0
 800591a:	d15a      	bne.n	80059d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0220 	bic.w	r2, r2, #32
 800592a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800593a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695a      	ldr	r2, [r3, #20]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	2b01      	cmp	r3, #1
 800595a:	d135      	bne.n	80059c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	330c      	adds	r3, #12
 8005968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	613b      	str	r3, [r7, #16]
   return(result);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f023 0310 	bic.w	r3, r3, #16
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	623a      	str	r2, [r7, #32]
 8005984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	69f9      	ldr	r1, [r7, #28]
 8005988:	6a3a      	ldr	r2, [r7, #32]
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e5      	bne.n	8005962 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d10a      	bne.n	80059ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff fdbb 	bl	800553c <HAL_UARTEx_RxEventCallback>
 80059c6:	e002      	b.n	80059ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fa fff3 	bl	80009b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e002      	b.n	80059d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3730      	adds	r7, #48	; 0x30
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e4:	b0c0      	sub	sp, #256	; 0x100
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fc:	68d9      	ldr	r1, [r3, #12]
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	ea40 0301 	orr.w	r3, r0, r1
 8005a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a38:	f021 010c 	bic.w	r1, r1, #12
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a46:	430b      	orrs	r3, r1
 8005a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	6999      	ldr	r1, [r3, #24]
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	ea40 0301 	orr.w	r3, r0, r1
 8005a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b8f      	ldr	r3, [pc, #572]	; (8005cac <UART_SetConfig+0x2cc>)
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d005      	beq.n	8005a80 <UART_SetConfig+0xa0>
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b8d      	ldr	r3, [pc, #564]	; (8005cb0 <UART_SetConfig+0x2d0>)
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d104      	bne.n	8005a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a80:	f7fe f8d2 	bl	8003c28 <HAL_RCC_GetPCLK2Freq>
 8005a84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a88:	e003      	b.n	8005a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a8a:	f7fe f8b9 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 8005a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9c:	f040 810c 	bne.w	8005cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	1891      	adds	r1, r2, r2
 8005ab8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005aba:	415b      	adcs	r3, r3
 8005abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	eb12 0801 	adds.w	r8, r2, r1
 8005ac8:	4629      	mov	r1, r5
 8005aca:	eb43 0901 	adc.w	r9, r3, r1
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ae2:	4690      	mov	r8, r2
 8005ae4:	4699      	mov	r9, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	eb18 0303 	adds.w	r3, r8, r3
 8005aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005af0:	462b      	mov	r3, r5
 8005af2:	eb49 0303 	adc.w	r3, r9, r3
 8005af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b0e:	460b      	mov	r3, r1
 8005b10:	18db      	adds	r3, r3, r3
 8005b12:	653b      	str	r3, [r7, #80]	; 0x50
 8005b14:	4613      	mov	r3, r2
 8005b16:	eb42 0303 	adc.w	r3, r2, r3
 8005b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b24:	f7fa fb50 	bl	80001c8 <__aeabi_uldivmod>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4b61      	ldr	r3, [pc, #388]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	011c      	lsls	r4, r3, #4
 8005b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b48:	4642      	mov	r2, r8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	1891      	adds	r1, r2, r2
 8005b4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b50:	415b      	adcs	r3, r3
 8005b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b58:	4641      	mov	r1, r8
 8005b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b5e:	4649      	mov	r1, r9
 8005b60:	eb43 0b01 	adc.w	fp, r3, r1
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b78:	4692      	mov	sl, r2
 8005b7a:	469b      	mov	fp, r3
 8005b7c:	4643      	mov	r3, r8
 8005b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b86:	464b      	mov	r3, r9
 8005b88:	eb4b 0303 	adc.w	r3, fp, r3
 8005b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	18db      	adds	r3, r3, r3
 8005ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8005baa:	4613      	mov	r3, r2
 8005bac:	eb42 0303 	adc.w	r3, r2, r3
 8005bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bba:	f7fa fb05 	bl	80001c8 <__aeabi_uldivmod>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4b3b      	ldr	r3, [pc, #236]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2264      	movs	r2, #100	; 0x64
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	1acb      	subs	r3, r1, r3
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bda:	4b36      	ldr	r3, [pc, #216]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005be8:	441c      	add	r4, r3
 8005bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	1891      	adds	r1, r2, r2
 8005c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c04:	415b      	adcs	r3, r3
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	1851      	adds	r1, r2, r1
 8005c10:	6339      	str	r1, [r7, #48]	; 0x30
 8005c12:	4649      	mov	r1, r9
 8005c14:	414b      	adcs	r3, r1
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c24:	4659      	mov	r1, fp
 8005c26:	00cb      	lsls	r3, r1, #3
 8005c28:	4651      	mov	r1, sl
 8005c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c2e:	4651      	mov	r1, sl
 8005c30:	00ca      	lsls	r2, r1, #3
 8005c32:	4610      	mov	r0, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	4603      	mov	r3, r0
 8005c38:	4642      	mov	r2, r8
 8005c3a:	189b      	adds	r3, r3, r2
 8005c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c40:	464b      	mov	r3, r9
 8005c42:	460a      	mov	r2, r1
 8005c44:	eb42 0303 	adc.w	r3, r2, r3
 8005c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c60:	460b      	mov	r3, r1
 8005c62:	18db      	adds	r3, r3, r3
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c66:	4613      	mov	r3, r2
 8005c68:	eb42 0303 	adc.w	r3, r2, r3
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c76:	f7fa faa7 	bl	80001c8 <__aeabi_uldivmod>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005c80:	fba3 1302 	umull	r1, r3, r3, r2
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	2164      	movs	r1, #100	; 0x64
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	3332      	adds	r3, #50	; 0x32
 8005c92:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005c94:	fba2 2303 	umull	r2, r3, r2, r3
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	f003 0207 	and.w	r2, r3, #7
 8005c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4422      	add	r2, r4
 8005ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ca8:	e105      	b.n	8005eb6 <UART_SetConfig+0x4d6>
 8005caa:	bf00      	nop
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	40011400 	.word	0x40011400
 8005cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cca:	4642      	mov	r2, r8
 8005ccc:	464b      	mov	r3, r9
 8005cce:	1891      	adds	r1, r2, r2
 8005cd0:	6239      	str	r1, [r7, #32]
 8005cd2:	415b      	adcs	r3, r3
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cda:	4641      	mov	r1, r8
 8005cdc:	1854      	adds	r4, r2, r1
 8005cde:	4649      	mov	r1, r9
 8005ce0:	eb43 0501 	adc.w	r5, r3, r1
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	00eb      	lsls	r3, r5, #3
 8005cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf2:	00e2      	lsls	r2, r4, #3
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	461d      	mov	r5, r3
 8005cf8:	4643      	mov	r3, r8
 8005cfa:	18e3      	adds	r3, r4, r3
 8005cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d00:	464b      	mov	r3, r9
 8005d02:	eb45 0303 	adc.w	r3, r5, r3
 8005d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d26:	4629      	mov	r1, r5
 8005d28:	008b      	lsls	r3, r1, #2
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d30:	4621      	mov	r1, r4
 8005d32:	008a      	lsls	r2, r1, #2
 8005d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d38:	f7fa fa46 	bl	80001c8 <__aeabi_uldivmod>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4b60      	ldr	r3, [pc, #384]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005d42:	fba3 2302 	umull	r2, r3, r3, r2
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	011c      	lsls	r4, r3, #4
 8005d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	1891      	adds	r1, r2, r2
 8005d62:	61b9      	str	r1, [r7, #24]
 8005d64:	415b      	adcs	r3, r3
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	1851      	adds	r1, r2, r1
 8005d70:	6139      	str	r1, [r7, #16]
 8005d72:	4649      	mov	r1, r9
 8005d74:	414b      	adcs	r3, r1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d84:	4659      	mov	r1, fp
 8005d86:	00cb      	lsls	r3, r1, #3
 8005d88:	4651      	mov	r1, sl
 8005d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d8e:	4651      	mov	r1, sl
 8005d90:	00ca      	lsls	r2, r1, #3
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	4642      	mov	r2, r8
 8005d9a:	189b      	adds	r3, r3, r2
 8005d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005da0:	464b      	mov	r3, r9
 8005da2:	460a      	mov	r2, r1
 8005da4:	eb42 0303 	adc.w	r3, r2, r3
 8005da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005db6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	008b      	lsls	r3, r1, #2
 8005dc8:	4641      	mov	r1, r8
 8005dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dce:	4641      	mov	r1, r8
 8005dd0:	008a      	lsls	r2, r1, #2
 8005dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dd6:	f7fa f9f7 	bl	80001c8 <__aeabi_uldivmod>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4b39      	ldr	r3, [pc, #228]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	; 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	3332      	adds	r3, #50	; 0x32
 8005df2:	4a34      	ldr	r2, [pc, #208]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfe:	441c      	add	r4, r3
 8005e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e04:	2200      	movs	r2, #0
 8005e06:	673b      	str	r3, [r7, #112]	; 0x70
 8005e08:	677a      	str	r2, [r7, #116]	; 0x74
 8005e0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e0e:	4642      	mov	r2, r8
 8005e10:	464b      	mov	r3, r9
 8005e12:	1891      	adds	r1, r2, r2
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	415b      	adcs	r3, r3
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e1e:	4641      	mov	r1, r8
 8005e20:	1851      	adds	r1, r2, r1
 8005e22:	6039      	str	r1, [r7, #0]
 8005e24:	4649      	mov	r1, r9
 8005e26:	414b      	adcs	r3, r1
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e36:	4659      	mov	r1, fp
 8005e38:	00cb      	lsls	r3, r1, #3
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e40:	4651      	mov	r1, sl
 8005e42:	00ca      	lsls	r2, r1, #3
 8005e44:	4610      	mov	r0, r2
 8005e46:	4619      	mov	r1, r3
 8005e48:	4603      	mov	r3, r0
 8005e4a:	4642      	mov	r2, r8
 8005e4c:	189b      	adds	r3, r3, r2
 8005e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e50:	464b      	mov	r3, r9
 8005e52:	460a      	mov	r2, r1
 8005e54:	eb42 0303 	adc.w	r3, r2, r3
 8005e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	663b      	str	r3, [r7, #96]	; 0x60
 8005e64:	667a      	str	r2, [r7, #100]	; 0x64
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e72:	4649      	mov	r1, r9
 8005e74:	008b      	lsls	r3, r1, #2
 8005e76:	4641      	mov	r1, r8
 8005e78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	008a      	lsls	r2, r1, #2
 8005e80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e84:	f7fa f9a0 	bl	80001c8 <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	2164      	movs	r1, #100	; 0x64
 8005e96:	fb01 f303 	mul.w	r3, r1, r3
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	3332      	adds	r3, #50	; 0x32
 8005ea0:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	f003 020f 	and.w	r2, r3, #15
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4422      	add	r2, r4
 8005eb4:	609a      	str	r2, [r3, #8]
}
 8005eb6:	bf00      	nop
 8005eb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec2:	bf00      	nop
 8005ec4:	51eb851f 	.word	0x51eb851f

08005ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ec8:	b084      	sub	sp, #16
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	f107 001c 	add.w	r0, r7, #28
 8005ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d122      	bne.n	8005f26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f9c0 	bl	80062a0 <USB_CoreReset>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
 8005f24:	e01a      	b.n	8005f5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9b4 	bl	80062a0 <USB_CoreReset>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f4e:	e005      	b.n	8005f5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d10b      	bne.n	8005f7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f043 0206 	orr.w	r2, r3, #6
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f86:	b004      	add	sp, #16
 8005f88:	4770      	bx	lr

08005f8a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f043 0201 	orr.w	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f023 0201 	bic.w	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d115      	bne.n	800601c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	f7fb f8ad 	bl	800115c <HAL_Delay>
      ms++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3301      	adds	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f93a 	bl	8006282 <USB_GetMode>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d01e      	beq.n	8006052 <USB_SetCurrentMode+0x84>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b31      	cmp	r3, #49	; 0x31
 8006018:	d9f0      	bls.n	8005ffc <USB_SetCurrentMode+0x2e>
 800601a:	e01a      	b.n	8006052 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d115      	bne.n	800604e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800602e:	2001      	movs	r0, #1
 8006030:	f7fb f894 	bl	800115c <HAL_Delay>
      ms++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f921 	bl	8006282 <USB_GetMode>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <USB_SetCurrentMode+0x84>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b31      	cmp	r3, #49	; 0x31
 800604a:	d9f0      	bls.n	800602e <USB_SetCurrentMode+0x60>
 800604c:	e001      	b.n	8006052 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e005      	b.n	800605e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b32      	cmp	r3, #50	; 0x32
 8006056:	d101      	bne.n	800605c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e000      	b.n	800605e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3301      	adds	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4a13      	ldr	r2, [pc, #76]	; (80060cc <USB_FlushTxFifo+0x64>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d901      	bls.n	8006088 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e01b      	b.n	80060c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	daf2      	bge.n	8006076 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	019b      	lsls	r3, r3, #6
 8006098:	f043 0220 	orr.w	r2, r3, #32
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a08      	ldr	r2, [pc, #32]	; (80060cc <USB_FlushTxFifo+0x64>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e006      	b.n	80060c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d0f0      	beq.n	80060a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	00030d40 	.word	0x00030d40

080060d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a11      	ldr	r2, [pc, #68]	; (800612c <USB_FlushRxFifo+0x5c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e018      	b.n	8006120 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	daf2      	bge.n	80060dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2210      	movs	r2, #16
 80060fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a08      	ldr	r2, [pc, #32]	; (800612c <USB_FlushRxFifo+0x5c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d901      	bls.n	8006112 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e006      	b.n	8006120 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b10      	cmp	r3, #16
 800611c:	d0f0      	beq.n	8006100 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	00030d40 	.word	0x00030d40

08006130 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006130:	b480      	push	{r7}
 8006132:	b089      	sub	sp, #36	; 0x24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	460b      	mov	r3, r1
 8006140:	71fb      	strb	r3, [r7, #7]
 8006142:	4613      	mov	r3, r2
 8006144:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800614e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006152:	2b00      	cmp	r3, #0
 8006154:	d123      	bne.n	800619e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006156:	88bb      	ldrh	r3, [r7, #4]
 8006158:	3303      	adds	r3, #3
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800615e:	2300      	movs	r3, #0
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	e018      	b.n	8006196 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	031a      	lsls	r2, r3, #12
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4413      	add	r3, r2
 800616c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006170:	461a      	mov	r2, r3
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	3301      	adds	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3301      	adds	r3, #1
 8006182:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	3301      	adds	r3, #1
 8006188:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	3301      	adds	r3, #1
 800618e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	3301      	adds	r3, #1
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	429a      	cmp	r2, r3
 800619c:	d3e2      	bcc.n	8006164 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3724      	adds	r7, #36	; 0x24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b08b      	sub	sp, #44	; 0x2c
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	089b      	lsrs	r3, r3, #2
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061d2:	2300      	movs	r3, #0
 80061d4:	623b      	str	r3, [r7, #32]
 80061d6:	e014      	b.n	8006202 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	3301      	adds	r3, #1
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	3301      	adds	r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	3301      	adds	r3, #1
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	3301      	adds	r3, #1
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	3301      	adds	r3, #1
 8006200:	623b      	str	r3, [r7, #32]
 8006202:	6a3a      	ldr	r2, [r7, #32]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	429a      	cmp	r2, r3
 8006208:	d3e6      	bcc.n	80061d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800620a:	8bfb      	ldrh	r3, [r7, #30]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01e      	beq.n	800624e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621a:	461a      	mov	r2, r3
 800621c:	f107 0310 	add.w	r3, r7, #16
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	fa22 f303 	lsr.w	r3, r2, r3
 8006230:	b2da      	uxtb	r2, r3
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	701a      	strb	r2, [r3, #0]
      i++;
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	3301      	adds	r3, #1
 800623a:	623b      	str	r3, [r7, #32]
      pDest++;
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	3301      	adds	r3, #1
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006242:	8bfb      	ldrh	r3, [r7, #30]
 8006244:	3b01      	subs	r3, #1
 8006246:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006248:	8bfb      	ldrh	r3, [r7, #30]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1ea      	bne.n	8006224 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006250:	4618      	mov	r0, r3
 8006252:	372c      	adds	r7, #44	; 0x2c
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4013      	ands	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006274:	68fb      	ldr	r3, [r7, #12]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0301 	and.w	r3, r3, #1
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4a13      	ldr	r2, [pc, #76]	; (8006304 <USB_CoreReset+0x64>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e01b      	b.n	80062f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	daf2      	bge.n	80062ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f043 0201 	orr.w	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <USB_CoreReset+0x64>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e006      	b.n	80062f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d0f0      	beq.n	80062d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	00030d40 	.word	0x00030d40

08006308 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006308:	b084      	sub	sp, #16
 800630a:	b580      	push	{r7, lr}
 800630c:	b086      	sub	sp, #24
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d018      	beq.n	8006390 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d10a      	bne.n	800637a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006372:	f043 0304 	orr.w	r3, r3, #4
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e014      	b.n	80063a4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006388:	f023 0304 	bic.w	r3, r3, #4
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e009      	b.n	80063a4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800639e:	f023 0304 	bic.w	r3, r3, #4
 80063a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063a4:	2110      	movs	r1, #16
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fe5e 	bl	8006068 <USB_FlushTxFifo>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fe8a 	bl	80060d0 <USB_FlushRxFifo>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	e015      	b.n	80063f8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d8:	461a      	mov	r2, r3
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ec:	461a      	mov	r2, r3
 80063ee:	2300      	movs	r3, #0
 80063f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3301      	adds	r3, #1
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d3e5      	bcc.n	80063cc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f04f 32ff 	mov.w	r2, #4294967295
 800640c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00b      	beq.n	8006432 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006420:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a13      	ldr	r2, [pc, #76]	; (8006474 <USB_HostInit+0x16c>)
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a13      	ldr	r2, [pc, #76]	; (8006478 <USB_HostInit+0x170>)
 800642c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006430:	e009      	b.n	8006446 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2280      	movs	r2, #128	; 0x80
 8006436:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a10      	ldr	r2, [pc, #64]	; (800647c <USB_HostInit+0x174>)
 800643c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a0f      	ldr	r2, [pc, #60]	; (8006480 <USB_HostInit+0x178>)
 8006442:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	2b00      	cmp	r3, #0
 800644a:	d105      	bne.n	8006458 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f043 0210 	orr.w	r2, r3, #16
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <USB_HostInit+0x17c>)
 800645e:	4313      	orrs	r3, r2
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006464:	7dfb      	ldrb	r3, [r7, #23]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006470:	b004      	add	sp, #16
 8006472:	4770      	bx	lr
 8006474:	01000200 	.word	0x01000200
 8006478:	00e00300 	.word	0x00e00300
 800647c:	00600080 	.word	0x00600080
 8006480:	004000e0 	.word	0x004000e0
 8006484:	a3200008 	.word	0xa3200008

08006488 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064a6:	f023 0303 	bic.w	r3, r3, #3
 80064aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064c0:	4313      	orrs	r3, r2
 80064c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d107      	bne.n	80064da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d0:	461a      	mov	r2, r3
 80064d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80064d6:	6053      	str	r3, [r2, #4]
 80064d8:	e009      	b.n	80064ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d106      	bne.n	80064ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e6:	461a      	mov	r2, r3
 80064e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80064ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006520:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <USB_DriveVbus+0x44>
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d106      	bne.n	8006540 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800653a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800653e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654a:	d109      	bne.n	8006560 <USB_DriveVbus+0x64>
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800655a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800655e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	0c5b      	lsrs	r3, r3, #17
 800658c:	f003 0303 	and.w	r3, r3, #3
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	b29b      	uxth	r3, r3
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	4608      	mov	r0, r1
 80065ca:	4611      	mov	r1, r2
 80065cc:	461a      	mov	r2, r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	70fb      	strb	r3, [r7, #3]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70bb      	strb	r3, [r7, #2]
 80065d6:	4613      	mov	r3, r2
 80065d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ee:	461a      	mov	r2, r3
 80065f0:	f04f 33ff 	mov.w	r3, #4294967295
 80065f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80065f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d87e      	bhi.n	80066fc <USB_HC_Init+0x13c>
 80065fe:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <USB_HC_Init+0x44>)
 8006600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006604:	08006615 	.word	0x08006615
 8006608:	080066bf 	.word	0x080066bf
 800660c:	08006615 	.word	0x08006615
 8006610:	08006681 	.word	0x08006681
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	4413      	add	r3, r2
 800661c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006620:	461a      	mov	r2, r3
 8006622:	f240 439d 	movw	r3, #1181	; 0x49d
 8006626:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006628:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800662c:	2b00      	cmp	r3, #0
 800662e:	da10      	bge.n	8006652 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4413      	add	r3, r2
 8006638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	78fa      	ldrb	r2, [r7, #3]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	440a      	add	r2, r1
 8006646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800664a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006650:	e057      	b.n	8006702 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d051      	beq.n	8006702 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4413      	add	r3, r2
 8006666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	78fa      	ldrb	r2, [r7, #3]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	440a      	add	r2, r1
 8006674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006678:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800667c:	60d3      	str	r3, [r2, #12]
      break;
 800667e:	e040      	b.n	8006702 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668c:	461a      	mov	r2, r3
 800668e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006692:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006694:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006698:	2b00      	cmp	r3, #0
 800669a:	da34      	bge.n	8006706 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	0151      	lsls	r1, r2, #5
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	440a      	add	r2, r1
 80066b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80066bc:	e023      	b.n	8006706 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	461a      	mov	r2, r3
 80066cc:	f240 2325 	movw	r3, #549	; 0x225
 80066d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da17      	bge.n	800670a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80066f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80066fa:	e006      	b.n	800670a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	77fb      	strb	r3, [r7, #31]
      break;
 8006700:	e004      	b.n	800670c <USB_HC_Init+0x14c>
      break;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <USB_HC_Init+0x14c>
      break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <USB_HC_Init+0x14c>
      break;
 800670a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	78fa      	ldrb	r2, [r7, #3]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	440a      	add	r2, r1
 8006722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006726:	f043 0302 	orr.w	r3, r3, #2
 800672a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	2101      	movs	r1, #1
 800673c:	fa01 f303 	lsl.w	r3, r1, r3
 8006740:	6939      	ldr	r1, [r7, #16]
 8006742:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006746:	4313      	orrs	r3, r2
 8006748:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006756:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800675a:	2b00      	cmp	r3, #0
 800675c:	da03      	bge.n	8006766 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800675e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e001      	b.n	800676a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff feff 	bl	800656e <USB_GetHostSpeed>
 8006770:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006776:	2b02      	cmp	r3, #2
 8006778:	d106      	bne.n	8006788 <USB_HC_Init+0x1c8>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b02      	cmp	r3, #2
 800677e:	d003      	beq.n	8006788 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e001      	b.n	800678c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800678c:	787b      	ldrb	r3, [r7, #1]
 800678e:	059b      	lsls	r3, r3, #22
 8006790:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006794:	78bb      	ldrb	r3, [r7, #2]
 8006796:	02db      	lsls	r3, r3, #11
 8006798:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800679c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800679e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067a2:	049b      	lsls	r3, r3, #18
 80067a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80067ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	0159      	lsls	r1, r3, #5
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	440b      	add	r3, r1
 80067be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067c8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80067ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d003      	beq.n	80067da <USB_HC_Init+0x21a>
 80067d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d10f      	bne.n	80067fa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067f8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80067fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08c      	sub	sp, #48	; 0x30
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	4613      	mov	r3, r2
 8006810:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	785b      	ldrb	r3, [r3, #1]
 800681a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800681c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006820:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682a:	2b00      	cmp	r3, #0
 800682c:	d02d      	beq.n	800688a <USB_HC_StartXfer+0x86>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	791b      	ldrb	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d129      	bne.n	800688a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d117      	bne.n	800686c <USB_HC_StartXfer+0x68>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	79db      	ldrb	r3, [r3, #7]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <USB_HC_StartXfer+0x48>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	79db      	ldrb	r3, [r3, #7]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d10f      	bne.n	800686c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	6a3a      	ldr	r2, [r7, #32]
 8006860:	440a      	add	r2, r1
 8006862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10b      	bne.n	800688a <USB_HC_StartXfer+0x86>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	795b      	ldrb	r3, [r3, #5]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d107      	bne.n	800688a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	4619      	mov	r1, r3
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fa0f 	bl	8006ca4 <USB_DoPing>
      return HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	e0f8      	b.n	8006a7c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d018      	beq.n	80068c4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	8912      	ldrh	r2, [r2, #8]
 800689a:	4413      	add	r3, r2
 800689c:	3b01      	subs	r3, #1
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	8912      	ldrh	r2, [r2, #8]
 80068a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068a6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80068a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80068aa:	8b7b      	ldrh	r3, [r7, #26]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d90b      	bls.n	80068c8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80068b0:	8b7b      	ldrh	r3, [r7, #26]
 80068b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	8912      	ldrh	r2, [r2, #8]
 80068ba:	fb03 f202 	mul.w	r2, r3, r2
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	611a      	str	r2, [r3, #16]
 80068c2:	e001      	b.n	80068c8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80068c4:	2301      	movs	r3, #1
 80068c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	78db      	ldrb	r3, [r3, #3]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	8912      	ldrh	r2, [r2, #8]
 80068d6:	fb03 f202 	mul.w	r2, r3, r2
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	611a      	str	r2, [r3, #16]
 80068de:	e003      	b.n	80068e8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	695a      	ldr	r2, [r3, #20]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068f2:	04d9      	lsls	r1, r3, #19
 80068f4:	4b63      	ldr	r3, [pc, #396]	; (8006a84 <USB_HC_StartXfer+0x280>)
 80068f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	7a9b      	ldrb	r3, [r3, #10]
 80068fe:	075b      	lsls	r3, r3, #29
 8006900:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006904:	69f9      	ldr	r1, [r7, #28]
 8006906:	0148      	lsls	r0, r1, #5
 8006908:	6a39      	ldr	r1, [r7, #32]
 800690a:	4401      	add	r1, r0
 800690c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006910:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006912:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	68d9      	ldr	r1, [r3, #12]
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	460a      	mov	r2, r1
 800692c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	bf0c      	ite	eq
 800693e:	2301      	moveq	r3, #1
 8006940:	2300      	movne	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	6a3a      	ldr	r2, [r7, #32]
 800695a:	440a      	add	r2, r1
 800695c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006960:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006964:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	7e7b      	ldrb	r3, [r7, #25]
 8006976:	075b      	lsls	r3, r3, #29
 8006978:	69f9      	ldr	r1, [r7, #28]
 800697a:	0148      	lsls	r0, r1, #5
 800697c:	6a39      	ldr	r1, [r7, #32]
 800697e:	4401      	add	r1, r0
 8006980:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006984:	4313      	orrs	r3, r2
 8006986:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	4413      	add	r3, r2
 8006990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800699e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	78db      	ldrb	r3, [r3, #3]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	e003      	b.n	80069ba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069b8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069c0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	461a      	mov	r2, r3
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e04e      	b.n	8006a7c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	78db      	ldrb	r3, [r3, #3]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d149      	bne.n	8006a7a <USB_HC_StartXfer+0x276>
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d045      	beq.n	8006a7a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	79db      	ldrb	r3, [r3, #7]
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d830      	bhi.n	8006a58 <USB_HC_StartXfer+0x254>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <USB_HC_StartXfer+0x1f8>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a0d 	.word	0x08006a0d
 8006a00:	08006a31 	.word	0x08006a31
 8006a04:	08006a0d 	.word	0x08006a0d
 8006a08:	08006a31 	.word	0x08006a31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	3303      	adds	r3, #3
 8006a12:	089b      	lsrs	r3, r3, #2
 8006a14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006a16:	8afa      	ldrh	r2, [r7, #22]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d91c      	bls.n	8006a5c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a2e:	e015      	b.n	8006a5c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	3303      	adds	r3, #3
 8006a36:	089b      	lsrs	r3, r3, #2
 8006a38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006a3a:	8afa      	ldrh	r2, [r7, #22]
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d90a      	bls.n	8006a60 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a56:	e003      	b.n	8006a60 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006a58:	bf00      	nop
 8006a5a:	e002      	b.n	8006a62 <USB_HC_StartXfer+0x25e>
        break;
 8006a5c:	bf00      	nop
 8006a5e:	e000      	b.n	8006a62 <USB_HC_StartXfer+0x25e>
        break;
 8006a60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	68d9      	ldr	r1, [r3, #12]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	785a      	ldrb	r2, [r3, #1]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2000      	movs	r0, #0
 8006a72:	9000      	str	r0, [sp, #0]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7ff fb5b 	bl	8006130 <USB_WritePacket>
  }

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3728      	adds	r7, #40	; 0x28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	1ff80000 	.word	0x1ff80000

08006a88 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	b29b      	uxth	r3, r3
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b089      	sub	sp, #36	; 0x24
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	0c9b      	lsrs	r3, r3, #18
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	0fdb      	lsrs	r3, r3, #31
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d104      	bne.n	8006b04 <USB_HC_Halt+0x5a>
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e0c8      	b.n	8006c96 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <USB_HC_Halt+0x66>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d163      	bne.n	8006bd8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b2e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 80ab 	bne.w	8006c94 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d133      	bne.n	8006bb2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b68:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b88:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b96:	d81d      	bhi.n	8006bd4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bae:	d0ec      	beq.n	8006b8a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bb0:	e070      	b.n	8006c94 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bd0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bd2:	e05f      	b.n	8006c94 <USB_HC_Halt+0x1ea>
            break;
 8006bd4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bd6:	e05d      	b.n	8006c94 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d133      	bne.n	8006c70 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	0151      	lsls	r1, r2, #5
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	440a      	add	r2, r1
 8006c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c26:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c46:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c54:	d81d      	bhi.n	8006c92 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c6c:	d0ec      	beq.n	8006c48 <USB_HC_Halt+0x19e>
 8006c6e:	e011      	b.n	8006c94 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e000      	b.n	8006c94 <USB_HC_Halt+0x1ea>
          break;
 8006c92:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3724      	adds	r7, #36	; 0x24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	04da      	lsls	r2, r3, #19
 8006cc0:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <USB_DoPing+0x74>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cd4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cf4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d02:	461a      	mov	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	1ff80000 	.word	0x1ff80000

08006d1c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff f93b 	bl	8005fac <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d36:	2110      	movs	r1, #16
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff f995 	bl	8006068 <USB_FlushTxFifo>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff f9c1 	bl	80060d0 <USB_FlushRxFifo>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	e01f      	b.n	8006d9e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d92:	461a      	mov	r2, r3
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b0f      	cmp	r3, #15
 8006da2:	d9dc      	bls.n	8006d5e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006da4:	2300      	movs	r3, #0
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	e034      	b.n	8006e14 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dc0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dc8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dd0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dde:	461a      	mov	r2, r3
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006df0:	d80c      	bhi.n	8006e0c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e08:	d0ec      	beq.n	8006de4 <USB_StopHost+0xc8>
 8006e0a:	e000      	b.n	8006e0e <USB_StopHost+0xf2>
        break;
 8006e0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	3301      	adds	r3, #1
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d9c7      	bls.n	8006daa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e20:	461a      	mov	r2, r3
 8006e22:	f04f 33ff 	mov.w	r3, #4294967295
 8006e26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff f8aa 	bl	8005f8a <USB_EnableGlobalInt>

  return ret;
 8006e36:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b089      	sub	sp, #36	; 0x24
 8006e44:	af04      	add	r7, sp, #16
 8006e46:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006e48:	2301      	movs	r3, #1
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fc66 	bl	8007720 <USBH_FindInterface>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	2bff      	cmp	r3, #255	; 0xff
 8006e5c:	d002      	beq.n	8006e64 <USBH_CDC_InterfaceInit+0x24>
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d901      	bls.n	8006e68 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e64:	2302      	movs	r3, #2
 8006e66:	e13d      	b.n	80070e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fc3b 	bl	80076e8 <USBH_SelectInterface>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e131      	b.n	80070e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006e86:	2050      	movs	r0, #80	; 0x50
 8006e88:	f001 fb12 	bl	80084b0 <malloc>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e11f      	b.n	80070e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006ea4:	2250      	movs	r2, #80	; 0x50
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	68b8      	ldr	r0, [r7, #8]
 8006eaa:	f001 fb11 	bl	80084d0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	211a      	movs	r1, #26
 8006eb4:	fb01 f303 	mul.w	r3, r1, r3
 8006eb8:	4413      	add	r3, r2
 8006eba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	b25b      	sxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da15      	bge.n	8006ef2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	211a      	movs	r1, #26
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	211a      	movs	r1, #26
 8006ee2:	fb01 f303 	mul.w	r3, r1, r3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006eec:	881a      	ldrh	r2, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 ff9c 	bl	8007e36 <USBH_AllocPipe>
 8006efe:	4603      	mov	r3, r0
 8006f00:	461a      	mov	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	7819      	ldrb	r1, [r3, #0]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	7858      	ldrb	r0, [r3, #1]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	8952      	ldrh	r2, [r2, #10]
 8006f1e:	9202      	str	r2, [sp, #8]
 8006f20:	2203      	movs	r2, #3
 8006f22:	9201      	str	r2, [sp, #4]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	4623      	mov	r3, r4
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 ff54 	bl	8007dd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	2200      	movs	r2, #0
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fa17 	bl	800836c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2200      	movs	r2, #0
 8006f42:	210a      	movs	r1, #10
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fbeb 	bl	8007720 <USBH_FindInterface>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	2bff      	cmp	r3, #255	; 0xff
 8006f52:	d002      	beq.n	8006f5a <USBH_CDC_InterfaceInit+0x11a>
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d901      	bls.n	8006f5e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e0c2      	b.n	80070e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	211a      	movs	r1, #26
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	4413      	add	r3, r2
 8006f6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b25b      	sxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da16      	bge.n	8006fa4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	211a      	movs	r1, #26
 8006f7c:	fb01 f303 	mul.w	r3, r1, r3
 8006f80:	4413      	add	r3, r2
 8006f82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f86:	781a      	ldrb	r2, [r3, #0]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	211a      	movs	r1, #26
 8006f92:	fb01 f303 	mul.w	r3, r1, r3
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f9c:	881a      	ldrh	r2, [r3, #0]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	835a      	strh	r2, [r3, #26]
 8006fa2:	e015      	b.n	8006fd0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	211a      	movs	r1, #26
 8006faa:	fb01 f303 	mul.w	r3, r1, r3
 8006fae:	4413      	add	r3, r2
 8006fb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	211a      	movs	r1, #26
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006fca:	881a      	ldrh	r2, [r3, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	211a      	movs	r1, #26
 8006fd6:	fb01 f303 	mul.w	r3, r1, r3
 8006fda:	4413      	add	r3, r2
 8006fdc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	b25b      	sxtb	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	da16      	bge.n	8007016 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	211a      	movs	r1, #26
 8006fee:	fb01 f303 	mul.w	r3, r1, r3
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ff8:	781a      	ldrb	r2, [r3, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	211a      	movs	r1, #26
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	4413      	add	r3, r2
 800700a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800700e:	881a      	ldrh	r2, [r3, #0]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	835a      	strh	r2, [r3, #26]
 8007014:	e015      	b.n	8007042 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	211a      	movs	r1, #26
 800701c:	fb01 f303 	mul.w	r3, r1, r3
 8007020:	4413      	add	r3, r2
 8007022:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	211a      	movs	r1, #26
 8007032:	fb01 f303 	mul.w	r3, r1, r3
 8007036:	4413      	add	r3, r2
 8007038:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800703c:	881a      	ldrh	r2, [r3, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	7b9b      	ldrb	r3, [r3, #14]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fef4 	bl	8007e36 <USBH_AllocPipe>
 800704e:	4603      	mov	r3, r0
 8007050:	461a      	mov	r2, r3
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	7bdb      	ldrb	r3, [r3, #15]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 feea 	bl	8007e36 <USBH_AllocPipe>
 8007062:	4603      	mov	r3, r0
 8007064:	461a      	mov	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	7b59      	ldrb	r1, [r3, #13]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	7b98      	ldrb	r0, [r3, #14]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	8b12      	ldrh	r2, [r2, #24]
 8007082:	9202      	str	r2, [sp, #8]
 8007084:	2202      	movs	r2, #2
 8007086:	9201      	str	r2, [sp, #4]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	4623      	mov	r3, r4
 800708c:	4602      	mov	r2, r0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fea2 	bl	8007dd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	7b19      	ldrb	r1, [r3, #12]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	7bd8      	ldrb	r0, [r3, #15]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	8b52      	ldrh	r2, [r2, #26]
 80070ac:	9202      	str	r2, [sp, #8]
 80070ae:	2202      	movs	r2, #2
 80070b0:	9201      	str	r2, [sp, #4]
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	4623      	mov	r3, r4
 80070b6:	4602      	mov	r2, r0
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fe8d 	bl	8007dd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	7b5b      	ldrb	r3, [r3, #13]
 80070ca:	2200      	movs	r2, #0
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 f94c 	bl	800836c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	7b1b      	ldrb	r3, [r3, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f945 	bl	800836c <USBH_LL_SetToggle>

  return USBH_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd90      	pop	{r4, r7, pc}

080070ec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00e      	beq.n	8007124 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fe82 	bl	8007e16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fead 	bl	8007e78 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	7b1b      	ldrb	r3, [r3, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	7b1b      	ldrb	r3, [r3, #12]
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fe6f 	bl	8007e16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	7b1b      	ldrb	r3, [r3, #12]
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fe9a 	bl	8007e78 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	7b5b      	ldrb	r3, [r3, #13]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00e      	beq.n	8007170 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	7b5b      	ldrb	r3, [r3, #13]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fe5c 	bl	8007e16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	7b5b      	ldrb	r3, [r3, #13]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fe87 	bl	8007e78 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	4618      	mov	r0, r3
 8007186:	f001 f99b 	bl	80084c0 <free>
    phost->pActiveClass->pData = 0U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007190:	2200      	movs	r2, #0
 8007192:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3340      	adds	r3, #64	; 0x40
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f8b1 	bl	800731e <GetLineCoding>
 80071bc:	4603      	mov	r3, r0
 80071be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d105      	bne.n	80071d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071cc:	2102      	movs	r1, #2
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80071d2:	7afb      	ldrb	r3, [r7, #11]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d877      	bhi.n	80072f0 <USBH_CDC_Process+0x114>
 8007200:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <USBH_CDC_Process+0x2c>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	0800721d 	.word	0x0800721d
 800720c:	08007223 	.word	0x08007223
 8007210:	08007253 	.word	0x08007253
 8007214:	080072c7 	.word	0x080072c7
 8007218:	080072d5 	.word	0x080072d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	73fb      	strb	r3, [r7, #15]
      break;
 8007220:	e06d      	b.n	80072fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f897 	bl	800735c <SetLineCoding>
 800722e:	4603      	mov	r3, r0
 8007230:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007240:	e058      	b.n	80072f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d055      	beq.n	80072f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2204      	movs	r2, #4
 800724c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007250:	e050      	b.n	80072f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	3340      	adds	r3, #64	; 0x40
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f860 	bl	800731e <GetLineCoding>
 800725e:	4603      	mov	r3, r0
 8007260:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d126      	bne.n	80072b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800727a:	791b      	ldrb	r3, [r3, #4]
 800727c:	429a      	cmp	r2, r3
 800727e:	d13b      	bne.n	80072f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800728c:	429a      	cmp	r2, r3
 800728e:	d133      	bne.n	80072f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800729c:	429a      	cmp	r2, r3
 800729e:	d12b      	bne.n	80072f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d124      	bne.n	80072f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f958 	bl	8007564 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072b4:	e020      	b.n	80072f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d01d      	beq.n	80072f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2204      	movs	r2, #4
 80072c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80072c4:	e018      	b.n	80072f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f867 	bl	800739a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f8da 	bl	8007486 <CDC_ProcessReception>
      break;
 80072d2:	e014      	b.n	80072fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80072d4:	2100      	movs	r1, #0
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fb08 	bl	80078ec <USBH_ClrFeature>
 80072dc:	4603      	mov	r3, r0
 80072de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80072ee:	e005      	b.n	80072fc <USBH_CDC_Process+0x120>

    default:
      break;
 80072f0:	bf00      	nop
 80072f2:	e004      	b.n	80072fe <USBH_CDC_Process+0x122>
      break;
 80072f4:	bf00      	nop
 80072f6:	e002      	b.n	80072fe <USBH_CDC_Process+0x122>
      break;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <USBH_CDC_Process+0x122>
      break;
 80072fc:	bf00      	nop

  }

  return status;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	22a1      	movs	r2, #161	; 0xa1
 800732c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2221      	movs	r2, #33	; 0x21
 8007332:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2207      	movs	r2, #7
 8007344:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2207      	movs	r2, #7
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 faf1 	bl	8007934 <USBH_CtlReq>
 8007352:	4603      	mov	r3, r0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2221      	movs	r2, #33	; 0x21
 800736a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2207      	movs	r2, #7
 8007382:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2207      	movs	r2, #7
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fad2 	bl	8007934 <USBH_CtlReq>
 8007390:	4603      	mov	r3, r0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b086      	sub	sp, #24
 800739e:	af02      	add	r7, sp, #8
 80073a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073ac:	2300      	movs	r3, #0
 80073ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d002      	beq.n	80073c0 <CDC_ProcessTransmission+0x26>
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d023      	beq.n	8007406 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80073be:	e05e      	b.n	800747e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	8b12      	ldrh	r2, [r2, #24]
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d90b      	bls.n	80073e4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	69d9      	ldr	r1, [r3, #28]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8b1a      	ldrh	r2, [r3, #24]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	7b5b      	ldrb	r3, [r3, #13]
 80073d8:	2001      	movs	r0, #1
 80073da:	9000      	str	r0, [sp, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fcb8 	bl	8007d52 <USBH_BulkSendData>
 80073e2:	e00b      	b.n	80073fc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	7b5b      	ldrb	r3, [r3, #13]
 80073f2:	2001      	movs	r0, #1
 80073f4:	9000      	str	r0, [sp, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fcab 	bl	8007d52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007404:	e03b      	b.n	800747e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	7b5b      	ldrb	r3, [r3, #13]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 ff83 	bl	8008318 <USBH_LL_GetURBState>
 8007412:	4603      	mov	r3, r0
 8007414:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007416:	7afb      	ldrb	r3, [r7, #11]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d128      	bne.n	800746e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	8b12      	ldrh	r2, [r2, #24]
 8007424:	4293      	cmp	r3, r2
 8007426:	d90e      	bls.n	8007446 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	8b12      	ldrh	r2, [r2, #24]
 8007430:	1a9a      	subs	r2, r3, r2
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	8b12      	ldrh	r2, [r2, #24]
 800743e:	441a      	add	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	61da      	str	r2, [r3, #28]
 8007444:	e002      	b.n	800744c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800745c:	e00e      	b.n	800747c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f868 	bl	800753c <USBH_CDC_TransmitCallback>
      break;
 800746c:	e006      	b.n	800747c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800746e:	7afb      	ldrb	r3, [r7, #11]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d103      	bne.n	800747c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800747c:	bf00      	nop
  }
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b086      	sub	sp, #24
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007498:	2300      	movs	r3, #0
 800749a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d002      	beq.n	80074ac <CDC_ProcessReception+0x26>
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d00e      	beq.n	80074c8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80074aa:	e043      	b.n	8007534 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	6a19      	ldr	r1, [r3, #32]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	8b5a      	ldrh	r2, [r3, #26]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	7b1b      	ldrb	r3, [r3, #12]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fc6f 	bl	8007d9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2204      	movs	r2, #4
 80074c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80074c6:	e035      	b.n	8007534 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	7b1b      	ldrb	r3, [r3, #12]
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 ff22 	bl	8008318 <USBH_LL_GetURBState>
 80074d4:	4603      	mov	r3, r0
 80074d6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d129      	bne.n	8007532 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	7b1b      	ldrb	r3, [r3, #12]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fe85 	bl	80081f4 <USBH_LL_GetLastXferSize>
 80074ea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d016      	beq.n	8007524 <CDC_ProcessReception+0x9e>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	8b5b      	ldrh	r3, [r3, #26]
 80074fa:	461a      	mov	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4293      	cmp	r3, r2
 8007500:	d910      	bls.n	8007524 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	1ad2      	subs	r2, r2, r3
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	6a1a      	ldr	r2, [r3, #32]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	441a      	add	r2, r3
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2203      	movs	r2, #3
 800751e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007522:	e006      	b.n	8007532 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f80f 	bl	8007550 <USBH_CDC_ReceiveCallback>
      break;
 8007532:	bf00      	nop
  }
}
 8007534:	bf00      	nop
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800758c:	2302      	movs	r3, #2
 800758e:	e029      	b.n	80075e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	79fa      	ldrb	r2, [r7, #7]
 8007594:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f81f 	bl	80075ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 fd97 	bl	8008110 <USBH_LL_Init>

  return USBH_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	e009      	b.n	8007612 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	33e0      	adds	r3, #224	; 0xe0
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	2200      	movs	r2, #0
 800760a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b0f      	cmp	r3, #15
 8007616:	d9f2      	bls.n	80075fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e009      	b.n	8007632 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007638:	d3f1      	bcc.n	800761e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2240      	movs	r2, #64	; 0x40
 800765e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d016      	beq.n	80076d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10e      	bne.n	80076d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80076b8:	1c59      	adds	r1, r3, #1
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	33de      	adds	r3, #222	; 0xde
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
 80076ce:	e004      	b.n	80076da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80076d0:	2302      	movs	r3, #2
 80076d2:	73fb      	strb	r3, [r7, #15]
 80076d4:	e001      	b.n	80076da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80076d6:	2302      	movs	r3, #2
 80076d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	429a      	cmp	r2, r3
 8007702:	d204      	bcs.n	800770e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	78fa      	ldrb	r2, [r7, #3]
 8007708:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800770c:	e001      	b.n	8007712 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800770e:	2302      	movs	r3, #2
 8007710:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007712:	7bfb      	ldrb	r3, [r7, #15]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	4608      	mov	r0, r1
 800772a:	4611      	mov	r1, r2
 800772c:	461a      	mov	r2, r3
 800772e:	4603      	mov	r3, r0
 8007730:	70fb      	strb	r3, [r7, #3]
 8007732:	460b      	mov	r3, r1
 8007734:	70bb      	strb	r3, [r7, #2]
 8007736:	4613      	mov	r3, r2
 8007738:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007748:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800774a:	e025      	b.n	8007798 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	221a      	movs	r2, #26
 8007750:	fb02 f303 	mul.w	r3, r2, r3
 8007754:	3308      	adds	r3, #8
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	3302      	adds	r3, #2
 800775c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	795b      	ldrb	r3, [r3, #5]
 8007762:	78fa      	ldrb	r2, [r7, #3]
 8007764:	429a      	cmp	r2, r3
 8007766:	d002      	beq.n	800776e <USBH_FindInterface+0x4e>
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	2bff      	cmp	r3, #255	; 0xff
 800776c:	d111      	bne.n	8007792 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007772:	78ba      	ldrb	r2, [r7, #2]
 8007774:	429a      	cmp	r2, r3
 8007776:	d002      	beq.n	800777e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007778:	78bb      	ldrb	r3, [r7, #2]
 800777a:	2bff      	cmp	r3, #255	; 0xff
 800777c:	d109      	bne.n	8007792 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007782:	787a      	ldrb	r2, [r7, #1]
 8007784:	429a      	cmp	r2, r3
 8007786:	d002      	beq.n	800778e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007788:	787b      	ldrb	r3, [r7, #1]
 800778a:	2bff      	cmp	r3, #255	; 0xff
 800778c:	d101      	bne.n	8007792 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	e006      	b.n	80077a0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	3301      	adds	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d9d6      	bls.n	800774c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800779e:	23ff      	movs	r3, #255	; 0xff
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	371c      	adds	r7, #28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fce7 	bl	8008188 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80077ba:	2101      	movs	r1, #1
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fdbe 	bl	800833e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f804 	bl	800780e <USBH_HandleSof>
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b0b      	cmp	r3, #11
 800781e:	d10a      	bne.n	8007836 <USBH_HandleSof+0x28>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
  }
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800784e:	bf00      	nop
}
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800786a:	bf00      	nop
}
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fc7a 	bl	80081be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	791b      	ldrb	r3, [r3, #4]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fad1 	bl	8007e78 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	795b      	ldrb	r3, [r3, #5]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 facb 	bl	8007e78 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	789b      	ldrb	r3, [r3, #2]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d10f      	bne.n	8007920 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007920:	2200      	movs	r2, #0
 8007922:	2100      	movs	r1, #0
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f805 	bl	8007934 <USBH_CtlReq>
 800792a:	4603      	mov	r3, r0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007942:	2301      	movs	r3, #1
 8007944:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	789b      	ldrb	r3, [r3, #2]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d002      	beq.n	8007954 <USBH_CtlReq+0x20>
 800794e:	2b02      	cmp	r3, #2
 8007950:	d00f      	beq.n	8007972 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007952:	e027      	b.n	80079a4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	88fa      	ldrh	r2, [r7, #6]
 800795e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2202      	movs	r2, #2
 800796a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800796c:	2301      	movs	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
      break;
 8007970:	e018      	b.n	80079a4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 f81c 	bl	80079b0 <USBH_HandleControl>
 8007978:	4603      	mov	r3, r0
 800797a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <USBH_CtlReq+0x54>
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d106      	bne.n	8007996 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	761a      	strb	r2, [r3, #24]
      break;
 8007994:	e005      	b.n	80079a2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d102      	bne.n	80079a2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	709a      	strb	r2, [r3, #2]
      break;
 80079a2:	bf00      	nop
  }
  return status;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80079b8:	2301      	movs	r3, #1
 80079ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079bc:	2300      	movs	r3, #0
 80079be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	7e1b      	ldrb	r3, [r3, #24]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	2b0a      	cmp	r3, #10
 80079c8:	f200 8156 	bhi.w	8007c78 <USBH_HandleControl+0x2c8>
 80079cc:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <USBH_HandleControl+0x24>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	08007a01 	.word	0x08007a01
 80079d8:	08007a1b 	.word	0x08007a1b
 80079dc:	08007a85 	.word	0x08007a85
 80079e0:	08007aab 	.word	0x08007aab
 80079e4:	08007ae3 	.word	0x08007ae3
 80079e8:	08007b0d 	.word	0x08007b0d
 80079ec:	08007b5f 	.word	0x08007b5f
 80079f0:	08007b81 	.word	0x08007b81
 80079f4:	08007bbd 	.word	0x08007bbd
 80079f8:	08007be3 	.word	0x08007be3
 80079fc:	08007c21 	.word	0x08007c21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f103 0110 	add.w	r1, r3, #16
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	795b      	ldrb	r3, [r3, #5]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f943 	bl	8007c98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2202      	movs	r2, #2
 8007a16:	761a      	strb	r2, [r3, #24]
      break;
 8007a18:	e139      	b.n	8007c8e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	795b      	ldrb	r3, [r3, #5]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fc79 	bl	8008318 <USBH_LL_GetURBState>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d11e      	bne.n	8007a6e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7c1b      	ldrb	r3, [r3, #16]
 8007a34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	8adb      	ldrh	r3, [r3, #22]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a42:	7b7b      	ldrb	r3, [r7, #13]
 8007a44:	2b80      	cmp	r3, #128	; 0x80
 8007a46:	d103      	bne.n	8007a50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a4e:	e115      	b.n	8007c7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2205      	movs	r2, #5
 8007a54:	761a      	strb	r2, [r3, #24]
      break;
 8007a56:	e111      	b.n	8007c7c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007a58:	7b7b      	ldrb	r3, [r7, #13]
 8007a5a:	2b80      	cmp	r3, #128	; 0x80
 8007a5c:	d103      	bne.n	8007a66 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2209      	movs	r2, #9
 8007a62:	761a      	strb	r2, [r3, #24]
      break;
 8007a64:	e10a      	b.n	8007c7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2207      	movs	r2, #7
 8007a6a:	761a      	strb	r2, [r3, #24]
      break;
 8007a6c:	e106      	b.n	8007c7c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d003      	beq.n	8007a7c <USBH_HandleControl+0xcc>
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	f040 8100 	bne.w	8007c7c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	220b      	movs	r2, #11
 8007a80:	761a      	strb	r2, [r3, #24]
      break;
 8007a82:	e0fb      	b.n	8007c7c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6899      	ldr	r1, [r3, #8]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	899a      	ldrh	r2, [r3, #12]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	791b      	ldrb	r3, [r3, #4]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f93a 	bl	8007d16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2204      	movs	r2, #4
 8007aa6:	761a      	strb	r2, [r3, #24]
      break;
 8007aa8:	e0f1      	b.n	8007c8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	791b      	ldrb	r3, [r3, #4]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fc31 	bl	8008318 <USBH_LL_GetURBState>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d102      	bne.n	8007ac6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2209      	movs	r2, #9
 8007ac4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b05      	cmp	r3, #5
 8007aca:	d102      	bne.n	8007ad2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007acc:	2303      	movs	r3, #3
 8007ace:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ad0:	e0d6      	b.n	8007c80 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	f040 80d3 	bne.w	8007c80 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	220b      	movs	r2, #11
 8007ade:	761a      	strb	r2, [r3, #24]
      break;
 8007ae0:	e0ce      	b.n	8007c80 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6899      	ldr	r1, [r3, #8]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	899a      	ldrh	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	795b      	ldrb	r3, [r3, #5]
 8007aee:	2001      	movs	r0, #1
 8007af0:	9000      	str	r0, [sp, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8ea 	bl	8007ccc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2206      	movs	r2, #6
 8007b08:	761a      	strb	r2, [r3, #24]
      break;
 8007b0a:	e0c0      	b.n	8007c8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	795b      	ldrb	r3, [r3, #5]
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fc00 	bl	8008318 <USBH_LL_GetURBState>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d103      	bne.n	8007b2a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2207      	movs	r2, #7
 8007b26:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b28:	e0ac      	b.n	8007c84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b05      	cmp	r3, #5
 8007b2e:	d105      	bne.n	8007b3c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	220c      	movs	r2, #12
 8007b34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007b36:	2303      	movs	r3, #3
 8007b38:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3a:	e0a3      	b.n	8007c84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d103      	bne.n	8007b4a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2205      	movs	r2, #5
 8007b46:	761a      	strb	r2, [r3, #24]
      break;
 8007b48:	e09c      	b.n	8007c84 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	f040 8099 	bne.w	8007c84 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	220b      	movs	r2, #11
 8007b56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5c:	e092      	b.n	8007c84 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	791b      	ldrb	r3, [r3, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	2100      	movs	r1, #0
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f8d5 	bl	8007d16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	761a      	strb	r2, [r3, #24]

      break;
 8007b7e:	e086      	b.n	8007c8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	791b      	ldrb	r3, [r3, #4]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fbc6 	bl	8008318 <USBH_LL_GetURBState>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d105      	bne.n	8007ba2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	220d      	movs	r2, #13
 8007b9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ba0:	e072      	b.n	8007c88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d103      	bne.n	8007bb0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	220b      	movs	r2, #11
 8007bac:	761a      	strb	r2, [r3, #24]
      break;
 8007bae:	e06b      	b.n	8007c88 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	d168      	bne.n	8007c88 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bba:	e065      	b.n	8007c88 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	795b      	ldrb	r3, [r3, #5]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	9200      	str	r2, [sp, #0]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f87f 	bl	8007ccc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	220a      	movs	r2, #10
 8007bde:	761a      	strb	r2, [r3, #24]
      break;
 8007be0:	e055      	b.n	8007c8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	795b      	ldrb	r3, [r3, #5]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fb95 	bl	8008318 <USBH_LL_GetURBState>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d105      	bne.n	8007c04 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	220d      	movs	r2, #13
 8007c00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c02:	e043      	b.n	8007c8c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d103      	bne.n	8007c12 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2209      	movs	r2, #9
 8007c0e:	761a      	strb	r2, [r3, #24]
      break;
 8007c10:	e03c      	b.n	8007c8c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d139      	bne.n	8007c8c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	220b      	movs	r2, #11
 8007c1c:	761a      	strb	r2, [r3, #24]
      break;
 8007c1e:	e035      	b.n	8007c8c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7e5b      	ldrb	r3, [r3, #25]
 8007c24:	3301      	adds	r3, #1
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	765a      	strb	r2, [r3, #25]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7e5b      	ldrb	r3, [r3, #25]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d806      	bhi.n	8007c42 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007c40:	e025      	b.n	8007c8e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c48:	2106      	movs	r1, #6
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	795b      	ldrb	r3, [r3, #5]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f90c 	bl	8007e78 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	791b      	ldrb	r3, [r3, #4]
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f906 	bl	8007e78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007c72:	2302      	movs	r3, #2
 8007c74:	73fb      	strb	r3, [r7, #15]
      break;
 8007c76:	e00a      	b.n	8007c8e <USBH_HandleControl+0x2de>

    default:
      break;
 8007c78:	bf00      	nop
 8007c7a:	e008      	b.n	8007c8e <USBH_HandleControl+0x2de>
      break;
 8007c7c:	bf00      	nop
 8007c7e:	e006      	b.n	8007c8e <USBH_HandleControl+0x2de>
      break;
 8007c80:	bf00      	nop
 8007c82:	e004      	b.n	8007c8e <USBH_HandleControl+0x2de>
      break;
 8007c84:	bf00      	nop
 8007c86:	e002      	b.n	8007c8e <USBH_HandleControl+0x2de>
      break;
 8007c88:	bf00      	nop
 8007c8a:	e000      	b.n	8007c8e <USBH_HandleControl+0x2de>
      break;
 8007c8c:	bf00      	nop
  }

  return status;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af04      	add	r7, sp, #16
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ca6:	79f9      	ldrb	r1, [r7, #7]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9303      	str	r3, [sp, #12]
 8007cac:	2308      	movs	r3, #8
 8007cae:	9302      	str	r3, [sp, #8]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	9301      	str	r3, [sp, #4]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2200      	movs	r2, #0
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fafa 	bl	80082b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af04      	add	r7, sp, #16
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	461a      	mov	r2, r3
 8007cda:	460b      	mov	r3, r1
 8007cdc:	80fb      	strh	r3, [r7, #6]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007cf0:	7979      	ldrb	r1, [r7, #5]
 8007cf2:	7e3b      	ldrb	r3, [r7, #24]
 8007cf4:	9303      	str	r3, [sp, #12]
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	2301      	movs	r3, #1
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	2300      	movs	r3, #0
 8007d04:	2200      	movs	r2, #0
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fad5 	bl	80082b6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b088      	sub	sp, #32
 8007d1a:	af04      	add	r7, sp, #16
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	4611      	mov	r1, r2
 8007d22:	461a      	mov	r2, r3
 8007d24:	460b      	mov	r3, r1
 8007d26:	80fb      	strh	r3, [r7, #6]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d2c:	7979      	ldrb	r1, [r7, #5]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9303      	str	r3, [sp, #12]
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2201      	movs	r2, #1
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 fab7 	bl	80082b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d48:	2300      	movs	r3, #0

}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b088      	sub	sp, #32
 8007d56:	af04      	add	r7, sp, #16
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	461a      	mov	r2, r3
 8007d60:	460b      	mov	r3, r1
 8007d62:	80fb      	strh	r3, [r7, #6]
 8007d64:	4613      	mov	r3, r2
 8007d66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d76:	7979      	ldrb	r1, [r7, #5]
 8007d78:	7e3b      	ldrb	r3, [r7, #24]
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	9302      	str	r3, [sp, #8]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	2301      	movs	r3, #1
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	2302      	movs	r3, #2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fa92 	bl	80082b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af04      	add	r7, sp, #16
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	4611      	mov	r1, r2
 8007da8:	461a      	mov	r2, r3
 8007daa:	460b      	mov	r3, r1
 8007dac:	80fb      	strh	r3, [r7, #6]
 8007dae:	4613      	mov	r3, r2
 8007db0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007db2:	7979      	ldrb	r1, [r7, #5]
 8007db4:	2300      	movs	r3, #0
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	88fb      	ldrh	r3, [r7, #6]
 8007dba:	9302      	str	r3, [sp, #8]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fa74 	bl	80082b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af04      	add	r7, sp, #16
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	4608      	mov	r0, r1
 8007de2:	4611      	mov	r1, r2
 8007de4:	461a      	mov	r2, r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	70fb      	strb	r3, [r7, #3]
 8007dea:	460b      	mov	r3, r1
 8007dec:	70bb      	strb	r3, [r7, #2]
 8007dee:	4613      	mov	r3, r2
 8007df0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007df2:	7878      	ldrb	r0, [r7, #1]
 8007df4:	78ba      	ldrb	r2, [r7, #2]
 8007df6:	78f9      	ldrb	r1, [r7, #3]
 8007df8:	8b3b      	ldrh	r3, [r7, #24]
 8007dfa:	9302      	str	r3, [sp, #8]
 8007dfc:	7d3b      	ldrb	r3, [r7, #20]
 8007dfe:	9301      	str	r3, [sp, #4]
 8007e00:	7c3b      	ldrb	r3, [r7, #16]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	4603      	mov	r3, r0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa07 	bl	800821a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fa26 	bl	8008278 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f836 	bl	8007eb4 <USBH_GetFreePipe>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e4c:	89fb      	ldrh	r3, [r7, #14]
 8007e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00a      	beq.n	8007e6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007e56:	78fa      	ldrb	r2, [r7, #3]
 8007e58:	89fb      	ldrh	r3, [r7, #14]
 8007e5a:	f003 030f 	and.w	r3, r3, #15
 8007e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	33e0      	adds	r3, #224	; 0xe0
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007e6c:	89fb      	ldrh	r3, [r7, #14]
 8007e6e:	b2db      	uxtb	r3, r3
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	2b0f      	cmp	r3, #15
 8007e88:	d80d      	bhi.n	8007ea6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	33e0      	adds	r3, #224	; 0xe0
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	33e0      	adds	r3, #224	; 0xe0
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
 8007ec4:	e00f      	b.n	8007ee6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	33e0      	adds	r3, #224	; 0xe0
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d102      	bne.n	8007ee0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	e007      	b.n	8007ef0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	2b0f      	cmp	r3, #15
 8007eea:	d9ec      	bls.n	8007ec6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007f00:	2201      	movs	r2, #1
 8007f02:	490e      	ldr	r1, [pc, #56]	; (8007f3c <MX_USB_HOST_Init+0x40>)
 8007f04:	480e      	ldr	r0, [pc, #56]	; (8007f40 <MX_USB_HOST_Init+0x44>)
 8007f06:	f7ff fb37 	bl	8007578 <USBH_Init>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007f10:	f7f8 fd76 	bl	8000a00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007f14:	490b      	ldr	r1, [pc, #44]	; (8007f44 <MX_USB_HOST_Init+0x48>)
 8007f16:	480a      	ldr	r0, [pc, #40]	; (8007f40 <MX_USB_HOST_Init+0x44>)
 8007f18:	f7ff fbbc 	bl	8007694 <USBH_RegisterClass>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007f22:	f7f8 fd6d 	bl	8000a00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007f26:	4806      	ldr	r0, [pc, #24]	; (8007f40 <MX_USB_HOST_Init+0x44>)
 8007f28:	f7ff fc40 	bl	80077ac <USBH_Start>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007f32:	f7f8 fd65 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	08007f49 	.word	0x08007f49
 8007f40:	20000238 	.word	0x20000238
 8007f44:	2000000c 	.word	0x2000000c

08007f48 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d819      	bhi.n	8007f90 <USBH_UserProcess+0x48>
 8007f5c:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <USBH_UserProcess+0x1c>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	08007f81 	.word	0x08007f81
 8007f6c:	08007f91 	.word	0x08007f91
 8007f70:	08007f89 	.word	0x08007f89
 8007f74:	08007f79 	.word	0x08007f79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007f78:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <USBH_UserProcess+0x58>)
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	701a      	strb	r2, [r3, #0]
  break;
 8007f7e:	e008      	b.n	8007f92 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <USBH_UserProcess+0x58>)
 8007f82:	2202      	movs	r2, #2
 8007f84:	701a      	strb	r2, [r3, #0]
  break;
 8007f86:	e004      	b.n	8007f92 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007f88:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <USBH_UserProcess+0x58>)
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	701a      	strb	r2, [r3, #0]
  break;
 8007f8e:	e000      	b.n	8007f92 <USBH_UserProcess+0x4a>

  default:
  break;
 8007f90:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	20000610 	.word	0x20000610

08007fa4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fac:	f107 0314 	add.w	r3, r7, #20
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	605a      	str	r2, [r3, #4]
 8007fb6:	609a      	str	r2, [r3, #8]
 8007fb8:	60da      	str	r2, [r3, #12]
 8007fba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fc4:	d147      	bne.n	8008056 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	4b25      	ldr	r3, [pc, #148]	; (8008060 <HAL_HCD_MspInit+0xbc>)
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	4a24      	ldr	r2, [pc, #144]	; (8008060 <HAL_HCD_MspInit+0xbc>)
 8007fd0:	f043 0301 	orr.w	r3, r3, #1
 8007fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fd6:	4b22      	ldr	r3, [pc, #136]	; (8008060 <HAL_HCD_MspInit+0xbc>)
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ff0:	f107 0314 	add.w	r3, r7, #20
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	481b      	ldr	r0, [pc, #108]	; (8008064 <HAL_HCD_MspInit+0xc0>)
 8007ff8:	f7f9 fa78 	bl	80014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ffc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008002:	2302      	movs	r3, #2
 8008004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008006:	2300      	movs	r3, #0
 8008008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800800a:	2300      	movs	r3, #0
 800800c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800800e:	230a      	movs	r3, #10
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008012:	f107 0314 	add.w	r3, r7, #20
 8008016:	4619      	mov	r1, r3
 8008018:	4812      	ldr	r0, [pc, #72]	; (8008064 <HAL_HCD_MspInit+0xc0>)
 800801a:	f7f9 fa67 	bl	80014ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800801e:	4b10      	ldr	r3, [pc, #64]	; (8008060 <HAL_HCD_MspInit+0xbc>)
 8008020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008022:	4a0f      	ldr	r2, [pc, #60]	; (8008060 <HAL_HCD_MspInit+0xbc>)
 8008024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008028:	6353      	str	r3, [r2, #52]	; 0x34
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <HAL_HCD_MspInit+0xbc>)
 8008030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008032:	4a0b      	ldr	r2, [pc, #44]	; (8008060 <HAL_HCD_MspInit+0xbc>)
 8008034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008038:	6453      	str	r3, [r2, #68]	; 0x44
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <HAL_HCD_MspInit+0xbc>)
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008046:	2200      	movs	r2, #0
 8008048:	2100      	movs	r1, #0
 800804a:	2043      	movs	r0, #67	; 0x43
 800804c:	f7f9 f985 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008050:	2043      	movs	r0, #67	; 0x43
 8008052:	f7f9 f99e 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008056:	bf00      	nop
 8008058:	3728      	adds	r7, #40	; 0x28
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	40023800 	.word	0x40023800
 8008064:	40020000 	.word	0x40020000

08008068 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff fbb7 	bl	80077ea <USBH_LL_IncTimer>
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff fbef 	bl	8007876 <USBH_LL_Connect>
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff fbf8 	bl	80078a4 <USBH_LL_Disconnect>
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
 80080c8:	4613      	mov	r3, r2
 80080ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff fba9 	bl	800783e <USBH_LL_PortEnabled>
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff fba9 	bl	800785a <USBH_LL_PortDisabled>
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800811e:	2b01      	cmp	r3, #1
 8008120:	d12a      	bne.n	8008178 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008122:	4a18      	ldr	r2, [pc, #96]	; (8008184 <USBH_LL_Init+0x74>)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a15      	ldr	r2, [pc, #84]	; (8008184 <USBH_LL_Init+0x74>)
 800812e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008132:	4b14      	ldr	r3, [pc, #80]	; (8008184 <USBH_LL_Init+0x74>)
 8008134:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008138:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <USBH_LL_Init+0x74>)
 800813c:	2208      	movs	r2, #8
 800813e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008140:	4b10      	ldr	r3, [pc, #64]	; (8008184 <USBH_LL_Init+0x74>)
 8008142:	2201      	movs	r2, #1
 8008144:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008146:	4b0f      	ldr	r3, [pc, #60]	; (8008184 <USBH_LL_Init+0x74>)
 8008148:	2200      	movs	r2, #0
 800814a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800814c:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <USBH_LL_Init+0x74>)
 800814e:	2202      	movs	r2, #2
 8008150:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008152:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <USBH_LL_Init+0x74>)
 8008154:	2200      	movs	r2, #0
 8008156:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008158:	480a      	ldr	r0, [pc, #40]	; (8008184 <USBH_LL_Init+0x74>)
 800815a:	f7f9 fbaf 	bl	80018bc <HAL_HCD_Init>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008164:	f7f8 fc4c 	bl	8000a00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008168:	4806      	ldr	r0, [pc, #24]	; (8008184 <USBH_LL_Init+0x74>)
 800816a:	f7f9 ff84 	bl	8002076 <HAL_HCD_GetCurrentFrame>
 800816e:	4603      	mov	r3, r0
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff fb2a 	bl	80077cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000614 	.word	0x20000614

08008188 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800819e:	4618      	mov	r0, r3
 80081a0:	f7f9 ff01 	bl	8001fa6 <HAL_HCD_Start>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 f90e 	bl	80083cc <USBH_Get_USB_Status>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7f9 ff09 	bl	8001fec <HAL_HCD_Stop>
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 f8f3 	bl	80083cc <USBH_Get_USB_Status>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008206:	78fa      	ldrb	r2, [r7, #3]
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f7f9 ff1f 	bl	800204e <HAL_HCD_HC_GetXferCount>
 8008210:	4603      	mov	r3, r0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800821a:	b590      	push	{r4, r7, lr}
 800821c:	b089      	sub	sp, #36	; 0x24
 800821e:	af04      	add	r7, sp, #16
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	4608      	mov	r0, r1
 8008224:	4611      	mov	r1, r2
 8008226:	461a      	mov	r2, r3
 8008228:	4603      	mov	r3, r0
 800822a:	70fb      	strb	r3, [r7, #3]
 800822c:	460b      	mov	r3, r1
 800822e:	70bb      	strb	r3, [r7, #2]
 8008230:	4613      	mov	r3, r2
 8008232:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008242:	787c      	ldrb	r4, [r7, #1]
 8008244:	78ba      	ldrb	r2, [r7, #2]
 8008246:	78f9      	ldrb	r1, [r7, #3]
 8008248:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800824a:	9302      	str	r3, [sp, #8]
 800824c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	4623      	mov	r3, r4
 800825a:	f7f9 fb91 	bl	8001980 <HAL_HCD_HC_Init>
 800825e:	4603      	mov	r3, r0
 8008260:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 f8b1 	bl	80083cc <USBH_Get_USB_Status>
 800826a:	4603      	mov	r3, r0
 800826c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800826e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}

08008278 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008292:	78fa      	ldrb	r2, [r7, #3]
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f7f9 fc01 	bl	8001a9e <HAL_HCD_HC_Halt>
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f892 	bl	80083cc <USBH_Get_USB_Status>
 80082a8:	4603      	mov	r3, r0
 80082aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80082b6:	b590      	push	{r4, r7, lr}
 80082b8:	b089      	sub	sp, #36	; 0x24
 80082ba:	af04      	add	r7, sp, #16
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	4608      	mov	r0, r1
 80082c0:	4611      	mov	r1, r2
 80082c2:	461a      	mov	r2, r3
 80082c4:	4603      	mov	r3, r0
 80082c6:	70fb      	strb	r3, [r7, #3]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70bb      	strb	r3, [r7, #2]
 80082cc:	4613      	mov	r3, r2
 80082ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80082de:	787c      	ldrb	r4, [r7, #1]
 80082e0:	78ba      	ldrb	r2, [r7, #2]
 80082e2:	78f9      	ldrb	r1, [r7, #3]
 80082e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082ec:	9302      	str	r3, [sp, #8]
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	4623      	mov	r3, r4
 80082fa:	f7f9 fbf3 	bl	8001ae4 <HAL_HCD_HC_SubmitRequest>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 f861 	bl	80083cc <USBH_Get_USB_Status>
 800830a:	4603      	mov	r3, r0
 800830c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800830e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	bd90      	pop	{r4, r7, pc}

08008318 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f7f9 fe79 	bl	8002026 <HAL_HCD_HC_GetURBState>
 8008334:	4603      	mov	r3, r0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008350:	2b01      	cmp	r3, #1
 8008352:	d103      	bne.n	800835c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f864 	bl	8008424 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800835c:	20c8      	movs	r0, #200	; 0xc8
 800835e:	f7f8 fefd 	bl	800115c <HAL_Delay>
  return USBH_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
 8008378:	4613      	mov	r3, r2
 800837a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008382:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	212c      	movs	r1, #44	; 0x2c
 800838a:	fb01 f303 	mul.w	r3, r1, r3
 800838e:	4413      	add	r3, r2
 8008390:	333b      	adds	r3, #59	; 0x3b
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d009      	beq.n	80083ac <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	212c      	movs	r1, #44	; 0x2c
 800839e:	fb01 f303 	mul.w	r3, r1, r3
 80083a2:	4413      	add	r3, r2
 80083a4:	3354      	adds	r3, #84	; 0x54
 80083a6:	78ba      	ldrb	r2, [r7, #2]
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e008      	b.n	80083be <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80083ac:	78fb      	ldrb	r3, [r7, #3]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	212c      	movs	r1, #44	; 0x2c
 80083b2:	fb01 f303 	mul.w	r3, r1, r3
 80083b6:	4413      	add	r3, r2
 80083b8:	3355      	adds	r3, #85	; 0x55
 80083ba:	78ba      	ldrb	r2, [r7, #2]
 80083bc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d817      	bhi.n	8008410 <USBH_Get_USB_Status+0x44>
 80083e0:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <USBH_Get_USB_Status+0x1c>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	080083f9 	.word	0x080083f9
 80083ec:	080083ff 	.word	0x080083ff
 80083f0:	08008405 	.word	0x08008405
 80083f4:	0800840b 	.word	0x0800840b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]
    break;
 80083fc:	e00b      	b.n	8008416 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083fe:	2302      	movs	r3, #2
 8008400:	73fb      	strb	r3, [r7, #15]
    break;
 8008402:	e008      	b.n	8008416 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008404:	2301      	movs	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
    break;
 8008408:	e005      	b.n	8008416 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800840a:	2302      	movs	r3, #2
 800840c:	73fb      	strb	r3, [r7, #15]
    break;
 800840e:	e002      	b.n	8008416 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008410:	2302      	movs	r3, #2
 8008412:	73fb      	strb	r3, [r7, #15]
    break;
 8008414:	bf00      	nop
  }
  return usb_status;
 8008416:	7bfb      	ldrb	r3, [r7, #15]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
 800843c:	e001      	b.n	8008442 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800843e:	2301      	movs	r3, #1
 8008440:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	461a      	mov	r2, r3
 8008446:	2101      	movs	r1, #1
 8008448:	4803      	ldr	r0, [pc, #12]	; (8008458 <MX_DriverVbusFS+0x34>)
 800844a:	f7f9 f9eb 	bl	8001824 <HAL_GPIO_WritePin>
}
 800844e:	bf00      	nop
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	40020800 	.word	0x40020800

0800845c <__errno>:
 800845c:	4b01      	ldr	r3, [pc, #4]	; (8008464 <__errno+0x8>)
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	2000002c 	.word	0x2000002c

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4d0d      	ldr	r5, [pc, #52]	; (80084a0 <__libc_init_array+0x38>)
 800846c:	4c0d      	ldr	r4, [pc, #52]	; (80084a4 <__libc_init_array+0x3c>)
 800846e:	1b64      	subs	r4, r4, r5
 8008470:	10a4      	asrs	r4, r4, #2
 8008472:	2600      	movs	r6, #0
 8008474:	42a6      	cmp	r6, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	4d0b      	ldr	r5, [pc, #44]	; (80084a8 <__libc_init_array+0x40>)
 800847a:	4c0c      	ldr	r4, [pc, #48]	; (80084ac <__libc_init_array+0x44>)
 800847c:	f000 f92e 	bl	80086dc <_init>
 8008480:	1b64      	subs	r4, r4, r5
 8008482:	10a4      	asrs	r4, r4, #2
 8008484:	2600      	movs	r6, #0
 8008486:	42a6      	cmp	r6, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008490:	4798      	blx	r3
 8008492:	3601      	adds	r6, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	f855 3b04 	ldr.w	r3, [r5], #4
 800849a:	4798      	blx	r3
 800849c:	3601      	adds	r6, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	08008718 	.word	0x08008718
 80084a4:	08008718 	.word	0x08008718
 80084a8:	08008718 	.word	0x08008718
 80084ac:	0800871c 	.word	0x0800871c

080084b0 <malloc>:
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <malloc+0xc>)
 80084b2:	4601      	mov	r1, r0
 80084b4:	6818      	ldr	r0, [r3, #0]
 80084b6:	f000 b87f 	b.w	80085b8 <_malloc_r>
 80084ba:	bf00      	nop
 80084bc:	2000002c 	.word	0x2000002c

080084c0 <free>:
 80084c0:	4b02      	ldr	r3, [pc, #8]	; (80084cc <free+0xc>)
 80084c2:	4601      	mov	r1, r0
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	f000 b80b 	b.w	80084e0 <_free_r>
 80084ca:	bf00      	nop
 80084cc:	2000002c 	.word	0x2000002c

080084d0 <memset>:
 80084d0:	4402      	add	r2, r0
 80084d2:	4603      	mov	r3, r0
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d100      	bne.n	80084da <memset+0xa>
 80084d8:	4770      	bx	lr
 80084da:	f803 1b01 	strb.w	r1, [r3], #1
 80084de:	e7f9      	b.n	80084d4 <memset+0x4>

080084e0 <_free_r>:
 80084e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084e2:	2900      	cmp	r1, #0
 80084e4:	d044      	beq.n	8008570 <_free_r+0x90>
 80084e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ea:	9001      	str	r0, [sp, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f1a1 0404 	sub.w	r4, r1, #4
 80084f2:	bfb8      	it	lt
 80084f4:	18e4      	addlt	r4, r4, r3
 80084f6:	f000 f8e3 	bl	80086c0 <__malloc_lock>
 80084fa:	4a1e      	ldr	r2, [pc, #120]	; (8008574 <_free_r+0x94>)
 80084fc:	9801      	ldr	r0, [sp, #4]
 80084fe:	6813      	ldr	r3, [r2, #0]
 8008500:	b933      	cbnz	r3, 8008510 <_free_r+0x30>
 8008502:	6063      	str	r3, [r4, #4]
 8008504:	6014      	str	r4, [r2, #0]
 8008506:	b003      	add	sp, #12
 8008508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800850c:	f000 b8de 	b.w	80086cc <__malloc_unlock>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d908      	bls.n	8008526 <_free_r+0x46>
 8008514:	6825      	ldr	r5, [r4, #0]
 8008516:	1961      	adds	r1, r4, r5
 8008518:	428b      	cmp	r3, r1
 800851a:	bf01      	itttt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	1949      	addeq	r1, r1, r5
 8008522:	6021      	streq	r1, [r4, #0]
 8008524:	e7ed      	b.n	8008502 <_free_r+0x22>
 8008526:	461a      	mov	r2, r3
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b10b      	cbz	r3, 8008530 <_free_r+0x50>
 800852c:	42a3      	cmp	r3, r4
 800852e:	d9fa      	bls.n	8008526 <_free_r+0x46>
 8008530:	6811      	ldr	r1, [r2, #0]
 8008532:	1855      	adds	r5, r2, r1
 8008534:	42a5      	cmp	r5, r4
 8008536:	d10b      	bne.n	8008550 <_free_r+0x70>
 8008538:	6824      	ldr	r4, [r4, #0]
 800853a:	4421      	add	r1, r4
 800853c:	1854      	adds	r4, r2, r1
 800853e:	42a3      	cmp	r3, r4
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	d1e0      	bne.n	8008506 <_free_r+0x26>
 8008544:	681c      	ldr	r4, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	6053      	str	r3, [r2, #4]
 800854a:	4421      	add	r1, r4
 800854c:	6011      	str	r1, [r2, #0]
 800854e:	e7da      	b.n	8008506 <_free_r+0x26>
 8008550:	d902      	bls.n	8008558 <_free_r+0x78>
 8008552:	230c      	movs	r3, #12
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	e7d6      	b.n	8008506 <_free_r+0x26>
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	1961      	adds	r1, r4, r5
 800855c:	428b      	cmp	r3, r1
 800855e:	bf04      	itt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	6063      	str	r3, [r4, #4]
 8008566:	bf04      	itt	eq
 8008568:	1949      	addeq	r1, r1, r5
 800856a:	6021      	streq	r1, [r4, #0]
 800856c:	6054      	str	r4, [r2, #4]
 800856e:	e7ca      	b.n	8008506 <_free_r+0x26>
 8008570:	b003      	add	sp, #12
 8008572:	bd30      	pop	{r4, r5, pc}
 8008574:	20000918 	.word	0x20000918

08008578 <sbrk_aligned>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	4e0e      	ldr	r6, [pc, #56]	; (80085b4 <sbrk_aligned+0x3c>)
 800857c:	460c      	mov	r4, r1
 800857e:	6831      	ldr	r1, [r6, #0]
 8008580:	4605      	mov	r5, r0
 8008582:	b911      	cbnz	r1, 800858a <sbrk_aligned+0x12>
 8008584:	f000 f88c 	bl	80086a0 <_sbrk_r>
 8008588:	6030      	str	r0, [r6, #0]
 800858a:	4621      	mov	r1, r4
 800858c:	4628      	mov	r0, r5
 800858e:	f000 f887 	bl	80086a0 <_sbrk_r>
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	d00a      	beq.n	80085ac <sbrk_aligned+0x34>
 8008596:	1cc4      	adds	r4, r0, #3
 8008598:	f024 0403 	bic.w	r4, r4, #3
 800859c:	42a0      	cmp	r0, r4
 800859e:	d007      	beq.n	80085b0 <sbrk_aligned+0x38>
 80085a0:	1a21      	subs	r1, r4, r0
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 f87c 	bl	80086a0 <_sbrk_r>
 80085a8:	3001      	adds	r0, #1
 80085aa:	d101      	bne.n	80085b0 <sbrk_aligned+0x38>
 80085ac:	f04f 34ff 	mov.w	r4, #4294967295
 80085b0:	4620      	mov	r0, r4
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	2000091c 	.word	0x2000091c

080085b8 <_malloc_r>:
 80085b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085bc:	1ccd      	adds	r5, r1, #3
 80085be:	f025 0503 	bic.w	r5, r5, #3
 80085c2:	3508      	adds	r5, #8
 80085c4:	2d0c      	cmp	r5, #12
 80085c6:	bf38      	it	cc
 80085c8:	250c      	movcc	r5, #12
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	4607      	mov	r7, r0
 80085ce:	db01      	blt.n	80085d4 <_malloc_r+0x1c>
 80085d0:	42a9      	cmp	r1, r5
 80085d2:	d905      	bls.n	80085e0 <_malloc_r+0x28>
 80085d4:	230c      	movs	r3, #12
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	2600      	movs	r6, #0
 80085da:	4630      	mov	r0, r6
 80085dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e0:	4e2e      	ldr	r6, [pc, #184]	; (800869c <_malloc_r+0xe4>)
 80085e2:	f000 f86d 	bl	80086c0 <__malloc_lock>
 80085e6:	6833      	ldr	r3, [r6, #0]
 80085e8:	461c      	mov	r4, r3
 80085ea:	bb34      	cbnz	r4, 800863a <_malloc_r+0x82>
 80085ec:	4629      	mov	r1, r5
 80085ee:	4638      	mov	r0, r7
 80085f0:	f7ff ffc2 	bl	8008578 <sbrk_aligned>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	4604      	mov	r4, r0
 80085f8:	d14d      	bne.n	8008696 <_malloc_r+0xde>
 80085fa:	6834      	ldr	r4, [r6, #0]
 80085fc:	4626      	mov	r6, r4
 80085fe:	2e00      	cmp	r6, #0
 8008600:	d140      	bne.n	8008684 <_malloc_r+0xcc>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	4631      	mov	r1, r6
 8008606:	4638      	mov	r0, r7
 8008608:	eb04 0803 	add.w	r8, r4, r3
 800860c:	f000 f848 	bl	80086a0 <_sbrk_r>
 8008610:	4580      	cmp	r8, r0
 8008612:	d13a      	bne.n	800868a <_malloc_r+0xd2>
 8008614:	6821      	ldr	r1, [r4, #0]
 8008616:	3503      	adds	r5, #3
 8008618:	1a6d      	subs	r5, r5, r1
 800861a:	f025 0503 	bic.w	r5, r5, #3
 800861e:	3508      	adds	r5, #8
 8008620:	2d0c      	cmp	r5, #12
 8008622:	bf38      	it	cc
 8008624:	250c      	movcc	r5, #12
 8008626:	4629      	mov	r1, r5
 8008628:	4638      	mov	r0, r7
 800862a:	f7ff ffa5 	bl	8008578 <sbrk_aligned>
 800862e:	3001      	adds	r0, #1
 8008630:	d02b      	beq.n	800868a <_malloc_r+0xd2>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	442b      	add	r3, r5
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	e00e      	b.n	8008658 <_malloc_r+0xa0>
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	1b52      	subs	r2, r2, r5
 800863e:	d41e      	bmi.n	800867e <_malloc_r+0xc6>
 8008640:	2a0b      	cmp	r2, #11
 8008642:	d916      	bls.n	8008672 <_malloc_r+0xba>
 8008644:	1961      	adds	r1, r4, r5
 8008646:	42a3      	cmp	r3, r4
 8008648:	6025      	str	r5, [r4, #0]
 800864a:	bf18      	it	ne
 800864c:	6059      	strne	r1, [r3, #4]
 800864e:	6863      	ldr	r3, [r4, #4]
 8008650:	bf08      	it	eq
 8008652:	6031      	streq	r1, [r6, #0]
 8008654:	5162      	str	r2, [r4, r5]
 8008656:	604b      	str	r3, [r1, #4]
 8008658:	4638      	mov	r0, r7
 800865a:	f104 060b 	add.w	r6, r4, #11
 800865e:	f000 f835 	bl	80086cc <__malloc_unlock>
 8008662:	f026 0607 	bic.w	r6, r6, #7
 8008666:	1d23      	adds	r3, r4, #4
 8008668:	1af2      	subs	r2, r6, r3
 800866a:	d0b6      	beq.n	80085da <_malloc_r+0x22>
 800866c:	1b9b      	subs	r3, r3, r6
 800866e:	50a3      	str	r3, [r4, r2]
 8008670:	e7b3      	b.n	80085da <_malloc_r+0x22>
 8008672:	6862      	ldr	r2, [r4, #4]
 8008674:	42a3      	cmp	r3, r4
 8008676:	bf0c      	ite	eq
 8008678:	6032      	streq	r2, [r6, #0]
 800867a:	605a      	strne	r2, [r3, #4]
 800867c:	e7ec      	b.n	8008658 <_malloc_r+0xa0>
 800867e:	4623      	mov	r3, r4
 8008680:	6864      	ldr	r4, [r4, #4]
 8008682:	e7b2      	b.n	80085ea <_malloc_r+0x32>
 8008684:	4634      	mov	r4, r6
 8008686:	6876      	ldr	r6, [r6, #4]
 8008688:	e7b9      	b.n	80085fe <_malloc_r+0x46>
 800868a:	230c      	movs	r3, #12
 800868c:	603b      	str	r3, [r7, #0]
 800868e:	4638      	mov	r0, r7
 8008690:	f000 f81c 	bl	80086cc <__malloc_unlock>
 8008694:	e7a1      	b.n	80085da <_malloc_r+0x22>
 8008696:	6025      	str	r5, [r4, #0]
 8008698:	e7de      	b.n	8008658 <_malloc_r+0xa0>
 800869a:	bf00      	nop
 800869c:	20000918 	.word	0x20000918

080086a0 <_sbrk_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d06      	ldr	r5, [pc, #24]	; (80086bc <_sbrk_r+0x1c>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	f7f8 fab4 	bl	8000c18 <_sbrk>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_sbrk_r+0x1a>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_sbrk_r+0x1a>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	20000920 	.word	0x20000920

080086c0 <__malloc_lock>:
 80086c0:	4801      	ldr	r0, [pc, #4]	; (80086c8 <__malloc_lock+0x8>)
 80086c2:	f000 b809 	b.w	80086d8 <__retarget_lock_acquire_recursive>
 80086c6:	bf00      	nop
 80086c8:	20000924 	.word	0x20000924

080086cc <__malloc_unlock>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__malloc_unlock+0x8>)
 80086ce:	f000 b804 	b.w	80086da <__retarget_lock_release_recursive>
 80086d2:	bf00      	nop
 80086d4:	20000924 	.word	0x20000924

080086d8 <__retarget_lock_acquire_recursive>:
 80086d8:	4770      	bx	lr

080086da <__retarget_lock_release_recursive>:
 80086da:	4770      	bx	lr

080086dc <_init>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	bf00      	nop
 80086e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e2:	bc08      	pop	{r3}
 80086e4:	469e      	mov	lr, r3
 80086e6:	4770      	bx	lr

080086e8 <_fini>:
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ea:	bf00      	nop
 80086ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ee:	bc08      	pop	{r3}
 80086f0:	469e      	mov	lr, r3
 80086f2:	4770      	bx	lr


Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b50  08008b50  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b58  08008b58  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b5c  08008b5c  00018b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000898  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000928  20000928  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dceb  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004269  00000000  00000000  0003ddab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e8  00000000  00000000  00042018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001648  00000000  00000000  00043800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261af  00000000  00000000  00044e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed2d  00000000  00000000  0006aff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d582f  00000000  00000000  00089d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015f553  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c98  00000000  00000000  0015f5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a78 	.word	0x08008a78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008a78 	.word	0x08008a78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
     PB10   ------> I2S2_CK
     PC7   ------> I2S3_MCK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08c      	sub	sp, #48	; 0x30
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
 800058e:	4b86      	ldr	r3, [pc, #536]	; (80007a8 <MX_GPIO_Init+0x234>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a85      	ldr	r2, [pc, #532]	; (80007a8 <MX_GPIO_Init+0x234>)
 8000594:	f043 0310 	orr.w	r3, r3, #16
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b83      	ldr	r3, [pc, #524]	; (80007a8 <MX_GPIO_Init+0x234>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0310 	and.w	r3, r3, #16
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	4b7f      	ldr	r3, [pc, #508]	; (80007a8 <MX_GPIO_Init+0x234>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a7e      	ldr	r2, [pc, #504]	; (80007a8 <MX_GPIO_Init+0x234>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b7c      	ldr	r3, [pc, #496]	; (80007a8 <MX_GPIO_Init+0x234>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b78      	ldr	r3, [pc, #480]	; (80007a8 <MX_GPIO_Init+0x234>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a77      	ldr	r2, [pc, #476]	; (80007a8 <MX_GPIO_Init+0x234>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b75      	ldr	r3, [pc, #468]	; (80007a8 <MX_GPIO_Init+0x234>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b71      	ldr	r3, [pc, #452]	; (80007a8 <MX_GPIO_Init+0x234>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a70      	ldr	r2, [pc, #448]	; (80007a8 <MX_GPIO_Init+0x234>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b6e      	ldr	r3, [pc, #440]	; (80007a8 <MX_GPIO_Init+0x234>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b6a      	ldr	r3, [pc, #424]	; (80007a8 <MX_GPIO_Init+0x234>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a69      	ldr	r2, [pc, #420]	; (80007a8 <MX_GPIO_Init+0x234>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b67      	ldr	r3, [pc, #412]	; (80007a8 <MX_GPIO_Init+0x234>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b63      	ldr	r3, [pc, #396]	; (80007a8 <MX_GPIO_Init+0x234>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a62      	ldr	r2, [pc, #392]	; (80007a8 <MX_GPIO_Init+0x234>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b60      	ldr	r3, [pc, #384]	; (80007a8 <MX_GPIO_Init+0x234>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2108      	movs	r1, #8
 8000636:	485d      	ldr	r0, [pc, #372]	; (80007ac <MX_GPIO_Init+0x238>)
 8000638:	f001 f8e8 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2101      	movs	r1, #1
 8000640:	485b      	ldr	r0, [pc, #364]	; (80007b0 <MX_GPIO_Init+0x23c>)
 8000642:	f001 f8e3 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f247 0110 	movw	r1, #28688	; 0x7010
 800064c:	4859      	ldr	r0, [pc, #356]	; (80007b4 <MX_GPIO_Init+0x240>)
 800064e:	f001 f8dd 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000652:	2308      	movs	r3, #8
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4850      	ldr	r0, [pc, #320]	; (80007ac <MX_GPIO_Init+0x238>)
 800066a:	f000 ff33 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800066e:	2301      	movs	r3, #1
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	484a      	ldr	r0, [pc, #296]	; (80007b0 <MX_GPIO_Init+0x23c>)
 8000686:	f000 ff25 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800068a:	2308      	movs	r3, #8
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800069a:	2305      	movs	r3, #5
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	4842      	ldr	r0, [pc, #264]	; (80007b0 <MX_GPIO_Init+0x23c>)
 80006a6:	f000 ff15 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	483e      	ldr	r0, [pc, #248]	; (80007b8 <MX_GPIO_Init+0x244>)
 80006c0:	f000 ff08 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006c4:	2310      	movs	r3, #16
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006d4:	2306      	movs	r3, #6
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4836      	ldr	r0, [pc, #216]	; (80007b8 <MX_GPIO_Init+0x244>)
 80006e0:	f000 fef8 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006e4:	2304      	movs	r3, #4
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4831      	ldr	r0, [pc, #196]	; (80007bc <MX_GPIO_Init+0x248>)
 80006f8:	f000 feec 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800070e:	2305      	movs	r3, #5
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4828      	ldr	r0, [pc, #160]	; (80007bc <MX_GPIO_Init+0x248>)
 800071a:	f000 fedb 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 800071e:	f247 0310 	movw	r3, #28688	; 0x7010
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	481f      	ldr	r0, [pc, #124]	; (80007b4 <MX_GPIO_Init+0x240>)
 8000738:	f000 fecc 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SD_Pin;
 800073c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800074e:	2306      	movs	r3, #6
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4815      	ldr	r0, [pc, #84]	; (80007b0 <MX_GPIO_Init+0x23c>)
 800075a:	f000 febb 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800075e:	2320      	movs	r3, #32
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	4810      	ldr	r0, [pc, #64]	; (80007b4 <MX_GPIO_Init+0x240>)
 8000772:	f000 feaf 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000776:	2302      	movs	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800077a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <MX_GPIO_Init+0x238>)
 800078c:	f000 fea2 	bl	80014d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2006      	movs	r0, #6
 8000796:	f000 fe66 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800079a:	2006      	movs	r0, #6
 800079c:	f000 fe7f 	bl	800149e <HAL_NVIC_EnableIRQ>

}
 80007a0:	bf00      	nop
 80007a2:	3730      	adds	r7, #48	; 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020c00 	.word	0x40020c00
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40020400 	.word	0x40020400

080007c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x50>)
 80007c6:	4a13      	ldr	r2, [pc, #76]	; (8000814 <MX_I2C1_Init+0x54>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x50>)
 80007cc:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_I2C1_Init+0x58>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_I2C1_Init+0x50>)
 80007de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_I2C1_Init+0x50>)
 80007fe:	f002 fc3f 	bl	8003080 <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 f946 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000ac 	.word	0x200000ac
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <HAL_I2C_MspInit+0x84>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d12c      	bne.n	8000898 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800085a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800085e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000860:	2312      	movs	r3, #18
 8000862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800086c:	2304      	movs	r3, #4
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <HAL_I2C_MspInit+0x8c>)
 8000878:	f000 fe2c 	bl	80014d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400

080008ac <_write>:
void SystemClock_Config(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
// function for printf
int _write(int file, char *p, int len) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
	//Parameter: output uart, output char, output length, timeout
	HAL_UART_Transmit(&huart4, p, len, 10);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	230a      	movs	r3, #10
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <_write+0x24>)
 80008c2:	f004 faca 	bl	8004e5a <HAL_UART_Transmit>
	return len;
 80008c6:	687b      	ldr	r3, [r7, #4]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200001f0 	.word	0x200001f0

080008d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008d8:	f000 fc54 	bl	8001184 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008dc:	f000 f84a 	bl	8000974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008e0:	f7ff fe48 	bl	8000574 <MX_GPIO_Init>
	MX_I2C1_Init();
 80008e4:	f7ff ff6c 	bl	80007c0 <MX_I2C1_Init>
	MX_SPI1_Init();
 80008e8:	f000 f8dc 	bl	8000aa4 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 80008ec:	f006 fe44 	bl	8007578 <MX_USB_HOST_Init>
	MX_TIM4_Init();
 80008f0:	f000 fab6 	bl	8000e60 <MX_TIM4_Init>
	MX_TIM2_Init();
 80008f4:	f000 fa66 	bl	8000dc4 <MX_TIM2_Init>
	MX_UART4_Init();
 80008f8:	f000 fba8 	bl	800104c <MX_UART4_Init>

	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80008fc:	210c      	movs	r1, #12
 80008fe:	4817      	ldr	r0, [pc, #92]	; (800095c <main+0x88>)
 8000900:	f003 fb3c 	bl	8003f7c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000904:	4816      	ldr	r0, [pc, #88]	; (8000960 <main+0x8c>)
 8000906:	f003 fa6f 	bl	8003de8 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//매크�?? ?��?���?? 2개로 ?��?��
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, ccr);
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <main+0x90>)
 800090c:	881a      	ldrh	r2, [r3, #0]
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <main+0x88>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	641a      	str	r2, [r3, #64]	; 0x40
		//TIM4 -> CCR4 = ccr; //?��?�� 매크�?? ???�� ?��?���?? ?��?��?��?�� ?��
		ccr += 1000;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <main+0x90>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <main+0x90>)
 8000920:	801a      	strh	r2, [r3, #0]
		if(ccr > TIM4->ARR) ccr = 0;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <main+0x90>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <main+0x94>)
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	429a      	cmp	r2, r3
 800092e:	d902      	bls.n	8000936 <main+0x62>
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <main+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	801a      	strh	r2, [r3, #0]
		HAL_Delay(50);
 8000936:	2032      	movs	r0, #50	; 0x32
 8000938:	f000 fc96 	bl	8001268 <HAL_Delay>
		//		  //받은 &a Data를 전송
		//		  HAL_UART_Transmit(&huart4, &a, 1, 10);
		//}

		//Testinf for printf
		printf("Hello %d\n", n++);
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <main+0x98>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	b2d1      	uxtb	r1, r2
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <main+0x98>)
 8000946:	7011      	strb	r1, [r2, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	4809      	ldr	r0, [pc, #36]	; (8000970 <main+0x9c>)
 800094c:	f007 f9e6 	bl	8007d1c <iprintf>
		HAL_Delay(1000);
 8000950:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000954:	f000 fc88 	bl	8001268 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, ccr);
 8000958:	e7d7      	b.n	800090a <main+0x36>
 800095a:	bf00      	nop
 800095c:	200001a8 	.word	0x200001a8
 8000960:	20000160 	.word	0x20000160
 8000964:	20000100 	.word	0x20000100
 8000968:	40000800 	.word	0x40000800
 800096c:	20000102 	.word	0x20000102
 8000970:	08008a90 	.word	0x08008a90

08000974 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f007 f8e2 	bl	8007b4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <SystemClock_Config+0xcc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a27      	ldr	r2, [pc, #156]	; (8000a40 <SystemClock_Config+0xcc>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <SystemClock_Config+0xcc>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a21      	ldr	r2, [pc, #132]	; (8000a44 <SystemClock_Config+0xd0>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <SystemClock_Config+0xd0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80009e4:	2308      	movs	r3, #8
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009ec:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80009f2:	2307      	movs	r3, #7
 80009f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fc84 	bl	8003308 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000a06:	f000 f847 	bl	8000a98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2105      	movs	r1, #5
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fee5 	bl	80037f8 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000a34:	f000 f830 	bl	8000a98 <Error_Handler>
	}
}
 8000a38:	bf00      	nop
 8000a3a:	3750      	adds	r7, #80	; 0x50
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//Interrupt Switch
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d104      	bne.n	8000a62 <HAL_GPIO_EXTI_Callback+0x1a>
		Blue_LED_Toggle;
 8000a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <HAL_GPIO_EXTI_Callback+0x24>)
 8000a5e:	f000 feee 	bl	800183e <HAL_GPIO_TogglePin>
	}
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <HAL_TIM_PeriodElapsedCallback>:

//Timer Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a80:	d104      	bne.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x1c>
		Green_LED_Toggle;
 8000a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a88:	f000 fed9 	bl	800183e <HAL_GPIO_TogglePin>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020c00 	.word	0x40020c00

08000a98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <MX_SPI1_Init+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000af0:	220a      	movs	r2, #10
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000af6:	f003 f89f 	bl	8003c38 <HAL_SPI_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b00:	f7ff ffca 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000104 	.word	0x20000104
 8000b0c:	40013000 	.word	0x40013000

08000b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_SPI_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12b      	bne.n	8000b8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b6a:	23e0      	movs	r3, #224	; 0xe0
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b86:	f000 fca5 	bl	80014d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40013000 	.word	0x40013000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bde:	2007      	movs	r0, #7
 8000be0:	f000 fc36 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 faf4 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 fe13 	bl	8001874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <TIM2_IRQHandler+0x10>)
 8000c5a:	f003 fa57 	bl	800410c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000160 	.word	0x20000160

08000c68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM4_IRQHandler+0x10>)
 8000c6e:	f003 fa4d 	bl	800410c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001a8 	.word	0x200001a8

08000c7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <OTG_FS_IRQHandler+0x10>)
 8000c82:	f001 f879 	bl	8001d78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000614 	.word	0x20000614

08000c90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
  }

  return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_isatty>:

int _isatty(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f006 feb8 	bl	8007ad8 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20020000 	.word	0x20020000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	2000015c 	.word	0x2000015c
 8000d9c:	20000928 	.word	0x20000928

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_TIM2_Init+0x98>)
 8000de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_TIM2_Init+0x98>)
 8000dea:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000dee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_TIM2_Init+0x98>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_TIM2_Init+0x98>)
 8000df8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_TIM2_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_TIM2_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e0a:	4814      	ldr	r0, [pc, #80]	; (8000e5c <MX_TIM2_Init+0x98>)
 8000e0c:	f002 ff9d 	bl	8003d4a <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e16:	f7ff fe3f 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_TIM2_Init+0x98>)
 8000e28:	f003 fb3a 	bl	80044a0 <HAL_TIM_ConfigClockSource>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e32:	f7ff fe31 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_TIM2_Init+0x98>)
 8000e44:	f003 ff2c 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e4e:	f7ff fe23 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000160 	.word	0x20000160

08000e60 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08e      	sub	sp, #56	; 0x38
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e90:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000e92:	4a2e      	ldr	r2, [pc, #184]	; (8000f4c <MX_TIM4_Init+0xec>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000e98:	2213      	movs	r2, #19
 8000e9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000-1;
 8000ea2:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000ea4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000ea8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eb6:	4824      	ldr	r0, [pc, #144]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000eb8:	f002 ff47 	bl	8003d4a <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ec2:	f7ff fde9 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481d      	ldr	r0, [pc, #116]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000ed4:	f003 fae4 	bl	80044a0 <HAL_TIM_ConfigClockSource>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ede:	f7ff fddb 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ee2:	4819      	ldr	r0, [pc, #100]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000ee4:	f002 fff0 	bl	8003ec8 <HAL_TIM_PWM_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000eee:	f7ff fdd3 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	4619      	mov	r1, r3
 8000f00:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000f02:	f003 fecd 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f0c:	f7ff fdc4 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f10:	2360      	movs	r3, #96	; 0x60
 8000f12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21000-1;
 8000f14:	f245 2307 	movw	r3, #20999	; 0x5207
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	220c      	movs	r2, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000f2a:	f003 f9f7 	bl	800431c <HAL_TIM_PWM_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f34:	f7ff fdb0 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <MX_TIM4_Init+0xe8>)
 8000f3a:	f000 f84d 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000f3e:	bf00      	nop
 8000f40:	3738      	adds	r7, #56	; 0x38
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200001a8 	.word	0x200001a8
 8000f4c:	40000800 	.word	0x40000800

08000f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d116      	bne.n	8000f90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <HAL_TIM_Base_MspInit+0x80>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_TIM_Base_MspInit+0x80>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_TIM_Base_MspInit+0x80>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	201c      	movs	r0, #28
 8000f84:	f000 fa6f 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f88:	201c      	movs	r0, #28
 8000f8a:	f000 fa88 	bl	800149e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f8e:	e01a      	b.n	8000fc6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_TIM_Base_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d115      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_TIM_Base_MspInit+0x80>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <HAL_TIM_Base_MspInit+0x80>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_TIM_Base_MspInit+0x80>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	201e      	movs	r0, #30
 8000fbc:	f000 fa53 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fc0:	201e      	movs	r0, #30
 8000fc2:	f000 fa6c 	bl	800149e <HAL_NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40000800 	.word	0x40000800

08000fd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <HAL_TIM_MspPostInit+0x68>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d11e      	bne.n	8001038 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_TIM_MspPostInit+0x6c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_TIM_MspPostInit+0x6c>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_TIM_MspPostInit+0x6c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001028:	2302      	movs	r3, #2
 800102a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_TIM_MspPostInit+0x70>)
 8001034:	f000 fa4e 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40000800 	.word	0x40000800
 8001044:	40023800 	.word	0x40023800
 8001048:	40020c00 	.word	0x40020c00

0800104c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_UART4_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_UART4_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_UART4_Init+0x4c>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_UART4_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_UART4_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_UART4_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_UART4_Init+0x4c>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_UART4_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_UART4_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_UART4_Init+0x4c>)
 8001084:	f003 fe9c 	bl	8004dc0 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800108e:	f7ff fd03 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001f0 	.word	0x200001f0
 800109c:	40004c00 	.word	0x40004c00

080010a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_UART_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12c      	bne.n	800111c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800110c:	2308      	movs	r3, #8
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_UART_MspInit+0x8c>)
 8001118:	f000 f9dc 	bl	80014d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40004c00 	.word	0x40004c00
 8001128:	40023800 	.word	0x40023800
 800112c:	40020800 	.word	0x40020800

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800114c:	4c0b      	ldr	r4, [pc, #44]	; (800117c <LoopFillZerobss+0x26>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115a:	f7ff fe21 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f006 fcc1 	bl	8007ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fbb7 	bl	80008d4 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001174:	08008b60 	.word	0x08008b60
  ldr r2, =_sbss
 8001178:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800117c:	20000928 	.word	0x20000928

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f94f 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fcf2 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f967 	bl	80014ba <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f92f 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20000234 	.word	0x20000234

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000234 	.word	0x20000234

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff3e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff8e 	bl	80013a4 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff31 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa2 	bl	800140c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	e16b      	b.n	80017c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f0:	2201      	movs	r2, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 815a 	bne.w	80017c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d005      	beq.n	8001526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	2b02      	cmp	r3, #2
 8001524:	d130      	bne.n	8001588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	69b9      	ldr	r1, [r7, #24]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80b4 	beq.w	80017c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001676:	4a5b      	ldr	r2, [pc, #364]	; (80017e4 <HAL_GPIO_Init+0x310>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_GPIO_Init+0x314>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x226>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a51      	ldr	r2, [pc, #324]	; (80017ec <HAL_GPIO_Init+0x318>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d025      	beq.n	80016f6 <HAL_GPIO_Init+0x222>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_GPIO_Init+0x31c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x21e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4f      	ldr	r2, [pc, #316]	; (80017f4 <HAL_GPIO_Init+0x320>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x21a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4e      	ldr	r2, [pc, #312]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x216>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4d      	ldr	r2, [pc, #308]	; (80017fc <HAL_GPIO_Init+0x328>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x212>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <HAL_GPIO_Init+0x32c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <HAL_GPIO_Init+0x330>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x20a>
 80016da:	2307      	movs	r3, #7
 80016dc:	e00e      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016de:	2308      	movs	r3, #8
 80016e0:	e00c      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e00a      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4935      	ldr	r1, [pc, #212]	; (80017e4 <HAL_GPIO_Init+0x310>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_GPIO_Init+0x334>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173e:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <HAL_GPIO_Init+0x334>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_GPIO_Init+0x334>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <HAL_GPIO_Init+0x334>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f ae90 	bls.w	80014f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40021400 	.word	0x40021400
 8001800:	40021800 	.word	0x40021800
 8001804:	40021c00 	.word	0x40021c00
 8001808:	40013c00 	.word	0x40013c00

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001828:	e003      	b.n	8001832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	041a      	lsls	r2, r3, #16
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	619a      	str	r2, [r3, #24]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001850:	887a      	ldrh	r2, [r7, #2]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	041a      	lsls	r2, r3, #16
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43d9      	mvns	r1, r3
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	400b      	ands	r3, r1
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	619a      	str	r2, [r3, #24]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f8d8 	bl	8000a48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40013c00 	.word	0x40013c00

080018a4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	b08f      	sub	sp, #60	; 0x3c
 80018a8:	af0a      	add	r7, sp, #40	; 0x28
 80018aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e054      	b.n	8001960 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d106      	bne.n	80018d6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f005 fea5 	bl	8007620 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 fe97 	bl	8005628 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	687e      	ldr	r6, [r7, #4]
 8001902:	466d      	mov	r5, sp
 8001904:	f106 0410 	add.w	r4, r6, #16
 8001908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001910:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001914:	e885 0003 	stmia.w	r5, {r0, r1}
 8001918:	1d33      	adds	r3, r6, #4
 800191a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191c:	6838      	ldr	r0, [r7, #0]
 800191e:	f003 fe11 	bl	8005544 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fe8e 	bl	800564a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	687e      	ldr	r6, [r7, #4]
 8001936:	466d      	mov	r5, sp
 8001938:	f106 0410 	add.w	r4, r6, #16
 800193c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001944:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001948:	e885 0003 	stmia.w	r5, {r0, r1}
 800194c:	1d33      	adds	r3, r6, #4
 800194e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001950:	6838      	ldr	r0, [r7, #0]
 8001952:	f004 f817 	bl	8005984 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001968 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af04      	add	r7, sp, #16
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	70fb      	strb	r3, [r7, #3]
 800197a:	460b      	mov	r3, r1
 800197c:	70bb      	strb	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_HCD_HC_Init+0x28>
 800198c:	2302      	movs	r3, #2
 800198e:	e076      	b.n	8001a7e <HAL_HCD_HC_Init+0x116>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	333d      	adds	r3, #61	; 0x3d
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3338      	adds	r3, #56	; 0x38
 80019b8:	787a      	ldrb	r2, [r7, #1]
 80019ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3340      	adds	r3, #64	; 0x40
 80019ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019cc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3339      	adds	r3, #57	; 0x39
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	333f      	adds	r3, #63	; 0x3f
 80019ee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	78ba      	ldrb	r2, [r7, #2]
 80019f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019fc:	b2d0      	uxtb	r0, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	333a      	adds	r3, #58	; 0x3a
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da09      	bge.n	8001a2a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	333b      	adds	r3, #59	; 0x3b
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e008      	b.n	8001a3c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	333b      	adds	r3, #59	; 0x3b
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	333c      	adds	r3, #60	; 0x3c
 8001a4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a4e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	787c      	ldrb	r4, [r7, #1]
 8001a56:	78ba      	ldrb	r2, [r7, #2]
 8001a58:	78f9      	ldrb	r1, [r7, #3]
 8001a5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	f004 f8e6 	bl	8005c3c <USB_HC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}

08001a86 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_HCD_HC_Halt+0x1e>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e00f      	b.n	8001ac4 <HAL_HCD_HC_Halt+0x3e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fb36 	bl	8006126 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	70fb      	strb	r3, [r7, #3]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70bb      	strb	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	333b      	adds	r3, #59	; 0x3b
 8001af4:	78ba      	ldrb	r2, [r7, #2]
 8001af6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	333f      	adds	r3, #63	; 0x3f
 8001b06:	787a      	ldrb	r2, [r7, #1]
 8001b08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b0a:	7c3b      	ldrb	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d112      	bne.n	8001b36 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3342      	adds	r3, #66	; 0x42
 8001b1e:	2203      	movs	r2, #3
 8001b20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	212c      	movs	r1, #44	; 0x2c
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	333d      	adds	r3, #61	; 0x3d
 8001b30:	7f3a      	ldrb	r2, [r7, #28]
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e008      	b.n	8001b48 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	3342      	adds	r3, #66	; 0x42
 8001b44:	2202      	movs	r2, #2
 8001b46:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	f200 80c6 	bhi.w	8001cdc <HAL_HCD_HC_SubmitRequest+0x210>
 8001b50:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001cc9 	.word	0x08001cc9
 8001b60:	08001bcd 	.word	0x08001bcd
 8001b64:	08001c4b 	.word	0x08001c4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b68:	7c3b      	ldrb	r3, [r7, #16]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	f040 80b8 	bne.w	8001ce0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b70:	78bb      	ldrb	r3, [r7, #2]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 80b4 	bne.w	8001ce0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b78:	8b3b      	ldrh	r3, [r7, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d108      	bne.n	8001b90 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	212c      	movs	r1, #44	; 0x2c
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	3355      	adds	r3, #85	; 0x55
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	212c      	movs	r1, #44	; 0x2c
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3355      	adds	r3, #85	; 0x55
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3342      	adds	r3, #66	; 0x42
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bb6:	e093      	b.n	8001ce0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3342      	adds	r3, #66	; 0x42
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
      break;
 8001bca:	e089      	b.n	8001ce0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bcc:	78bb      	ldrb	r3, [r7, #2]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d11d      	bne.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3355      	adds	r3, #85	; 0x55
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3342      	adds	r3, #66	; 0x42
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bf8:	e073      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	212c      	movs	r1, #44	; 0x2c
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	3342      	adds	r3, #66	; 0x42
 8001c08:	2202      	movs	r2, #2
 8001c0a:	701a      	strb	r2, [r3, #0]
      break;
 8001c0c:	e069      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	212c      	movs	r1, #44	; 0x2c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3354      	adds	r3, #84	; 0x54
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3342      	adds	r3, #66	; 0x42
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
      break;
 8001c34:	e055      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3342      	adds	r3, #66	; 0x42
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
      break;
 8001c48:	e04b      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c4a:	78bb      	ldrb	r3, [r7, #2]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11d      	bne.n	8001c8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	212c      	movs	r1, #44	; 0x2c
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3355      	adds	r3, #85	; 0x55
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3342      	adds	r3, #66	; 0x42
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c76:	e034      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3342      	adds	r3, #66	; 0x42
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
      break;
 8001c8a:	e02a      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3354      	adds	r3, #84	; 0x54
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3342      	adds	r3, #66	; 0x42
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
      break;
 8001cb2:	e016      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3342      	adds	r3, #66	; 0x42
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	701a      	strb	r2, [r3, #0]
      break;
 8001cc6:	e00c      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3342      	adds	r3, #66	; 0x42
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001cdc:	bf00      	nop
 8001cde:	e000      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ce0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3344      	adds	r3, #68	; 0x44
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	8b3a      	ldrh	r2, [r7, #24]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	202c      	movs	r0, #44	; 0x2c
 8001cfc:	fb00 f303 	mul.w	r3, r0, r3
 8001d00:	440b      	add	r3, r1
 8001d02:	334c      	adds	r3, #76	; 0x4c
 8001d04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	3360      	adds	r3, #96	; 0x60
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3350      	adds	r3, #80	; 0x50
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3339      	adds	r3, #57	; 0x39
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3361      	adds	r3, #97	; 0x61
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	222c      	movs	r2, #44	; 0x2c
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	3338      	adds	r3, #56	; 0x38
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	18d1      	adds	r1, r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	f004 f88a 	bl	8005e80 <USB_HC_StartXfer>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop

08001d78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fdb5 	bl	80058fe <USB_GetMode>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	f040 80f6 	bne.w	8001f88 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fd99 	bl	80058d8 <USB_ReadInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80ec 	beq.w	8001f86 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fd90 	bl	80058d8 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dc2:	d104      	bne.n	8001dce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fd80 	bl	80058d8 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001de2:	d104      	bne.n	8001dee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fd70 	bl	80058d8 <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e02:	d104      	bne.n	8001e0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fd60 	bl	80058d8 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d103      	bne.n	8001e2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2202      	movs	r2, #2
 8001e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fd52 	bl	80058d8 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e3e:	d11c      	bne.n	8001e7a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	6938      	ldr	r0, [r7, #16]
 8001e5e:	f003 fc41 	bl	80056e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e62:	6938      	ldr	r0, [r7, #16]
 8001e64:	f003 fc72 	bl	800574c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fe48 	bl	8005b04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f005 fc51 	bl	800771c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fd2a 	bl	80058d8 <USB_ReadInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8e:	d102      	bne.n	8001e96 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 f882 	bl	8002f9a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fd1c 	bl	80058d8 <USB_ReadInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d106      	bne.n	8001eb8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f005 fc1a 	bl	80076e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fd0b 	bl	80058d8 <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d101      	bne.n	8001ed0 <HAL_HCD_IRQHandler+0x158>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_HCD_IRQHandler+0x15a>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0210 	bic.w	r2, r2, #16
 8001ee4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 ff85 	bl	8002df6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0210 	orr.w	r2, r2, #16
 8001efa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fce9 	bl	80058d8 <USB_ReadInterrupts>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f10:	d13a      	bne.n	8001f88 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 f8f4 	bl	8006104 <USB_HC_ReadInterrupt>
 8001f1c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e025      	b.n	8001f70 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d018      	beq.n	8001f6a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f4e:	d106      	bne.n	8001f5e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4619      	mov	r1, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f88f 	bl	800207a <HCD_HC_IN_IRQHandler>
 8001f5c:	e005      	b.n	8001f6a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fbdd 	bl	8002724 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3d4      	bcc.n	8001f24 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	e000      	b.n	8001f88 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f86:	bf00      	nop
    }
  }
}
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_HCD_Start+0x16>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e013      	b.n	8001fcc <HAL_HCD_Start+0x3e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 fde0 	bl	8005b78 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fb22 	bl	8005606 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_HCD_Stop+0x16>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e00d      	b.n	8002006 <HAL_HCD_Stop+0x32>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 f9ce 	bl	8006398 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3360      	adds	r3, #96	; 0x60
 8002028:	781b      	ldrb	r3, [r3, #0]
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3350      	adds	r3, #80	; 0x50
 8002050:	681b      	ldr	r3, [r3, #0]
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fdd4 	bl	8005c18 <USB_GetCurrentFrame>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d11a      	bne.n	80020e0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	461a      	mov	r2, r3
 80020b8:	2304      	movs	r3, #4
 80020ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3361      	adds	r3, #97	; 0x61
 80020ca:	2206      	movs	r2, #6
 80020cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 f824 	bl	8006126 <USB_HC_Halt>
 80020de:	e0af      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f6:	d11b      	bne.n	8002130 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	461a      	mov	r2, r3
 8002106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800210a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3361      	adds	r3, #97	; 0x61
 800211a:	2207      	movs	r2, #7
 800211c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fffc 	bl	8006126 <USB_HC_Halt>
 800212e:	e087      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b20      	cmp	r3, #32
 8002144:	d109      	bne.n	800215a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	461a      	mov	r2, r3
 8002154:	2320      	movs	r3, #32
 8002156:	6093      	str	r3, [r2, #8]
 8002158:	e072      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b08      	cmp	r3, #8
 800216e:	d11a      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	461a      	mov	r2, r3
 800217e:	2308      	movs	r3, #8
 8002180:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3361      	adds	r3, #97	; 0x61
 8002190:	2205      	movs	r2, #5
 8002192:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 ffc1 	bl	8006126 <USB_HC_Halt>
 80021a4:	e04c      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021bc:	d11b      	bne.n	80021f6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	461a      	mov	r2, r3
 80021cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3361      	adds	r3, #97	; 0x61
 80021e0:	2208      	movs	r2, #8
 80021e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 ff99 	bl	8006126 <USB_HC_Halt>
 80021f4:	e024      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002208:	2b80      	cmp	r3, #128	; 0x80
 800220a:	d119      	bne.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3361      	adds	r3, #97	; 0x61
 800222c:	2206      	movs	r2, #6
 800222e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f003 ff73 	bl	8006126 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002256:	d112      	bne.n	800227e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f003 ff5f 	bl	8006126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800227a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800227c:	e24e      	b.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	f040 80df 	bne.w	8002454 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d019      	beq.n	80022d2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3348      	adds	r3, #72	; 0x48
 80022ac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0159      	lsls	r1, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	440b      	add	r3, r1
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	202c      	movs	r0, #44	; 0x2c
 80022c8:	fb00 f303 	mul.w	r3, r0, r3
 80022cc:	440b      	add	r3, r1
 80022ce:	3350      	adds	r3, #80	; 0x50
 80022d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3361      	adds	r3, #97	; 0x61
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	335c      	adds	r3, #92	; 0x5c
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2301      	movs	r3, #1
 8002306:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	333f      	adds	r3, #63	; 0x3f
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	333f      	adds	r3, #63	; 0x3f
 800232a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800232c:	2b02      	cmp	r3, #2
 800232e:	d111      	bne.n	8002354 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f003 fef3 	bl	8006126 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	461a      	mov	r2, r3
 800234e:	2310      	movs	r3, #16
 8002350:	6093      	str	r3, [r2, #8]
 8002352:	e03a      	b.n	80023ca <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	333f      	adds	r3, #63	; 0x3f
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d009      	beq.n	800237c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	333f      	adds	r3, #63	; 0x3f
 8002376:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002378:	2b01      	cmp	r3, #1
 800237a:	d126      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	0151      	lsls	r1, r2, #5
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	440a      	add	r2, r1
 8002392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800239a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3360      	adds	r3, #96	; 0x60
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	b2d9      	uxtb	r1, r3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	202c      	movs	r0, #44	; 0x2c
 80023b8:	fb00 f303 	mul.w	r3, r0, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3360      	adds	r3, #96	; 0x60
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f005 f9b7 	bl	8007738 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d12b      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3348      	adds	r3, #72	; 0x48
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	202c      	movs	r0, #44	; 0x2c
 80023e8:	fb00 f202 	mul.w	r2, r0, r2
 80023ec:	440a      	add	r2, r1
 80023ee:	3240      	adds	r2, #64	; 0x40
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 818e 	beq.w	800271c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3354      	adds	r3, #84	; 0x54
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f083 0301 	eor.w	r3, r3, #1
 8002414:	b2d8      	uxtb	r0, r3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3354      	adds	r3, #84	; 0x54
 8002424:	4602      	mov	r2, r0
 8002426:	701a      	strb	r2, [r3, #0]
}
 8002428:	e178      	b.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	3354      	adds	r3, #84	; 0x54
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f083 0301 	eor.w	r3, r3, #1
 800243e:	b2d8      	uxtb	r0, r3
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3354      	adds	r3, #84	; 0x54
 800244e:	4602      	mov	r2, r0
 8002450:	701a      	strb	r2, [r3, #0]
}
 8002452:	e163      	b.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	f040 80f6 	bne.w	8002658 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3361      	adds	r3, #97	; 0x61
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d109      	bne.n	8002494 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3360      	adds	r3, #96	; 0x60
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e0c9      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	3361      	adds	r3, #97	; 0x61
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d109      	bne.n	80024bc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3360      	adds	r3, #96	; 0x60
 80024b6:	2205      	movs	r2, #5
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e0b5      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3361      	adds	r3, #97	; 0x61
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d009      	beq.n	80024e4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3361      	adds	r3, #97	; 0x61
 80024de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d150      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	335c      	adds	r3, #92	; 0x5c
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	202c      	movs	r0, #44	; 0x2c
 80024fc:	fb00 f303 	mul.w	r3, r0, r3
 8002500:	440b      	add	r3, r1
 8002502:	335c      	adds	r3, #92	; 0x5c
 8002504:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	335c      	adds	r3, #92	; 0x5c
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d912      	bls.n	8002540 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	335c      	adds	r3, #92	; 0x5c
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	2204      	movs	r2, #4
 800253c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800253e:	e073      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3360      	adds	r3, #96	; 0x60
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002568:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002570:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	461a      	mov	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002584:	e050      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3361      	adds	r3, #97	; 0x61
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d122      	bne.n	80025e0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3360      	adds	r3, #96	; 0x60
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e023      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3361      	adds	r3, #97	; 0x61
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b07      	cmp	r3, #7
 80025f2:	d119      	bne.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	335c      	adds	r3, #92	; 0x5c
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	202c      	movs	r0, #44	; 0x2c
 800260c:	fb00 f303 	mul.w	r3, r0, r3
 8002610:	440b      	add	r3, r1
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3360      	adds	r3, #96	; 0x60
 8002624:	2204      	movs	r2, #4
 8002626:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	461a      	mov	r2, r3
 8002636:	2302      	movs	r3, #2
 8002638:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	b2d9      	uxtb	r1, r3
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	202c      	movs	r0, #44	; 0x2c
 8002644:	fb00 f303 	mul.w	r3, r0, r3
 8002648:	4413      	add	r3, r2
 800264a:	3360      	adds	r3, #96	; 0x60
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f005 f871 	bl	8007738 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002656:	e061      	b.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b10      	cmp	r3, #16
 800266c:	d156      	bne.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	333f      	adds	r3, #63	; 0x3f
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d111      	bne.n	80026a6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	335c      	adds	r3, #92	; 0x5c
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fd41 	bl	8006126 <USB_HC_Halt>
 80026a4:	e031      	b.n	800270a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	333f      	adds	r3, #63	; 0x3f
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	333f      	adds	r3, #63	; 0x3f
 80026c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d11d      	bne.n	800270a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	335c      	adds	r3, #92	; 0x5c
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d110      	bne.n	800270a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3361      	adds	r3, #97	; 0x61
 80026f6:	2203      	movs	r2, #3
 80026f8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f003 fd0e 	bl	8006126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	2310      	movs	r3, #16
 800271a:	6093      	str	r3, [r2, #8]
}
 800271c:	bf00      	nop
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11a      	bne.n	800278a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	2304      	movs	r3, #4
 8002764:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3361      	adds	r3, #97	; 0x61
 8002774:	2206      	movs	r2, #6
 8002776:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fccf 	bl	8006126 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002788:	e331      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d12e      	bne.n	80027fe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	2320      	movs	r3, #32
 80027b0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	333d      	adds	r3, #61	; 0x3d
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f040 8313 	bne.w	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	333d      	adds	r3, #61	; 0x3d
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3360      	adds	r3, #96	; 0x60
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 fc95 	bl	8006126 <USB_HC_Halt>
}
 80027fc:	e2f7      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d112      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	461a      	mov	r2, r3
 8002824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002828:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fc76 	bl	8006126 <USB_HC_Halt>
}
 800283a:	e2d8      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d140      	bne.n	80028d4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	335c      	adds	r3, #92	; 0x5c
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d111      	bne.n	800289e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	333d      	adds	r3, #61	; 0x3d
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	461a      	mov	r2, r3
 800289a:	2340      	movs	r3, #64	; 0x40
 800289c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	461a      	mov	r2, r3
 80028ac:	2301      	movs	r3, #1
 80028ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3361      	adds	r3, #97	; 0x61
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fc2a 	bl	8006126 <USB_HC_Halt>
}
 80028d2:	e28c      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d12c      	bne.n	8002944 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3361      	adds	r3, #97	; 0x61
 80028f8:	2204      	movs	r2, #4
 80028fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	333d      	adds	r3, #61	; 0x3d
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	335c      	adds	r3, #92	; 0x5c
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f003 fbfb 	bl	8006126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	461a      	mov	r2, r3
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	6093      	str	r3, [r2, #8]
}
 8002942:	e254      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b08      	cmp	r3, #8
 8002958:	d11a      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2308      	movs	r3, #8
 800296a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3361      	adds	r3, #97	; 0x61
 800297a:	2205      	movs	r2, #5
 800297c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fbcc 	bl	8006126 <USB_HC_Halt>
}
 800298e:	e22e      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d140      	bne.n	8002a28 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	335c      	adds	r3, #92	; 0x5c
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	2203      	movs	r2, #3
 80029c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	333d      	adds	r3, #61	; 0x3d
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d112      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	333c      	adds	r3, #60	; 0x3c
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	333d      	adds	r3, #61	; 0x3d
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fb89 	bl	8006126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	2310      	movs	r3, #16
 8002a24:	6093      	str	r3, [r2, #8]
}
 8002a26:	e1e2      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b80      	cmp	r3, #128	; 0x80
 8002a3c:	d164      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d111      	bne.n	8002a6a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3361      	adds	r3, #97	; 0x61
 8002a54:	2206      	movs	r2, #6
 8002a56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fb5f 	bl	8006126 <USB_HC_Halt>
 8002a68:	e044      	b.n	8002af4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	335c      	adds	r3, #92	; 0x5c
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	202c      	movs	r0, #44	; 0x2c
 8002a82:	fb00 f303 	mul.w	r3, r0, r3
 8002a86:	440b      	add	r3, r1
 8002a88:	335c      	adds	r3, #92	; 0x5c
 8002a8a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	335c      	adds	r3, #92	; 0x5c
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d920      	bls.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	335c      	adds	r3, #92	; 0x5c
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	3360      	adds	r3, #96	; 0x60
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	b2d9      	uxtb	r1, r3
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	202c      	movs	r0, #44	; 0x2c
 8002ace:	fb00 f303 	mul.w	r3, r0, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f004 fe2c 	bl	8007738 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ae0:	e008      	b.n	8002af4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3360      	adds	r3, #96	; 0x60
 8002af0:	2202      	movs	r2, #2
 8002af2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	461a      	mov	r2, r3
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	6093      	str	r3, [r2, #8]
}
 8002b06:	e172      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1e:	d11b      	bne.n	8002b58 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3361      	adds	r3, #97	; 0x61
 8002b2e:	2208      	movs	r2, #8
 8002b30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 faf2 	bl	8006126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b54:	6093      	str	r3, [r2, #8]
}
 8002b56:	e14a      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	f040 813f 	bne.w	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3361      	adds	r3, #97	; 0x61
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d17d      	bne.n	8002c80 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	333f      	adds	r3, #63	; 0x3f
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d00a      	beq.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	333f      	adds	r3, #63	; 0x3f
 8002bb8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	f040 8100 	bne.w	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d113      	bne.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3355      	adds	r3, #85	; 0x55
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	f083 0301 	eor.w	r3, r3, #1
 8002bdc:	b2d8      	uxtb	r0, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3355      	adds	r3, #85	; 0x55
 8002bec:	4602      	mov	r2, r0
 8002bee:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	f040 80e3 	bne.w	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	334c      	adds	r3, #76	; 0x4c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80d8 	beq.w	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	334c      	adds	r3, #76	; 0x4c
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	202c      	movs	r0, #44	; 0x2c
 8002c26:	fb00 f202 	mul.w	r2, r0, r2
 8002c2a:	440a      	add	r2, r1
 8002c2c:	3240      	adds	r2, #64	; 0x40
 8002c2e:	8812      	ldrh	r2, [r2, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	202c      	movs	r0, #44	; 0x2c
 8002c3a:	fb00 f202 	mul.w	r2, r0, r2
 8002c3e:	440a      	add	r2, r1
 8002c40:	3240      	adds	r2, #64	; 0x40
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80b5 	beq.w	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3355      	adds	r3, #85	; 0x55
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	f083 0301 	eor.w	r3, r3, #1
 8002c6a:	b2d8      	uxtb	r0, r3
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3355      	adds	r3, #85	; 0x55
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e09f      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3361      	adds	r3, #97	; 0x61
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d109      	bne.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3360      	adds	r3, #96	; 0x60
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e08b      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3361      	adds	r3, #97	; 0x61
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d109      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3360      	adds	r3, #96	; 0x60
 8002cca:	2202      	movs	r2, #2
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	e077      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3361      	adds	r3, #97	; 0x61
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d109      	bne.n	8002cf8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3360      	adds	r3, #96	; 0x60
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e063      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3361      	adds	r3, #97	; 0x61
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b06      	cmp	r3, #6
 8002d0a:	d009      	beq.n	8002d20 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3361      	adds	r3, #97	; 0x61
 8002d1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d14f      	bne.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	335c      	adds	r3, #92	; 0x5c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	202c      	movs	r0, #44	; 0x2c
 8002d38:	fb00 f303 	mul.w	r3, r0, r3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	335c      	adds	r3, #92	; 0x5c
 8002d40:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	335c      	adds	r3, #92	; 0x5c
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d912      	bls.n	8002d7c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	335c      	adds	r3, #92	; 0x5c
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3360      	adds	r3, #96	; 0x60
 8002d76:	2204      	movs	r2, #4
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e021      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3360      	adds	r3, #96	; 0x60
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002da4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dac:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2302      	movs	r3, #2
 8002dd0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	b2d9      	uxtb	r1, r3
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	202c      	movs	r0, #44	; 0x2c
 8002ddc:	fb00 f303 	mul.w	r3, r0, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3360      	adds	r3, #96	; 0x60
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f004 fca5 	bl	8007738 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dee:	bf00      	nop
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b08a      	sub	sp, #40	; 0x28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	0c5b      	lsrs	r3, r3, #17
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d004      	beq.n	8002e3c <HCD_RXQLVL_IRQHandler+0x46>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	f000 80a9 	beq.w	8002f8c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e3a:	e0aa      	b.n	8002f92 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80a6 	beq.w	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3344      	adds	r3, #68	; 0x44
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 809b 	beq.w	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3350      	adds	r3, #80	; 0x50
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	441a      	add	r2, r3
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	202c      	movs	r0, #44	; 0x2c
 8002e74:	fb00 f303 	mul.w	r3, r0, r3
 8002e78:	440b      	add	r3, r1
 8002e7a:	334c      	adds	r3, #76	; 0x4c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d87a      	bhi.n	8002f78 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3344      	adds	r3, #68	; 0x44
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f002 fcc4 	bl	8005828 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3344      	adds	r3, #68	; 0x44
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	202c      	movs	r0, #44	; 0x2c
 8002eba:	fb00 f303 	mul.w	r3, r0, r3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3344      	adds	r3, #68	; 0x44
 8002ec2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3350      	adds	r3, #80	; 0x50
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	441a      	add	r2, r3
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	202c      	movs	r0, #44	; 0x2c
 8002ede:	fb00 f303 	mul.w	r3, r0, r3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3350      	adds	r3, #80	; 0x50
 8002ee6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	0cdb      	lsrs	r3, r3, #19
 8002ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3340      	adds	r3, #64	; 0x40
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d13c      	bne.n	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d039      	beq.n	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f32:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f3a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3354      	adds	r3, #84	; 0x54
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	f083 0301 	eor.w	r3, r3, #1
 8002f62:	b2d8      	uxtb	r0, r3
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3354      	adds	r3, #84	; 0x54
 8002f72:	4602      	mov	r2, r0
 8002f74:	701a      	strb	r2, [r3, #0]
      break;
 8002f76:	e00b      	b.n	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3360      	adds	r3, #96	; 0x60
 8002f86:	2204      	movs	r2, #4
 8002f88:	701a      	strb	r2, [r3, #0]
      break;
 8002f8a:	e001      	b.n	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f90:	bf00      	nop
  }
}
 8002f92:	bf00      	nop
 8002f94:	3728      	adds	r7, #40	; 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fc6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d10b      	bne.n	8002fea <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d102      	bne.n	8002fe2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f004 fb8f 	bl	8007700 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d132      	bne.n	800305a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d126      	bne.n	8003054 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d113      	bne.n	8003036 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003014:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003018:	d106      	bne.n	8003028 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2102      	movs	r1, #2
 8003020:	4618      	mov	r0, r3
 8003022:	f002 fd6f 	bl	8005b04 <USB_InitFSLSPClkSel>
 8003026:	e011      	b.n	800304c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f002 fd68 	bl	8005b04 <USB_InitFSLSPClkSel>
 8003034:	e00a      	b.n	800304c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d106      	bne.n	800304c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003044:	461a      	mov	r2, r3
 8003046:	f64e 2360 	movw	r3, #60000	; 0xea60
 800304a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f004 fb81 	bl	8007754 <HAL_HCD_PortEnabled_Callback>
 8003052:	e002      	b.n	800305a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f004 fb8b 	bl	8007770 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b20      	cmp	r3, #32
 8003062:	d103      	bne.n	800306c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	6013      	str	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e12b      	b.n	80032ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fbb8 	bl	800081c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2224      	movs	r2, #36	; 0x24
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e4:	f000 fd80 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 80030e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a81      	ldr	r2, [pc, #516]	; (80032f4 <HAL_I2C_Init+0x274>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d807      	bhi.n	8003104 <HAL_I2C_Init+0x84>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a80      	ldr	r2, [pc, #512]	; (80032f8 <HAL_I2C_Init+0x278>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	bf94      	ite	ls
 80030fc:	2301      	movls	r3, #1
 80030fe:	2300      	movhi	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e006      	b.n	8003112 <HAL_I2C_Init+0x92>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a7d      	ldr	r2, [pc, #500]	; (80032fc <HAL_I2C_Init+0x27c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	bf94      	ite	ls
 800310c:	2301      	movls	r3, #1
 800310e:	2300      	movhi	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0e7      	b.n	80032ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a78      	ldr	r2, [pc, #480]	; (8003300 <HAL_I2C_Init+0x280>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	0c9b      	lsrs	r3, r3, #18
 8003124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a6a      	ldr	r2, [pc, #424]	; (80032f4 <HAL_I2C_Init+0x274>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d802      	bhi.n	8003154 <HAL_I2C_Init+0xd4>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3301      	adds	r3, #1
 8003152:	e009      	b.n	8003168 <HAL_I2C_Init+0xe8>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	4a69      	ldr	r2, [pc, #420]	; (8003304 <HAL_I2C_Init+0x284>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	3301      	adds	r3, #1
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	430b      	orrs	r3, r1
 800316e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800317a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	495c      	ldr	r1, [pc, #368]	; (80032f4 <HAL_I2C_Init+0x274>)
 8003184:	428b      	cmp	r3, r1
 8003186:	d819      	bhi.n	80031bc <HAL_I2C_Init+0x13c>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e59      	subs	r1, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fbb1 f3f3 	udiv	r3, r1, r3
 8003196:	1c59      	adds	r1, r3, #1
 8003198:	f640 73fc 	movw	r3, #4092	; 0xffc
 800319c:	400b      	ands	r3, r1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_I2C_Init+0x138>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e59      	subs	r1, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b6:	e051      	b.n	800325c <HAL_I2C_Init+0x1dc>
 80031b8:	2304      	movs	r3, #4
 80031ba:	e04f      	b.n	800325c <HAL_I2C_Init+0x1dc>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d111      	bne.n	80031e8 <HAL_I2C_Init+0x168>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e58      	subs	r0, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	440b      	add	r3, r1
 80031d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e012      	b.n	800320e <HAL_I2C_Init+0x18e>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e58      	subs	r0, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	0099      	lsls	r1, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Init+0x196>
 8003212:	2301      	movs	r3, #1
 8003214:	e022      	b.n	800325c <HAL_I2C_Init+0x1dc>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10e      	bne.n	800323c <HAL_I2C_Init+0x1bc>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1e58      	subs	r0, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	440b      	add	r3, r1
 800322c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323a:	e00f      	b.n	800325c <HAL_I2C_Init+0x1dc>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	0099      	lsls	r1, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	6809      	ldr	r1, [r1, #0]
 8003260:	4313      	orrs	r3, r2
 8003262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800328a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6911      	ldr	r1, [r2, #16]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68d2      	ldr	r2, [r2, #12]
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	430b      	orrs	r3, r1
 800329e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	000186a0 	.word	0x000186a0
 80032f8:	001e847f 	.word	0x001e847f
 80032fc:	003d08ff 	.word	0x003d08ff
 8003300:	431bde83 	.word	0x431bde83
 8003304:	10624dd3 	.word	0x10624dd3

08003308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e267      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00c      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e242      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6c      	ldr	r2, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a68      	ldr	r2, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd ff46 	bl	8001250 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd ff42 	bl	8001250 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e207      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd ff32 	bl	8001250 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fd ff2e 	bl	8001250 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f3      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x244>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fd fee7 	bl	8001250 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7fd fee3 	bl	8001250 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a8      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x244>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fd fec6 	bl	8001250 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fd fec2 	bl	8001250 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e187      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d036      	beq.n	8003560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fd fea6 	bl	8001250 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7fd fea2 	bl	8001250 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e167      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
 8003526:	e01b      	b.n	8003560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fd fe8f 	bl	8001250 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00e      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fd fe8b 	bl	8001250 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d907      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e150      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ea      	bne.n	8003536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8097 	beq.w	800369c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b81      	ldr	r3, [pc, #516]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fd fe4b 	bl	8001250 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fd fe47 	bl	8001250 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e10c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ea>
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a63      	ldr	r2, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x30c>
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a5b      	ldr	r2, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b55      	ldr	r3, [pc, #340]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fd fe0c 	bl	8001250 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fd fe08 	bl	8001250 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0cb      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <HAL_RCC_OscConfig+0x334>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fd fdf6 	bl	8001250 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fd fdf2 	bl	8001250 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0b5      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80a1 	beq.w	80037e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d05c      	beq.n	800376c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d141      	bne.n	800373e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fd fdc6 	bl	8001250 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fd fdc2 	bl	8001250 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e087      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fd fd9b 	bl	8001250 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371e:	f7fd fd97 	bl	8001250 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e05c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x416>
 800373c:	e054      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fd fd84 	bl	8001250 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fd80 	bl	8001250 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e038      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d028      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d11a      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fd fcb2 	bl	8001250 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fd fcae 	bl	8001250 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f821 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fc12 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08008aa0 	.word	0x08008aa0
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000004 	.word	0x20000004

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b094      	sub	sp, #80	; 0x50
 80039ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	647b      	str	r3, [r7, #68]	; 0x44
 80039d0:	2300      	movs	r3, #0
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d4:	2300      	movs	r3, #0
 80039d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039dc:	4b79      	ldr	r3, [pc, #484]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d00d      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x40>
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	f200 80e1 	bhi.w	8003bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x34>
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x3a>
 80039f6:	e0db      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039fc:	e0db      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fe:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x208>)
 8003a00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a02:	e0d8      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a04:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b6d      	ldr	r3, [pc, #436]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d063      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	2200      	movs	r2, #0
 8003a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
 8003a32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a36:	4622      	mov	r2, r4
 8003a38:	462b      	mov	r3, r5
 8003a3a:	f04f 0000 	mov.w	r0, #0
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	0159      	lsls	r1, r3, #5
 8003a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a48:	0150      	lsls	r0, r2, #5
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4621      	mov	r1, r4
 8003a50:	1a51      	subs	r1, r2, r1
 8003a52:	6139      	str	r1, [r7, #16]
 8003a54:	4629      	mov	r1, r5
 8003a56:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a68:	4659      	mov	r1, fp
 8003a6a:	018b      	lsls	r3, r1, #6
 8003a6c:	4651      	mov	r1, sl
 8003a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a72:	4651      	mov	r1, sl
 8003a74:	018a      	lsls	r2, r1, #6
 8003a76:	4651      	mov	r1, sl
 8003a78:	ebb2 0801 	subs.w	r8, r2, r1
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a96:	4690      	mov	r8, r2
 8003a98:	4699      	mov	r9, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	eb18 0303 	adds.w	r3, r8, r3
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	eb49 0303 	adc.w	r3, r9, r3
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	024b      	lsls	r3, r1, #9
 8003aba:	4621      	mov	r1, r4
 8003abc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	024a      	lsls	r2, r1, #9
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aca:	2200      	movs	r2, #0
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad4:	f7fc fbcc 	bl	8000270 <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae0:	e058      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b38      	ldr	r3, [pc, #224]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	4611      	mov	r1, r2
 8003aee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	f04f 0000 	mov.w	r0, #0
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	0159      	lsls	r1, r3, #5
 8003b0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0e:	0150      	lsls	r0, r2, #5
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4641      	mov	r1, r8
 8003b16:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b34:	ebb2 040a 	subs.w	r4, r2, sl
 8003b38:	eb63 050b 	sbc.w	r5, r3, fp
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	00eb      	lsls	r3, r5, #3
 8003b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b4a:	00e2      	lsls	r2, r4, #3
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	461d      	mov	r5, r3
 8003b50:	4643      	mov	r3, r8
 8003b52:	18e3      	adds	r3, r4, r3
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	464b      	mov	r3, r9
 8003b58:	eb45 0303 	adc.w	r3, r5, r3
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	028b      	lsls	r3, r1, #10
 8003b6e:	4621      	mov	r1, r4
 8003b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b74:	4621      	mov	r1, r4
 8003b76:	028a      	lsls	r2, r1, #10
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7e:	2200      	movs	r2, #0
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	61fa      	str	r2, [r7, #28]
 8003b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b88:	f7fc fb72 	bl	8000270 <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4613      	mov	r3, r2
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bae:	e002      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3750      	adds	r7, #80	; 0x50
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	00f42400 	.word	0x00f42400
 8003bcc:	007a1200 	.word	0x007a1200

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000000 	.word	0x20000000

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bec:	f7ff fff0 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0a9b      	lsrs	r3, r3, #10
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08008ab0 	.word	0x08008ab0

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c14:	f7ff ffdc 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0b5b      	lsrs	r3, r3, #13
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08008ab0 	.word	0x08008ab0

08003c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e07b      	b.n	8003d42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5a:	d009      	beq.n	8003c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	61da      	str	r2, [r3, #28]
 8003c62:	e005      	b.n	8003c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fc ff40 	bl	8000b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	ea42 0103 	orr.w	r1, r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	f003 0104 	and.w	r1, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f003 0210 	and.w	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e041      	b.n	8003de0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fd f8ed 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4619      	mov	r1, r3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	f000 fc79 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d001      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e04e      	b.n	8003e9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a23      	ldr	r2, [pc, #140]	; (8003eac <HAL_TIM_Base_Start_IT+0xc4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d022      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2a:	d01d      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d018      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00e      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1b      	ldr	r2, [pc, #108]	; (8003ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d009      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d111      	bne.n	8003e8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d010      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	e007      	b.n	8003e9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40010400 	.word	0x40010400
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40001800 	.word	0x40001800

08003ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e041      	b.n	8003f5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f839 	bl	8003f66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f000 fbba 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <HAL_TIM_PWM_Start+0x24>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e022      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x6a>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d109      	bne.n	8003fba <HAL_TIM_PWM_Start+0x3e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	bf14      	ite	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	2300      	moveq	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	e015      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x6a>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d109      	bne.n	8003fd4 <HAL_TIM_PWM_Start+0x58>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	bf14      	ite	ne
 8003fcc:	2301      	movne	r3, #1
 8003fce:	2300      	moveq	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e008      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x6a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e07c      	b.n	80040e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Start+0x82>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ffc:	e013      	b.n	8004026 <HAL_TIM_PWM_Start+0xaa>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0x92>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800400c:	e00b      	b.n	8004026 <HAL_TIM_PWM_Start+0xaa>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0xa2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800401c:	e003      	b.n	8004026 <HAL_TIM_PWM_Start+0xaa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fe10 	bl	8004c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2d      	ldr	r2, [pc, #180]	; (80040f0 <HAL_TIM_PWM_Start+0x174>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_PWM_Start+0xcc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <HAL_TIM_PWM_Start+0x178>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_TIM_PWM_Start+0xd0>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_TIM_PWM_Start+0xd2>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a22      	ldr	r2, [pc, #136]	; (80040f0 <HAL_TIM_PWM_Start+0x174>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d01d      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <HAL_TIM_PWM_Start+0x17c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <HAL_TIM_PWM_Start+0x180>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1c      	ldr	r2, [pc, #112]	; (8004100 <HAL_TIM_PWM_Start+0x184>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <HAL_TIM_PWM_Start+0x178>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_TIM_PWM_Start+0x188>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a16      	ldr	r2, [pc, #88]	; (8004108 <HAL_TIM_PWM_Start+0x18c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d111      	bne.n	80040d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d010      	beq.n	80040e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d4:	e007      	b.n	80040e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40014000 	.word	0x40014000
 8004108:	40001800 	.word	0x40001800

0800410c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0202 	mvn.w	r2, #2
 8004138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa77 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa69 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fa7a 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d122      	bne.n	80041bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b04      	cmp	r3, #4
 8004182:	d11b      	bne.n	80041bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0204 	mvn.w	r2, #4
 800418c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fa4d 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa3f 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa50 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d122      	bne.n	8004210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d11b      	bne.n	8004210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0208 	mvn.w	r2, #8
 80041e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2204      	movs	r2, #4
 80041e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fa23 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa15 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fa26 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b10      	cmp	r3, #16
 800421c:	d122      	bne.n	8004264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d11b      	bne.n	8004264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0210 	mvn.w	r2, #16
 8004234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2208      	movs	r2, #8
 800423a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f9f9 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9eb 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f9fc 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d10e      	bne.n	8004290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d107      	bne.n	8004290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0201 	mvn.w	r2, #1
 8004288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc fbf0 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d10e      	bne.n	80042bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d107      	bne.n	80042bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fd78 	bl	8004dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9c1 	bl	800466a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0220 	mvn.w	r2, #32
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fd42 	bl	8004d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004336:	2302      	movs	r3, #2
 8004338:	e0ae      	b.n	8004498 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b0c      	cmp	r3, #12
 8004346:	f200 809f 	bhi.w	8004488 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004385 	.word	0x08004385
 8004354:	08004489 	.word	0x08004489
 8004358:	08004489 	.word	0x08004489
 800435c:	08004489 	.word	0x08004489
 8004360:	080043c5 	.word	0x080043c5
 8004364:	08004489 	.word	0x08004489
 8004368:	08004489 	.word	0x08004489
 800436c:	08004489 	.word	0x08004489
 8004370:	08004407 	.word	0x08004407
 8004374:	08004489 	.word	0x08004489
 8004378:	08004489 	.word	0x08004489
 800437c:	08004489 	.word	0x08004489
 8004380:	08004447 	.word	0x08004447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fa18 	bl	80047c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0204 	bic.w	r2, r2, #4
 80043ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6999      	ldr	r1, [r3, #24]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	619a      	str	r2, [r3, #24]
      break;
 80043c2:	e064      	b.n	800448e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa68 	bl	80048a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	021a      	lsls	r2, r3, #8
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	619a      	str	r2, [r3, #24]
      break;
 8004404:	e043      	b.n	800448e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fabd 	bl	800498c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0208 	orr.w	r2, r2, #8
 8004420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0204 	bic.w	r2, r2, #4
 8004430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69d9      	ldr	r1, [r3, #28]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	61da      	str	r2, [r3, #28]
      break;
 8004444:	e023      	b.n	800448e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fb11 	bl	8004a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69d9      	ldr	r1, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	021a      	lsls	r2, r3, #8
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	61da      	str	r2, [r3, #28]
      break;
 8004486:	e002      	b.n	800448e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	75fb      	strb	r3, [r7, #23]
      break;
 800448c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004496:	7dfb      	ldrb	r3, [r7, #23]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_TIM_ConfigClockSource+0x1c>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e0b4      	b.n	8004626 <HAL_TIM_ConfigClockSource+0x186>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f4:	d03e      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0xd4>
 80044f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fa:	f200 8087 	bhi.w	800460c <HAL_TIM_ConfigClockSource+0x16c>
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004502:	f000 8086 	beq.w	8004612 <HAL_TIM_ConfigClockSource+0x172>
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	d87f      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b70      	cmp	r3, #112	; 0x70
 800450e:	d01a      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0xa6>
 8004510:	2b70      	cmp	r3, #112	; 0x70
 8004512:	d87b      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b60      	cmp	r3, #96	; 0x60
 8004516:	d050      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0x11a>
 8004518:	2b60      	cmp	r3, #96	; 0x60
 800451a:	d877      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 800451c:	2b50      	cmp	r3, #80	; 0x50
 800451e:	d03c      	beq.n	800459a <HAL_TIM_ConfigClockSource+0xfa>
 8004520:	2b50      	cmp	r3, #80	; 0x50
 8004522:	d873      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d058      	beq.n	80045da <HAL_TIM_ConfigClockSource+0x13a>
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d86f      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b30      	cmp	r3, #48	; 0x30
 800452e:	d064      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x15a>
 8004530:	2b30      	cmp	r3, #48	; 0x30
 8004532:	d86b      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b20      	cmp	r3, #32
 8004536:	d060      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x15a>
 8004538:	2b20      	cmp	r3, #32
 800453a:	d867      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d05c      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x15a>
 8004540:	2b10      	cmp	r3, #16
 8004542:	d05a      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x15a>
 8004544:	e062      	b.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6899      	ldr	r1, [r3, #8]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f000 fb5d 	bl	8004c14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004568:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	609a      	str	r2, [r3, #8]
      break;
 8004572:	e04f      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6899      	ldr	r1, [r3, #8]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f000 fb46 	bl	8004c14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004596:	609a      	str	r2, [r3, #8]
      break;
 8004598:	e03c      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6859      	ldr	r1, [r3, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	461a      	mov	r2, r3
 80045a8:	f000 faba 	bl	8004b20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2150      	movs	r1, #80	; 0x50
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fb13 	bl	8004bde <TIM_ITRx_SetConfig>
      break;
 80045b8:	e02c      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 fad9 	bl	8004b7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2160      	movs	r1, #96	; 0x60
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb03 	bl	8004bde <TIM_ITRx_SetConfig>
      break;
 80045d8:	e01c      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 fa9a 	bl	8004b20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2140      	movs	r1, #64	; 0x40
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 faf3 	bl	8004bde <TIM_ITRx_SetConfig>
      break;
 80045f8:	e00c      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f000 faea 	bl	8004bde <TIM_ITRx_SetConfig>
      break;
 800460a:	e003      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
      break;
 8004610:	e000      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a40      	ldr	r2, [pc, #256]	; (8004794 <TIM_Base_SetConfig+0x114>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d00f      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3d      	ldr	r2, [pc, #244]	; (8004798 <TIM_Base_SetConfig+0x118>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00b      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3c      	ldr	r2, [pc, #240]	; (800479c <TIM_Base_SetConfig+0x11c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d007      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3b      	ldr	r2, [pc, #236]	; (80047a0 <TIM_Base_SetConfig+0x120>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3a      	ldr	r2, [pc, #232]	; (80047a4 <TIM_Base_SetConfig+0x124>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d108      	bne.n	80046d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2f      	ldr	r2, [pc, #188]	; (8004794 <TIM_Base_SetConfig+0x114>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d02b      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e0:	d027      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2c      	ldr	r2, [pc, #176]	; (8004798 <TIM_Base_SetConfig+0x118>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d023      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2b      	ldr	r2, [pc, #172]	; (800479c <TIM_Base_SetConfig+0x11c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d01f      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <TIM_Base_SetConfig+0x120>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01b      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a29      	ldr	r2, [pc, #164]	; (80047a4 <TIM_Base_SetConfig+0x124>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d017      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a28      	ldr	r2, [pc, #160]	; (80047a8 <TIM_Base_SetConfig+0x128>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a27      	ldr	r2, [pc, #156]	; (80047ac <TIM_Base_SetConfig+0x12c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00f      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <TIM_Base_SetConfig+0x130>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <TIM_Base_SetConfig+0x134>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <TIM_Base_SetConfig+0x138>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a23      	ldr	r2, [pc, #140]	; (80047bc <TIM_Base_SetConfig+0x13c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <TIM_Base_SetConfig+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0xf8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a0c      	ldr	r2, [pc, #48]	; (80047a4 <TIM_Base_SetConfig+0x124>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	615a      	str	r2, [r3, #20]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40010400 	.word	0x40010400
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40014400 	.word	0x40014400
 80047b0:	40014800 	.word	0x40014800
 80047b4:	40001800 	.word	0x40001800
 80047b8:	40001c00 	.word	0x40001c00
 80047bc:	40002000 	.word	0x40002000

080047c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0201 	bic.w	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 0302 	bic.w	r3, r3, #2
 8004808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a20      	ldr	r2, [pc, #128]	; (8004898 <TIM_OC1_SetConfig+0xd8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_OC1_SetConfig+0x64>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a1f      	ldr	r2, [pc, #124]	; (800489c <TIM_OC1_SetConfig+0xdc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d10c      	bne.n	800483e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0308 	bic.w	r3, r3, #8
 800482a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 0304 	bic.w	r3, r3, #4
 800483c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a15      	ldr	r2, [pc, #84]	; (8004898 <TIM_OC1_SetConfig+0xd8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d003      	beq.n	800484e <TIM_OC1_SetConfig+0x8e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a14      	ldr	r2, [pc, #80]	; (800489c <TIM_OC1_SetConfig+0xdc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d111      	bne.n	8004872 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800485c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40010000 	.word	0x40010000
 800489c:	40010400 	.word	0x40010400

080048a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0210 	bic.w	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0320 	bic.w	r3, r3, #32
 80048ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a22      	ldr	r2, [pc, #136]	; (8004984 <TIM_OC2_SetConfig+0xe4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC2_SetConfig+0x68>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a21      	ldr	r2, [pc, #132]	; (8004988 <TIM_OC2_SetConfig+0xe8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d10d      	bne.n	8004924 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800490e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a17      	ldr	r2, [pc, #92]	; (8004984 <TIM_OC2_SetConfig+0xe4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_OC2_SetConfig+0x94>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a16      	ldr	r2, [pc, #88]	; (8004988 <TIM_OC2_SetConfig+0xe8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d113      	bne.n	800495c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800493a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40010000 	.word	0x40010000
 8004988:	40010400 	.word	0x40010400

0800498c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <TIM_OC3_SetConfig+0xe0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <TIM_OC3_SetConfig+0x66>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a20      	ldr	r2, [pc, #128]	; (8004a70 <TIM_OC3_SetConfig+0xe4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d10d      	bne.n	8004a0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <TIM_OC3_SetConfig+0xe0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_OC3_SetConfig+0x92>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <TIM_OC3_SetConfig+0xe4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d113      	bne.n	8004a46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40010400 	.word	0x40010400

08004a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <TIM_OC4_SetConfig+0xa4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_OC4_SetConfig+0x68>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a11      	ldr	r2, [pc, #68]	; (8004b1c <TIM_OC4_SetConfig+0xa8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d109      	bne.n	8004af0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	019b      	lsls	r3, r3, #6
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40010400 	.word	0x40010400

08004b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0201 	bic.w	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f023 030a 	bic.w	r3, r3, #10
 8004b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b087      	sub	sp, #28
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f023 0210 	bic.w	r2, r3, #16
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	031b      	lsls	r3, r3, #12
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	621a      	str	r2, [r3, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f043 0307 	orr.w	r3, r3, #7
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	609a      	str	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	021a      	lsls	r2, r3, #8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	609a      	str	r2, [r3, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	2201      	movs	r2, #1
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1a      	ldr	r2, [r3, #32]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	401a      	ands	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1a      	ldr	r2, [r3, #32]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e05a      	b.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d022      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d01d      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1d      	ldr	r2, [pc, #116]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d018      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1b      	ldr	r2, [pc, #108]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00e      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d004      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d10c      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40010400 	.word	0x40010400
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40001800 	.word	0x40001800

08004d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e03f      	b.n	8004e52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fc f95a 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2224      	movs	r2, #36	; 0x24
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f929 	bl	800505c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b08a      	sub	sp, #40	; 0x28
 8004e5e:	af02      	add	r7, sp, #8
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d17c      	bne.n	8004f74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_UART_Transmit+0x2c>
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e075      	b.n	8004f76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_UART_Transmit+0x3e>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e06e      	b.n	8004f76 <HAL_UART_Transmit+0x11c>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2221      	movs	r2, #33	; 0x21
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eae:	f7fc f9cf 	bl	8001250 <HAL_GetTick>
 8004eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	88fa      	ldrh	r2, [r7, #6]
 8004eb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec8:	d108      	bne.n	8004edc <HAL_UART_Transmit+0x82>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d104      	bne.n	8004edc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	61bb      	str	r3, [r7, #24]
 8004eda:	e003      	b.n	8004ee4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004eec:	e02a      	b.n	8004f44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2180      	movs	r1, #128	; 0x80
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f840 	bl	8004f7e <UART_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e036      	b.n	8004f76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	3302      	adds	r3, #2
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e007      	b.n	8004f36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	781a      	ldrb	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	3301      	adds	r3, #1
 8004f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1cf      	bne.n	8004eee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2200      	movs	r2, #0
 8004f56:	2140      	movs	r1, #64	; 0x40
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f810 	bl	8004f7e <UART_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e006      	b.n	8004f76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
  }
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b090      	sub	sp, #64	; 0x40
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8e:	e050      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d04c      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0x30>
 8004f9e:	f7fc f957 	bl	8001250 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d241      	bcs.n	8005032 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	330c      	adds	r3, #12
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fce:	637a      	str	r2, [r7, #52]	; 0x34
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e5      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3314      	adds	r3, #20
 8004fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005002:	623a      	str	r2, [r7, #32]
 8005004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	69f9      	ldr	r1, [r7, #28]
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e00f      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4013      	ands	r3, r2
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	429a      	cmp	r2, r3
 800504e:	d09f      	beq.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3740      	adds	r7, #64	; 0x40
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800505c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005060:	b0c0      	sub	sp, #256	; 0x100
 8005062:	af00      	add	r7, sp, #0
 8005064:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	68d9      	ldr	r1, [r3, #12]
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	ea40 0301 	orr.w	r3, r0, r1
 8005084:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	431a      	orrs	r2, r3
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	431a      	orrs	r2, r3
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050b4:	f021 010c 	bic.w	r1, r1, #12
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050c2:	430b      	orrs	r3, r1
 80050c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	6999      	ldr	r1, [r3, #24]
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	ea40 0301 	orr.w	r3, r0, r1
 80050e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b8f      	ldr	r3, [pc, #572]	; (8005328 <UART_SetConfig+0x2cc>)
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d005      	beq.n	80050fc <UART_SetConfig+0xa0>
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b8d      	ldr	r3, [pc, #564]	; (800532c <UART_SetConfig+0x2d0>)
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d104      	bne.n	8005106 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050fc:	f7fe fd88 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8005100:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005104:	e003      	b.n	800510e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005106:	f7fe fd6f 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 800510a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005118:	f040 810c 	bne.w	8005334 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800511c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005120:	2200      	movs	r2, #0
 8005122:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005126:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800512a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800512e:	4622      	mov	r2, r4
 8005130:	462b      	mov	r3, r5
 8005132:	1891      	adds	r1, r2, r2
 8005134:	65b9      	str	r1, [r7, #88]	; 0x58
 8005136:	415b      	adcs	r3, r3
 8005138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800513a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800513e:	4621      	mov	r1, r4
 8005140:	eb12 0801 	adds.w	r8, r2, r1
 8005144:	4629      	mov	r1, r5
 8005146:	eb43 0901 	adc.w	r9, r3, r1
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800515a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800515e:	4690      	mov	r8, r2
 8005160:	4699      	mov	r9, r3
 8005162:	4623      	mov	r3, r4
 8005164:	eb18 0303 	adds.w	r3, r8, r3
 8005168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800516c:	462b      	mov	r3, r5
 800516e:	eb49 0303 	adc.w	r3, r9, r3
 8005172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005182:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005186:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800518a:	460b      	mov	r3, r1
 800518c:	18db      	adds	r3, r3, r3
 800518e:	653b      	str	r3, [r7, #80]	; 0x50
 8005190:	4613      	mov	r3, r2
 8005192:	eb42 0303 	adc.w	r3, r2, r3
 8005196:	657b      	str	r3, [r7, #84]	; 0x54
 8005198:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800519c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051a0:	f7fb f866 	bl	8000270 <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4b61      	ldr	r3, [pc, #388]	; (8005330 <UART_SetConfig+0x2d4>)
 80051aa:	fba3 2302 	umull	r2, r3, r3, r2
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	011c      	lsls	r4, r3, #4
 80051b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	1891      	adds	r1, r2, r2
 80051ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80051cc:	415b      	adcs	r3, r3
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051d4:	4641      	mov	r1, r8
 80051d6:	eb12 0a01 	adds.w	sl, r2, r1
 80051da:	4649      	mov	r1, r9
 80051dc:	eb43 0b01 	adc.w	fp, r3, r1
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f4:	4692      	mov	sl, r2
 80051f6:	469b      	mov	fp, r3
 80051f8:	4643      	mov	r3, r8
 80051fa:	eb1a 0303 	adds.w	r3, sl, r3
 80051fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005202:	464b      	mov	r3, r9
 8005204:	eb4b 0303 	adc.w	r3, fp, r3
 8005208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005218:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800521c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005220:	460b      	mov	r3, r1
 8005222:	18db      	adds	r3, r3, r3
 8005224:	643b      	str	r3, [r7, #64]	; 0x40
 8005226:	4613      	mov	r3, r2
 8005228:	eb42 0303 	adc.w	r3, r2, r3
 800522c:	647b      	str	r3, [r7, #68]	; 0x44
 800522e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005232:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005236:	f7fb f81b 	bl	8000270 <__aeabi_uldivmod>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4611      	mov	r1, r2
 8005240:	4b3b      	ldr	r3, [pc, #236]	; (8005330 <UART_SetConfig+0x2d4>)
 8005242:	fba3 2301 	umull	r2, r3, r3, r1
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	2264      	movs	r2, #100	; 0x64
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	1acb      	subs	r3, r1, r3
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005256:	4b36      	ldr	r3, [pc, #216]	; (8005330 <UART_SetConfig+0x2d4>)
 8005258:	fba3 2302 	umull	r2, r3, r3, r2
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005264:	441c      	add	r4, r3
 8005266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005270:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005274:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	1891      	adds	r1, r2, r2
 800527e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005280:	415b      	adcs	r3, r3
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005288:	4641      	mov	r1, r8
 800528a:	1851      	adds	r1, r2, r1
 800528c:	6339      	str	r1, [r7, #48]	; 0x30
 800528e:	4649      	mov	r1, r9
 8005290:	414b      	adcs	r3, r1
 8005292:	637b      	str	r3, [r7, #52]	; 0x34
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052a0:	4659      	mov	r1, fp
 80052a2:	00cb      	lsls	r3, r1, #3
 80052a4:	4651      	mov	r1, sl
 80052a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052aa:	4651      	mov	r1, sl
 80052ac:	00ca      	lsls	r2, r1, #3
 80052ae:	4610      	mov	r0, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	4642      	mov	r2, r8
 80052b6:	189b      	adds	r3, r3, r2
 80052b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052bc:	464b      	mov	r3, r9
 80052be:	460a      	mov	r2, r1
 80052c0:	eb42 0303 	adc.w	r3, r2, r3
 80052c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052dc:	460b      	mov	r3, r1
 80052de:	18db      	adds	r3, r3, r3
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e2:	4613      	mov	r3, r2
 80052e4:	eb42 0303 	adc.w	r3, r2, r3
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052f2:	f7fa ffbd 	bl	8000270 <__aeabi_uldivmod>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <UART_SetConfig+0x2d4>)
 80052fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	2164      	movs	r1, #100	; 0x64
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	3332      	adds	r3, #50	; 0x32
 800530e:	4a08      	ldr	r2, [pc, #32]	; (8005330 <UART_SetConfig+0x2d4>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	f003 0207 	and.w	r2, r3, #7
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4422      	add	r2, r4
 8005322:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005324:	e105      	b.n	8005532 <UART_SetConfig+0x4d6>
 8005326:	bf00      	nop
 8005328:	40011000 	.word	0x40011000
 800532c:	40011400 	.word	0x40011400
 8005330:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005338:	2200      	movs	r2, #0
 800533a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800533e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005342:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005346:	4642      	mov	r2, r8
 8005348:	464b      	mov	r3, r9
 800534a:	1891      	adds	r1, r2, r2
 800534c:	6239      	str	r1, [r7, #32]
 800534e:	415b      	adcs	r3, r3
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
 8005352:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005356:	4641      	mov	r1, r8
 8005358:	1854      	adds	r4, r2, r1
 800535a:	4649      	mov	r1, r9
 800535c:	eb43 0501 	adc.w	r5, r3, r1
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	00eb      	lsls	r3, r5, #3
 800536a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800536e:	00e2      	lsls	r2, r4, #3
 8005370:	4614      	mov	r4, r2
 8005372:	461d      	mov	r5, r3
 8005374:	4643      	mov	r3, r8
 8005376:	18e3      	adds	r3, r4, r3
 8005378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800537c:	464b      	mov	r3, r9
 800537e:	eb45 0303 	adc.w	r3, r5, r3
 8005382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005392:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053a2:	4629      	mov	r1, r5
 80053a4:	008b      	lsls	r3, r1, #2
 80053a6:	4621      	mov	r1, r4
 80053a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ac:	4621      	mov	r1, r4
 80053ae:	008a      	lsls	r2, r1, #2
 80053b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053b4:	f7fa ff5c 	bl	8000270 <__aeabi_uldivmod>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4b60      	ldr	r3, [pc, #384]	; (8005540 <UART_SetConfig+0x4e4>)
 80053be:	fba3 2302 	umull	r2, r3, r3, r2
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	011c      	lsls	r4, r3, #4
 80053c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053d8:	4642      	mov	r2, r8
 80053da:	464b      	mov	r3, r9
 80053dc:	1891      	adds	r1, r2, r2
 80053de:	61b9      	str	r1, [r7, #24]
 80053e0:	415b      	adcs	r3, r3
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e8:	4641      	mov	r1, r8
 80053ea:	1851      	adds	r1, r2, r1
 80053ec:	6139      	str	r1, [r7, #16]
 80053ee:	4649      	mov	r1, r9
 80053f0:	414b      	adcs	r3, r1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005400:	4659      	mov	r1, fp
 8005402:	00cb      	lsls	r3, r1, #3
 8005404:	4651      	mov	r1, sl
 8005406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800540a:	4651      	mov	r1, sl
 800540c:	00ca      	lsls	r2, r1, #3
 800540e:	4610      	mov	r0, r2
 8005410:	4619      	mov	r1, r3
 8005412:	4603      	mov	r3, r0
 8005414:	4642      	mov	r2, r8
 8005416:	189b      	adds	r3, r3, r2
 8005418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800541c:	464b      	mov	r3, r9
 800541e:	460a      	mov	r2, r1
 8005420:	eb42 0303 	adc.w	r3, r2, r3
 8005424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	67bb      	str	r3, [r7, #120]	; 0x78
 8005432:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005440:	4649      	mov	r1, r9
 8005442:	008b      	lsls	r3, r1, #2
 8005444:	4641      	mov	r1, r8
 8005446:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800544a:	4641      	mov	r1, r8
 800544c:	008a      	lsls	r2, r1, #2
 800544e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005452:	f7fa ff0d 	bl	8000270 <__aeabi_uldivmod>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4b39      	ldr	r3, [pc, #228]	; (8005540 <UART_SetConfig+0x4e4>)
 800545c:	fba3 1302 	umull	r1, r3, r3, r2
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	2164      	movs	r1, #100	; 0x64
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	3332      	adds	r3, #50	; 0x32
 800546e:	4a34      	ldr	r2, [pc, #208]	; (8005540 <UART_SetConfig+0x4e4>)
 8005470:	fba2 2303 	umull	r2, r3, r2, r3
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547a:	441c      	add	r4, r3
 800547c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005480:	2200      	movs	r2, #0
 8005482:	673b      	str	r3, [r7, #112]	; 0x70
 8005484:	677a      	str	r2, [r7, #116]	; 0x74
 8005486:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800548a:	4642      	mov	r2, r8
 800548c:	464b      	mov	r3, r9
 800548e:	1891      	adds	r1, r2, r2
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	415b      	adcs	r3, r3
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800549a:	4641      	mov	r1, r8
 800549c:	1851      	adds	r1, r2, r1
 800549e:	6039      	str	r1, [r7, #0]
 80054a0:	4649      	mov	r1, r9
 80054a2:	414b      	adcs	r3, r1
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054b2:	4659      	mov	r1, fp
 80054b4:	00cb      	lsls	r3, r1, #3
 80054b6:	4651      	mov	r1, sl
 80054b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054bc:	4651      	mov	r1, sl
 80054be:	00ca      	lsls	r2, r1, #3
 80054c0:	4610      	mov	r0, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	4603      	mov	r3, r0
 80054c6:	4642      	mov	r2, r8
 80054c8:	189b      	adds	r3, r3, r2
 80054ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80054cc:	464b      	mov	r3, r9
 80054ce:	460a      	mov	r2, r1
 80054d0:	eb42 0303 	adc.w	r3, r2, r3
 80054d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	663b      	str	r3, [r7, #96]	; 0x60
 80054e0:	667a      	str	r2, [r7, #100]	; 0x64
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054ee:	4649      	mov	r1, r9
 80054f0:	008b      	lsls	r3, r1, #2
 80054f2:	4641      	mov	r1, r8
 80054f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054f8:	4641      	mov	r1, r8
 80054fa:	008a      	lsls	r2, r1, #2
 80054fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005500:	f7fa feb6 	bl	8000270 <__aeabi_uldivmod>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <UART_SetConfig+0x4e4>)
 800550a:	fba3 1302 	umull	r1, r3, r3, r2
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2164      	movs	r1, #100	; 0x64
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	3332      	adds	r3, #50	; 0x32
 800551c:	4a08      	ldr	r2, [pc, #32]	; (8005540 <UART_SetConfig+0x4e4>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	f003 020f 	and.w	r2, r3, #15
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4422      	add	r2, r4
 8005530:	609a      	str	r2, [r3, #8]
}
 8005532:	bf00      	nop
 8005534:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005538:	46bd      	mov	sp, r7
 800553a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800553e:	bf00      	nop
 8005540:	51eb851f 	.word	0x51eb851f

08005544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005544:	b084      	sub	sp, #16
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	f107 001c 	add.w	r0, r7, #28
 8005552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	2b01      	cmp	r3, #1
 800555a:	d122      	bne.n	80055a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005586:	2b01      	cmp	r3, #1
 8005588:	d105      	bne.n	8005596 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9c0 	bl	800591c <USB_CoreReset>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
 80055a0:	e01a      	b.n	80055d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f9b4 	bl	800591c <USB_CoreReset>
 80055b4:	4603      	mov	r3, r0
 80055b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38
 80055ca:	e005      	b.n	80055d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10b      	bne.n	80055f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f043 0206 	orr.w	r2, r3, #6
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f043 0220 	orr.w	r2, r3, #32
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005602:	b004      	add	sp, #16
 8005604:	4770      	bx	lr

08005606 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f043 0201 	orr.w	r2, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f023 0201 	bic.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d115      	bne.n	8005698 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005678:	2001      	movs	r0, #1
 800567a:	f7fb fdf5 	bl	8001268 <HAL_Delay>
      ms++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f93a 	bl	80058fe <USB_GetMode>
 800568a:	4603      	mov	r3, r0
 800568c:	2b01      	cmp	r3, #1
 800568e:	d01e      	beq.n	80056ce <USB_SetCurrentMode+0x84>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b31      	cmp	r3, #49	; 0x31
 8005694:	d9f0      	bls.n	8005678 <USB_SetCurrentMode+0x2e>
 8005696:	e01a      	b.n	80056ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d115      	bne.n	80056ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056aa:	2001      	movs	r0, #1
 80056ac:	f7fb fddc 	bl	8001268 <HAL_Delay>
      ms++;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f921 	bl	80058fe <USB_GetMode>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <USB_SetCurrentMode+0x84>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b31      	cmp	r3, #49	; 0x31
 80056c6:	d9f0      	bls.n	80056aa <USB_SetCurrentMode+0x60>
 80056c8:	e001      	b.n	80056ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e005      	b.n	80056da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b32      	cmp	r3, #50	; 0x32
 80056d2:	d101      	bne.n	80056d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a13      	ldr	r2, [pc, #76]	; (8005748 <USB_FlushTxFifo+0x64>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e01b      	b.n	800573c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	daf2      	bge.n	80056f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	019b      	lsls	r3, r3, #6
 8005714:	f043 0220 	orr.w	r2, r3, #32
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a08      	ldr	r2, [pc, #32]	; (8005748 <USB_FlushTxFifo+0x64>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e006      	b.n	800573c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b20      	cmp	r3, #32
 8005738:	d0f0      	beq.n	800571c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	00030d40 	.word	0x00030d40

0800574c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a11      	ldr	r2, [pc, #68]	; (80057a8 <USB_FlushRxFifo+0x5c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e018      	b.n	800579c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	daf2      	bge.n	8005758 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2210      	movs	r2, #16
 800577a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <USB_FlushRxFifo+0x5c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e006      	b.n	800579c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	2b10      	cmp	r3, #16
 8005798:	d0f0      	beq.n	800577c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	00030d40 	.word	0x00030d40

080057ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b089      	sub	sp, #36	; 0x24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4611      	mov	r1, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	460b      	mov	r3, r1
 80057bc:	71fb      	strb	r3, [r7, #7]
 80057be:	4613      	mov	r3, r2
 80057c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d123      	bne.n	800581a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057d2:	88bb      	ldrh	r3, [r7, #4]
 80057d4:	3303      	adds	r3, #3
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	e018      	b.n	8005812 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	031a      	lsls	r2, r3, #12
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ec:	461a      	mov	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	3301      	adds	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3301      	adds	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	3301      	adds	r3, #1
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	429a      	cmp	r2, r3
 8005818:	d3e2      	bcc.n	80057e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3724      	adds	r7, #36	; 0x24
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005828:	b480      	push	{r7}
 800582a:	b08b      	sub	sp, #44	; 0x2c
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	089b      	lsrs	r3, r3, #2
 8005842:	b29b      	uxth	r3, r3
 8005844:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800584e:	2300      	movs	r3, #0
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	e014      	b.n	800587e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	3301      	adds	r3, #1
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	3301      	adds	r3, #1
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	3301      	adds	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	3301      	adds	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	3301      	adds	r3, #1
 800587c:	623b      	str	r3, [r7, #32]
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	429a      	cmp	r2, r3
 8005884:	d3e6      	bcc.n	8005854 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005886:	8bfb      	ldrh	r3, [r7, #30]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01e      	beq.n	80058ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005896:	461a      	mov	r2, r3
 8005898:	f107 0310 	add.w	r3, r7, #16
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	701a      	strb	r2, [r3, #0]
      i++;
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	3301      	adds	r3, #1
 80058b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	3301      	adds	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058be:	8bfb      	ldrh	r3, [r7, #30]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058c4:	8bfb      	ldrh	r3, [r7, #30]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ea      	bne.n	80058a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	372c      	adds	r7, #44	; 0x2c
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4013      	ands	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0301 	and.w	r3, r3, #1
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3301      	adds	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a13      	ldr	r2, [pc, #76]	; (8005980 <USB_CoreReset+0x64>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e01b      	b.n	8005972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	daf2      	bge.n	8005928 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f043 0201 	orr.w	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a09      	ldr	r2, [pc, #36]	; (8005980 <USB_CoreReset+0x64>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d0f0      	beq.n	8005952 <USB_CoreReset+0x36>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	00030d40 	.word	0x00030d40

08005984 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005984:	b084      	sub	sp, #16
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059a4:	461a      	mov	r2, r3
 80059a6:	2300      	movs	r3, #0
 80059a8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d018      	beq.n	8005a0c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d10a      	bne.n	80059f6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ee:	f043 0304 	orr.w	r3, r3, #4
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	e014      	b.n	8005a20 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a04:	f023 0304 	bic.w	r3, r3, #4
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e009      	b.n	8005a20 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a1a:	f023 0304 	bic.w	r3, r3, #4
 8005a1e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a20:	2110      	movs	r1, #16
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fe5e 	bl	80056e4 <USB_FlushTxFifo>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fe8a 	bl	800574c <USB_FlushRxFifo>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a42:	2300      	movs	r3, #0
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	e015      	b.n	8005a74 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a54:	461a      	mov	r2, r3
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	461a      	mov	r2, r3
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3301      	adds	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d3e5      	bcc.n	8005a48 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f04f 32ff 	mov.w	r2, #4294967295
 8005a88:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <USB_HostInit+0x16c>)
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <USB_HostInit+0x170>)
 8005aa8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005aac:	e009      	b.n	8005ac2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2280      	movs	r2, #128	; 0x80
 8005ab2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a10      	ldr	r2, [pc, #64]	; (8005af8 <USB_HostInit+0x174>)
 8005ab8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a0f      	ldr	r2, [pc, #60]	; (8005afc <USB_HostInit+0x178>)
 8005abe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f043 0210 	orr.w	r2, r3, #16
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <USB_HostInit+0x17c>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aec:	b004      	add	sp, #16
 8005aee:	4770      	bx	lr
 8005af0:	01000200 	.word	0x01000200
 8005af4:	00e00300 	.word	0x00e00300
 8005af8:	00600080 	.word	0x00600080
 8005afc:	004000e0 	.word	0x004000e0
 8005b00:	a3200008 	.word	0xa3200008

08005b04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d107      	bne.n	8005b56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b52:	6053      	str	r3, [r2, #4]
 8005b54:	e009      	b.n	8005b6a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d106      	bne.n	8005b6a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b62:	461a      	mov	r2, r3
 8005b64:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b68:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <USB_DriveVbus+0x44>
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d106      	bne.n	8005bbc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc6:	d109      	bne.n	8005bdc <USB_DriveVbus+0x64>
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bda:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	0c5b      	lsrs	r3, r3, #17
 8005c08:	f003 0303 	and.w	r3, r3, #3
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	b29b      	uxth	r3, r3
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	4608      	mov	r0, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	70fb      	strb	r3, [r7, #3]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	70bb      	strb	r3, [r7, #2]
 8005c52:	4613      	mov	r3, r2
 8005c54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c70:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d87e      	bhi.n	8005d78 <USB_HC_Init+0x13c>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <USB_HC_Init+0x44>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005d3b 	.word	0x08005d3b
 8005c88:	08005c91 	.word	0x08005c91
 8005c8c:	08005cfd 	.word	0x08005cfd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	da10      	bge.n	8005cce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cca:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005ccc:	e057      	b.n	8005d7e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d051      	beq.n	8005d7e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005cf8:	60d3      	str	r3, [r2, #12]
      break;
 8005cfa:	e040      	b.n	8005d7e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da34      	bge.n	8005d82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d36:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d38:	e023      	b.n	8005d82 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	461a      	mov	r2, r3
 8005d48:	f240 2325 	movw	r3, #549	; 0x225
 8005d4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	da17      	bge.n	8005d86 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d70:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d74:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d76:	e006      	b.n	8005d86 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	77fb      	strb	r3, [r7, #31]
      break;
 8005d7c:	e004      	b.n	8005d88 <USB_HC_Init+0x14c>
      break;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <USB_HC_Init+0x14c>
      break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <USB_HC_Init+0x14c>
      break;
 8005d86:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da2:	f043 0302 	orr.w	r3, r3, #2
 8005da6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	2101      	movs	r1, #1
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	6939      	ldr	r1, [r7, #16]
 8005dbe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005dd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da03      	bge.n	8005de2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e001      	b.n	8005de6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff feff 	bl	8005bea <USB_GetHostSpeed>
 8005dec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005dee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d106      	bne.n	8005e04 <USB_HC_Init+0x1c8>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d003      	beq.n	8005e04 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	e001      	b.n	8005e08 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e08:	787b      	ldrb	r3, [r7, #1]
 8005e0a:	059b      	lsls	r3, r3, #22
 8005e0c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e10:	78bb      	ldrb	r3, [r7, #2]
 8005e12:	02db      	lsls	r3, r3, #11
 8005e14:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e18:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e1e:	049b      	lsls	r3, r3, #18
 8005e20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e2c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	0159      	lsls	r1, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	440b      	add	r3, r1
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e44:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005e46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d003      	beq.n	8005e56 <USB_HC_Init+0x21a>
 8005e4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d10f      	bne.n	8005e76 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e74:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3720      	adds	r7, #32
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08c      	sub	sp, #48	; 0x30
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e9c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d02d      	beq.n	8005f06 <USB_HC_StartXfer+0x86>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	791b      	ldrb	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d129      	bne.n	8005f06 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d117      	bne.n	8005ee8 <USB_HC_StartXfer+0x68>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	79db      	ldrb	r3, [r3, #7]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <USB_HC_StartXfer+0x48>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	79db      	ldrb	r3, [r3, #7]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d10f      	bne.n	8005ee8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	6a3a      	ldr	r2, [r7, #32]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <USB_HC_StartXfer+0x86>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	795b      	ldrb	r3, [r3, #5]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d107      	bne.n	8005f06 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	4619      	mov	r1, r3
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fa0f 	bl	8006320 <USB_DoPing>
      return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e0f8      	b.n	80060f8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d018      	beq.n	8005f40 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	8912      	ldrh	r2, [r2, #8]
 8005f16:	4413      	add	r3, r2
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	8912      	ldrh	r2, [r2, #8]
 8005f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f22:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005f24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f26:	8b7b      	ldrh	r3, [r7, #26]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d90b      	bls.n	8005f44 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005f2c:	8b7b      	ldrh	r3, [r7, #26]
 8005f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	8912      	ldrh	r2, [r2, #8]
 8005f36:	fb03 f202 	mul.w	r2, r3, r2
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	611a      	str	r2, [r3, #16]
 8005f3e:	e001      	b.n	8005f44 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005f40:	2301      	movs	r3, #1
 8005f42:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	78db      	ldrb	r3, [r3, #3]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	8912      	ldrh	r2, [r2, #8]
 8005f52:	fb03 f202 	mul.w	r2, r3, r2
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	611a      	str	r2, [r3, #16]
 8005f5a:	e003      	b.n	8005f64 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f6e:	04d9      	lsls	r1, r3, #19
 8005f70:	4b63      	ldr	r3, [pc, #396]	; (8006100 <USB_HC_StartXfer+0x280>)
 8005f72:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f74:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	7a9b      	ldrb	r3, [r3, #10]
 8005f7a:	075b      	lsls	r3, r3, #29
 8005f7c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f80:	69f9      	ldr	r1, [r7, #28]
 8005f82:	0148      	lsls	r0, r1, #5
 8005f84:	6a39      	ldr	r1, [r7, #32]
 8005f86:	4401      	add	r1, r0
 8005f88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f8c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f8e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d009      	beq.n	8005faa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	68d9      	ldr	r1, [r3, #12]
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bf0c      	ite	eq
 8005fba:	2301      	moveq	r3, #1
 8005fbc:	2300      	movne	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	6a3a      	ldr	r2, [r7, #32]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fdc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fe0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	7e7b      	ldrb	r3, [r7, #25]
 8005ff2:	075b      	lsls	r3, r3, #29
 8005ff4:	69f9      	ldr	r1, [r7, #28]
 8005ff6:	0148      	lsls	r0, r1, #5
 8005ff8:	6a39      	ldr	r1, [r7, #32]
 8005ffa:	4401      	add	r1, r0
 8005ffc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006000:	4313      	orrs	r3, r2
 8006002:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800601a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	78db      	ldrb	r3, [r3, #3]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	e003      	b.n	8006036 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006034:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800603c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	461a      	mov	r2, r3
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	e04e      	b.n	80060f8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	78db      	ldrb	r3, [r3, #3]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d149      	bne.n	80060f6 <USB_HC_StartXfer+0x276>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d045      	beq.n	80060f6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	79db      	ldrb	r3, [r3, #7]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d830      	bhi.n	80060d4 <USB_HC_StartXfer+0x254>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <USB_HC_StartXfer+0x1f8>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006089 	.word	0x08006089
 800607c:	080060ad 	.word	0x080060ad
 8006080:	08006089 	.word	0x08006089
 8006084:	080060ad 	.word	0x080060ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	3303      	adds	r3, #3
 800608e:	089b      	lsrs	r3, r3, #2
 8006090:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006092:	8afa      	ldrh	r2, [r7, #22]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	b29b      	uxth	r3, r3
 800609a:	429a      	cmp	r2, r3
 800609c:	d91c      	bls.n	80060d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80060aa:	e015      	b.n	80060d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	3303      	adds	r3, #3
 80060b2:	089b      	lsrs	r3, r3, #2
 80060b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80060b6:	8afa      	ldrh	r2, [r7, #22]
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d90a      	bls.n	80060dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80060d2:	e003      	b.n	80060dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80060d4:	bf00      	nop
 80060d6:	e002      	b.n	80060de <USB_HC_StartXfer+0x25e>
        break;
 80060d8:	bf00      	nop
 80060da:	e000      	b.n	80060de <USB_HC_StartXfer+0x25e>
        break;
 80060dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	68d9      	ldr	r1, [r3, #12]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	785a      	ldrb	r2, [r3, #1]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2000      	movs	r0, #0
 80060ee:	9000      	str	r0, [sp, #0]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff fb5b 	bl	80057ac <USB_WritePacket>
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3728      	adds	r7, #40	; 0x28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	1ff80000 	.word	0x1ff80000

08006104 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	b29b      	uxth	r3, r3
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006126:	b480      	push	{r7}
 8006128:	b089      	sub	sp, #36	; 0x24
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	0c9b      	lsrs	r3, r3, #18
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	0fdb      	lsrs	r3, r3, #31
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b20      	cmp	r3, #32
 8006174:	d104      	bne.n	8006180 <USB_HC_Halt+0x5a>
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	e0c8      	b.n	8006312 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <USB_HC_Halt+0x66>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d163      	bne.n	8006254 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f040 80ab 	bne.w	8006310 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d133      	bne.n	800622e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006204:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3301      	adds	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006212:	d81d      	bhi.n	8006250 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800622a:	d0ec      	beq.n	8006206 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800622c:	e070      	b.n	8006310 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	440a      	add	r2, r1
 8006244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800624c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800624e:	e05f      	b.n	8006310 <USB_HC_Halt+0x1ea>
            break;
 8006250:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006252:	e05d      	b.n	8006310 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	440a      	add	r2, r1
 800626a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800626e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006272:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d133      	bne.n	80062ec <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	440a      	add	r2, r1
 800629a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d0:	d81d      	bhi.n	800630e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e8:	d0ec      	beq.n	80062c4 <USB_HC_Halt+0x19e>
 80062ea:	e011      	b.n	8006310 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	440a      	add	r2, r1
 8006302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	e000      	b.n	8006310 <USB_HC_Halt+0x1ea>
          break;
 800630e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3724      	adds	r7, #36	; 0x24
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006334:	2301      	movs	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	04da      	lsls	r2, r3, #19
 800633c:	4b15      	ldr	r3, [pc, #84]	; (8006394 <USB_DoPing+0x74>)
 800633e:	4013      	ands	r3, r2
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	440a      	add	r2, r1
 8006348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006350:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006368:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006370:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637e:	461a      	mov	r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	1ff80000 	.word	0x1ff80000

08006398 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff f93b 	bl	8005628 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063b2:	2110      	movs	r1, #16
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff f995 	bl	80056e4 <USB_FlushTxFifo>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff f9c1 	bl	800574c <USB_FlushRxFifo>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	e01f      	b.n	800641a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006400:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	3301      	adds	r3, #1
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	2b0f      	cmp	r3, #15
 800641e:	d9dc      	bls.n	80063da <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006420:	2300      	movs	r3, #0
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e034      	b.n	8006490 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800643c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006444:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800644c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	461a      	mov	r2, r3
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800646c:	d80c      	bhi.n	8006488 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006484:	d0ec      	beq.n	8006460 <USB_StopHost+0xc8>
 8006486:	e000      	b.n	800648a <USB_StopHost+0xf2>
        break;
 8006488:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	3301      	adds	r3, #1
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b0f      	cmp	r3, #15
 8006494:	d9c7      	bls.n	8006426 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649c:	461a      	mov	r2, r3
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295
 80064aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff f8aa 	bl	8005606 <USB_EnableGlobalInt>

  return ret;
 80064b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3720      	adds	r7, #32
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af04      	add	r7, sp, #16
 80064c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80064c4:	2301      	movs	r3, #1
 80064c6:	2202      	movs	r2, #2
 80064c8:	2102      	movs	r1, #2
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fc66 	bl	8006d9c <USBH_FindInterface>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2bff      	cmp	r3, #255	; 0xff
 80064d8:	d002      	beq.n	80064e0 <USBH_CDC_InterfaceInit+0x24>
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d901      	bls.n	80064e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064e0:	2302      	movs	r3, #2
 80064e2:	e13d      	b.n	8006760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fc3b 	bl	8006d64 <USBH_SelectInterface>
 80064ee:	4603      	mov	r3, r0
 80064f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80064f8:	2302      	movs	r3, #2
 80064fa:	e131      	b.n	8006760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006502:	2050      	movs	r0, #80	; 0x50
 8006504:	f001 fb12 	bl	8007b2c <malloc>
 8006508:	4603      	mov	r3, r0
 800650a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800651c:	2302      	movs	r3, #2
 800651e:	e11f      	b.n	8006760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006520:	2250      	movs	r2, #80	; 0x50
 8006522:	2100      	movs	r1, #0
 8006524:	68b8      	ldr	r0, [r7, #8]
 8006526:	f001 fb11 	bl	8007b4c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	211a      	movs	r1, #26
 8006530:	fb01 f303 	mul.w	r3, r1, r3
 8006534:	4413      	add	r3, r2
 8006536:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	b25b      	sxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	da15      	bge.n	800656e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	211a      	movs	r1, #26
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	4413      	add	r3, r2
 800654e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006552:	781a      	ldrb	r2, [r3, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	211a      	movs	r1, #26
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4413      	add	r3, r2
 8006564:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006568:	881a      	ldrh	r2, [r3, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 ff9c 	bl	80074b2 <USBH_AllocPipe>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	7819      	ldrb	r1, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	7858      	ldrb	r0, [r3, #1]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	8952      	ldrh	r2, [r2, #10]
 800659a:	9202      	str	r2, [sp, #8]
 800659c:	2203      	movs	r2, #3
 800659e:	9201      	str	r2, [sp, #4]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4623      	mov	r3, r4
 80065a4:	4602      	mov	r2, r0
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 ff54 	bl	8007454 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2200      	movs	r2, #0
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fa17 	bl	80079e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80065ba:	2300      	movs	r3, #0
 80065bc:	2200      	movs	r2, #0
 80065be:	210a      	movs	r1, #10
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fbeb 	bl	8006d9c <USBH_FindInterface>
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2bff      	cmp	r3, #255	; 0xff
 80065ce:	d002      	beq.n	80065d6 <USBH_CDC_InterfaceInit+0x11a>
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d901      	bls.n	80065da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065d6:	2302      	movs	r3, #2
 80065d8:	e0c2      	b.n	8006760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	211a      	movs	r1, #26
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	b25b      	sxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	da16      	bge.n	8006620 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	211a      	movs	r1, #26
 80065f8:	fb01 f303 	mul.w	r3, r1, r3
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006602:	781a      	ldrb	r2, [r3, #0]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	211a      	movs	r1, #26
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006618:	881a      	ldrh	r2, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	835a      	strh	r2, [r3, #26]
 800661e:	e015      	b.n	800664c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	211a      	movs	r1, #26
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	4413      	add	r3, r2
 800662c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	211a      	movs	r1, #26
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4413      	add	r3, r2
 8006642:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006646:	881a      	ldrh	r2, [r3, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	211a      	movs	r1, #26
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	4413      	add	r3, r2
 8006658:	f203 3356 	addw	r3, r3, #854	; 0x356
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b25b      	sxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	da16      	bge.n	8006692 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	211a      	movs	r1, #26
 800666a:	fb01 f303 	mul.w	r3, r1, r3
 800666e:	4413      	add	r3, r2
 8006670:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006674:	781a      	ldrb	r2, [r3, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	211a      	movs	r1, #26
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	4413      	add	r3, r2
 8006686:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800668a:	881a      	ldrh	r2, [r3, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	835a      	strh	r2, [r3, #26]
 8006690:	e015      	b.n	80066be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	211a      	movs	r1, #26
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	4413      	add	r3, r2
 800669e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	211a      	movs	r1, #26
 80066ae:	fb01 f303 	mul.w	r3, r1, r3
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80066b8:	881a      	ldrh	r2, [r3, #0]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	7b9b      	ldrb	r3, [r3, #14]
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fef4 	bl	80074b2 <USBH_AllocPipe>
 80066ca:	4603      	mov	r3, r0
 80066cc:	461a      	mov	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	7bdb      	ldrb	r3, [r3, #15]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 feea 	bl	80074b2 <USBH_AllocPipe>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	7b59      	ldrb	r1, [r3, #13]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	7b98      	ldrb	r0, [r3, #14]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	8b12      	ldrh	r2, [r2, #24]
 80066fe:	9202      	str	r2, [sp, #8]
 8006700:	2202      	movs	r2, #2
 8006702:	9201      	str	r2, [sp, #4]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	4623      	mov	r3, r4
 8006708:	4602      	mov	r2, r0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fea2 	bl	8007454 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	7b19      	ldrb	r1, [r3, #12]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	7bd8      	ldrb	r0, [r3, #15]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	8b52      	ldrh	r2, [r2, #26]
 8006728:	9202      	str	r2, [sp, #8]
 800672a:	2202      	movs	r2, #2
 800672c:	9201      	str	r2, [sp, #4]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4623      	mov	r3, r4
 8006732:	4602      	mov	r2, r0
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fe8d 	bl	8007454 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	7b5b      	ldrb	r3, [r3, #13]
 8006746:	2200      	movs	r2, #0
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f001 f94c 	bl	80079e8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	7b1b      	ldrb	r3, [r3, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 f945 	bl	80079e8 <USBH_LL_SetToggle>

  return USBH_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	bd90      	pop	{r4, r7, pc}

08006768 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fe82 	bl	8007492 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fead 	bl	80074f4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	7b1b      	ldrb	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00e      	beq.n	80067c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	7b1b      	ldrb	r3, [r3, #12]
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fe6f 	bl	8007492 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	7b1b      	ldrb	r3, [r3, #12]
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fe9a 	bl	80074f4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	7b5b      	ldrb	r3, [r3, #13]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00e      	beq.n	80067ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	7b5b      	ldrb	r3, [r3, #13]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fe5c 	bl	8007492 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	7b5b      	ldrb	r3, [r3, #13]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fe87 	bl	80074f4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	4618      	mov	r0, r3
 8006802:	f001 f99b 	bl	8007b3c <free>
    phost->pActiveClass->pData = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800680c:	2200      	movs	r2, #0
 800680e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3340      	adds	r3, #64	; 0x40
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f8b1 	bl	800699a <GetLineCoding>
 8006838:	4603      	mov	r3, r0
 800683a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006848:	2102      	movs	r1, #2
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800684e:	7afb      	ldrb	r3, [r7, #11]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006878:	2b04      	cmp	r3, #4
 800687a:	d877      	bhi.n	800696c <USBH_CDC_Process+0x114>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <USBH_CDC_Process+0x2c>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	08006899 	.word	0x08006899
 8006888:	0800689f 	.word	0x0800689f
 800688c:	080068cf 	.word	0x080068cf
 8006890:	08006943 	.word	0x08006943
 8006894:	08006951 	.word	0x08006951
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e06d      	b.n	800697a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f897 	bl	80069d8 <SetLineCoding>
 80068aa:	4603      	mov	r3, r0
 80068ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068bc:	e058      	b.n	8006970 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d055      	beq.n	8006970 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2204      	movs	r2, #4
 80068c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80068cc:	e050      	b.n	8006970 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	3340      	adds	r3, #64	; 0x40
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f860 	bl	800699a <GetLineCoding>
 80068da:	4603      	mov	r3, r0
 80068dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d126      	bne.n	8006932 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f6:	791b      	ldrb	r3, [r3, #4]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d13b      	bne.n	8006974 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006906:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006908:	429a      	cmp	r2, r3
 800690a:	d133      	bne.n	8006974 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006918:	429a      	cmp	r2, r3
 800691a:	d12b      	bne.n	8006974 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006924:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006926:	429a      	cmp	r2, r3
 8006928:	d124      	bne.n	8006974 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f958 	bl	8006be0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006930:	e020      	b.n	8006974 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d01d      	beq.n	8006974 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2204      	movs	r2, #4
 800693c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006940:	e018      	b.n	8006974 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f867 	bl	8006a16 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f8da 	bl	8006b02 <CDC_ProcessReception>
      break;
 800694e:	e014      	b.n	800697a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006950:	2100      	movs	r1, #0
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fb08 	bl	8006f68 <USBH_ClrFeature>
 8006958:	4603      	mov	r3, r0
 800695a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800696a:	e005      	b.n	8006978 <USBH_CDC_Process+0x120>

    default:
      break;
 800696c:	bf00      	nop
 800696e:	e004      	b.n	800697a <USBH_CDC_Process+0x122>
      break;
 8006970:	bf00      	nop
 8006972:	e002      	b.n	800697a <USBH_CDC_Process+0x122>
      break;
 8006974:	bf00      	nop
 8006976:	e000      	b.n	800697a <USBH_CDC_Process+0x122>
      break;
 8006978:	bf00      	nop

  }

  return status;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	22a1      	movs	r2, #161	; 0xa1
 80069a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2221      	movs	r2, #33	; 0x21
 80069ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2207      	movs	r2, #7
 80069c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2207      	movs	r2, #7
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 faf1 	bl	8006fb0 <USBH_CtlReq>
 80069ce:	4603      	mov	r3, r0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2221      	movs	r2, #33	; 0x21
 80069e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2207      	movs	r2, #7
 80069fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2207      	movs	r2, #7
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fad2 	bl	8006fb0 <USBH_CtlReq>
 8006a0c:	4603      	mov	r3, r0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af02      	add	r7, sp, #8
 8006a1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d002      	beq.n	8006a3c <CDC_ProcessTransmission+0x26>
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d023      	beq.n	8006a82 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a3a:	e05e      	b.n	8006afa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	8b12      	ldrh	r2, [r2, #24]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d90b      	bls.n	8006a60 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	69d9      	ldr	r1, [r3, #28]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8b1a      	ldrh	r2, [r3, #24]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	7b5b      	ldrb	r3, [r3, #13]
 8006a54:	2001      	movs	r0, #1
 8006a56:	9000      	str	r0, [sp, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fcb8 	bl	80073ce <USBH_BulkSendData>
 8006a5e:	e00b      	b.n	8006a78 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	7b5b      	ldrb	r3, [r3, #13]
 8006a6e:	2001      	movs	r0, #1
 8006a70:	9000      	str	r0, [sp, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fcab 	bl	80073ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a80:	e03b      	b.n	8006afa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	7b5b      	ldrb	r3, [r3, #13]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 ff83 	bl	8007994 <USBH_LL_GetURBState>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d128      	bne.n	8006aea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	8b12      	ldrh	r2, [r2, #24]
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d90e      	bls.n	8006ac2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	8b12      	ldrh	r2, [r2, #24]
 8006aac:	1a9a      	subs	r2, r3, r2
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	8b12      	ldrh	r2, [r2, #24]
 8006aba:	441a      	add	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	61da      	str	r2, [r3, #28]
 8006ac0:	e002      	b.n	8006ac8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ad8:	e00e      	b.n	8006af8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f868 	bl	8006bb8 <USBH_CDC_TransmitCallback>
      break;
 8006ae8:	e006      	b.n	8006af8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d103      	bne.n	8006af8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006af8:	bf00      	nop
  }
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d002      	beq.n	8006b28 <CDC_ProcessReception+0x26>
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d00e      	beq.n	8006b44 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006b26:	e043      	b.n	8006bb0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	6a19      	ldr	r1, [r3, #32]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	8b5a      	ldrh	r2, [r3, #26]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	7b1b      	ldrb	r3, [r3, #12]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fc6f 	bl	8007418 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b42:	e035      	b.n	8006bb0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	7b1b      	ldrb	r3, [r3, #12]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 ff22 	bl	8007994 <USBH_LL_GetURBState>
 8006b50:	4603      	mov	r3, r0
 8006b52:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b54:	7cfb      	ldrb	r3, [r7, #19]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d129      	bne.n	8006bae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	7b1b      	ldrb	r3, [r3, #12]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fe85 	bl	8007870 <USBH_LL_GetLastXferSize>
 8006b66:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d016      	beq.n	8006ba0 <CDC_ProcessReception+0x9e>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	8b5b      	ldrh	r3, [r3, #26]
 8006b76:	461a      	mov	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d910      	bls.n	8006ba0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1ad2      	subs	r2, r2, r3
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	441a      	add	r2, r3
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2203      	movs	r2, #3
 8006b9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b9e:	e006      	b.n	8006bae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f80f 	bl	8006bcc <USBH_CDC_ReceiveCallback>
      break;
 8006bae:	bf00      	nop
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e029      	b.n	8006c60 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	79fa      	ldrb	r2, [r7, #7]
 8006c10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f81f 	bl	8006c68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fd97 	bl	800778c <USBH_LL_Init>

  return USBH_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e009      	b.n	8006c8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	33e0      	adds	r3, #224	; 0xe0
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	2200      	movs	r2, #0
 8006c86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b0f      	cmp	r3, #15
 8006c92:	d9f2      	bls.n	8006c7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	e009      	b.n	8006cae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	d3f1      	bcc.n	8006c9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2240      	movs	r2, #64	; 0x40
 8006cda:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d016      	beq.n	8006d52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10e      	bne.n	8006d4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d34:	1c59      	adds	r1, r3, #1
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	33de      	adds	r3, #222	; 0xde
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
 8006d4a:	e004      	b.n	8006d56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	e001      	b.n	8006d56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d52:	2302      	movs	r3, #2
 8006d54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d204      	bcs.n	8006d8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	78fa      	ldrb	r2, [r7, #3]
 8006d84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d88:	e001      	b.n	8006d8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	4608      	mov	r0, r1
 8006da6:	4611      	mov	r1, r2
 8006da8:	461a      	mov	r2, r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	70fb      	strb	r3, [r7, #3]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70bb      	strb	r3, [r7, #2]
 8006db2:	4613      	mov	r3, r2
 8006db4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006dc4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dc6:	e025      	b.n	8006e14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	221a      	movs	r2, #26
 8006dcc:	fb02 f303 	mul.w	r3, r2, r3
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	3302      	adds	r3, #2
 8006dd8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	795b      	ldrb	r3, [r3, #5]
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d002      	beq.n	8006dea <USBH_FindInterface+0x4e>
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	2bff      	cmp	r3, #255	; 0xff
 8006de8:	d111      	bne.n	8006e0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dee:	78ba      	ldrb	r2, [r7, #2]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d002      	beq.n	8006dfa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006df4:	78bb      	ldrb	r3, [r7, #2]
 8006df6:	2bff      	cmp	r3, #255	; 0xff
 8006df8:	d109      	bne.n	8006e0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dfe:	787a      	ldrb	r2, [r7, #1]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d002      	beq.n	8006e0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e04:	787b      	ldrb	r3, [r7, #1]
 8006e06:	2bff      	cmp	r3, #255	; 0xff
 8006e08:	d101      	bne.n	8006e0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	e006      	b.n	8006e1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	3301      	adds	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d9d6      	bls.n	8006dc8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e1a:	23ff      	movs	r3, #255	; 0xff
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fce7 	bl	8007804 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006e36:	2101      	movs	r1, #1
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fdbe 	bl	80079ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f804 	bl	8006e8a <USBH_HandleSof>
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b0b      	cmp	r3, #11
 8006e9a:	d10a      	bne.n	8006eb2 <USBH_HandleSof+0x28>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
  }
}
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006eca:	bf00      	nop
}
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006ee6:	bf00      	nop
}
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fc7a 	bl	800783a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	791b      	ldrb	r3, [r3, #4]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fad1 	bl	80074f4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	795b      	ldrb	r3, [r3, #5]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 facb 	bl	80074f4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	789b      	ldrb	r3, [r3, #2]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d10f      	bne.n	8006f9c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f805 	bl	8006fb0 <USBH_CtlReq>
 8006fa6:	4603      	mov	r3, r0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	789b      	ldrb	r3, [r3, #2]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d002      	beq.n	8006fd0 <USBH_CtlReq+0x20>
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d00f      	beq.n	8006fee <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006fce:	e027      	b.n	8007020 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	88fa      	ldrh	r2, [r7, #6]
 8006fda:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	75fb      	strb	r3, [r7, #23]
      break;
 8006fec:	e018      	b.n	8007020 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 f81c 	bl	800702c <USBH_HandleControl>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <USBH_CtlReq+0x54>
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d106      	bne.n	8007012 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	761a      	strb	r2, [r3, #24]
      break;
 8007010:	e005      	b.n	800701e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d102      	bne.n	800701e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	709a      	strb	r2, [r3, #2]
      break;
 800701e:	bf00      	nop
  }
  return status;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af02      	add	r7, sp, #8
 8007032:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007038:	2300      	movs	r3, #0
 800703a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	7e1b      	ldrb	r3, [r3, #24]
 8007040:	3b01      	subs	r3, #1
 8007042:	2b0a      	cmp	r3, #10
 8007044:	f200 8156 	bhi.w	80072f4 <USBH_HandleControl+0x2c8>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <USBH_HandleControl+0x24>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	0800707d 	.word	0x0800707d
 8007054:	08007097 	.word	0x08007097
 8007058:	08007101 	.word	0x08007101
 800705c:	08007127 	.word	0x08007127
 8007060:	0800715f 	.word	0x0800715f
 8007064:	08007189 	.word	0x08007189
 8007068:	080071db 	.word	0x080071db
 800706c:	080071fd 	.word	0x080071fd
 8007070:	08007239 	.word	0x08007239
 8007074:	0800725f 	.word	0x0800725f
 8007078:	0800729d 	.word	0x0800729d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f103 0110 	add.w	r1, r3, #16
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	795b      	ldrb	r3, [r3, #5]
 8007086:	461a      	mov	r2, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f943 	bl	8007314 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	761a      	strb	r2, [r3, #24]
      break;
 8007094:	e139      	b.n	800730a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	795b      	ldrb	r3, [r3, #5]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fc79 	bl	8007994 <USBH_LL_GetURBState>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d11e      	bne.n	80070ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7c1b      	ldrb	r3, [r3, #16]
 80070b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8adb      	ldrh	r3, [r3, #22]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80070be:	7b7b      	ldrb	r3, [r7, #13]
 80070c0:	2b80      	cmp	r3, #128	; 0x80
 80070c2:	d103      	bne.n	80070cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2203      	movs	r2, #3
 80070c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070ca:	e115      	b.n	80072f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2205      	movs	r2, #5
 80070d0:	761a      	strb	r2, [r3, #24]
      break;
 80070d2:	e111      	b.n	80072f8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80070d4:	7b7b      	ldrb	r3, [r7, #13]
 80070d6:	2b80      	cmp	r3, #128	; 0x80
 80070d8:	d103      	bne.n	80070e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2209      	movs	r2, #9
 80070de:	761a      	strb	r2, [r3, #24]
      break;
 80070e0:	e10a      	b.n	80072f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2207      	movs	r2, #7
 80070e6:	761a      	strb	r2, [r3, #24]
      break;
 80070e8:	e106      	b.n	80072f8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d003      	beq.n	80070f8 <USBH_HandleControl+0xcc>
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	f040 8100 	bne.w	80072f8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	220b      	movs	r2, #11
 80070fc:	761a      	strb	r2, [r3, #24]
      break;
 80070fe:	e0fb      	b.n	80072f8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6899      	ldr	r1, [r3, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	899a      	ldrh	r2, [r3, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	791b      	ldrb	r3, [r3, #4]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f93a 	bl	8007392 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2204      	movs	r2, #4
 8007122:	761a      	strb	r2, [r3, #24]
      break;
 8007124:	e0f1      	b.n	800730a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	791b      	ldrb	r3, [r3, #4]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fc31 	bl	8007994 <USBH_LL_GetURBState>
 8007132:	4603      	mov	r3, r0
 8007134:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d102      	bne.n	8007142 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2209      	movs	r2, #9
 8007140:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b05      	cmp	r3, #5
 8007146:	d102      	bne.n	800714e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007148:	2303      	movs	r3, #3
 800714a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800714c:	e0d6      	b.n	80072fc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b04      	cmp	r3, #4
 8007152:	f040 80d3 	bne.w	80072fc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	220b      	movs	r2, #11
 800715a:	761a      	strb	r2, [r3, #24]
      break;
 800715c:	e0ce      	b.n	80072fc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6899      	ldr	r1, [r3, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	899a      	ldrh	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	795b      	ldrb	r3, [r3, #5]
 800716a:	2001      	movs	r0, #1
 800716c:	9000      	str	r0, [sp, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f8ea 	bl	8007348 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800717a:	b29a      	uxth	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2206      	movs	r2, #6
 8007184:	761a      	strb	r2, [r3, #24]
      break;
 8007186:	e0c0      	b.n	800730a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	795b      	ldrb	r3, [r3, #5]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fc00 	bl	8007994 <USBH_LL_GetURBState>
 8007194:	4603      	mov	r3, r0
 8007196:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d103      	bne.n	80071a6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2207      	movs	r2, #7
 80071a2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071a4:	e0ac      	b.n	8007300 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b05      	cmp	r3, #5
 80071aa:	d105      	bne.n	80071b8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	220c      	movs	r2, #12
 80071b0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80071b2:	2303      	movs	r3, #3
 80071b4:	73fb      	strb	r3, [r7, #15]
      break;
 80071b6:	e0a3      	b.n	8007300 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d103      	bne.n	80071c6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2205      	movs	r2, #5
 80071c2:	761a      	strb	r2, [r3, #24]
      break;
 80071c4:	e09c      	b.n	8007300 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	f040 8099 	bne.w	8007300 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	220b      	movs	r2, #11
 80071d2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80071d4:	2302      	movs	r3, #2
 80071d6:	73fb      	strb	r3, [r7, #15]
      break;
 80071d8:	e092      	b.n	8007300 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	791b      	ldrb	r3, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	2100      	movs	r1, #0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f8d5 	bl	8007392 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2208      	movs	r2, #8
 80071f8:	761a      	strb	r2, [r3, #24]

      break;
 80071fa:	e086      	b.n	800730a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	791b      	ldrb	r3, [r3, #4]
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fbc6 	bl	8007994 <USBH_LL_GetURBState>
 8007208:	4603      	mov	r3, r0
 800720a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d105      	bne.n	800721e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	220d      	movs	r2, #13
 8007216:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800721c:	e072      	b.n	8007304 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d103      	bne.n	800722c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	220b      	movs	r2, #11
 8007228:	761a      	strb	r2, [r3, #24]
      break;
 800722a:	e06b      	b.n	8007304 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b05      	cmp	r3, #5
 8007230:	d168      	bne.n	8007304 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007232:	2303      	movs	r3, #3
 8007234:	73fb      	strb	r3, [r7, #15]
      break;
 8007236:	e065      	b.n	8007304 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	795b      	ldrb	r3, [r3, #5]
 800723c:	2201      	movs	r2, #1
 800723e:	9200      	str	r2, [sp, #0]
 8007240:	2200      	movs	r2, #0
 8007242:	2100      	movs	r1, #0
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f87f 	bl	8007348 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007250:	b29a      	uxth	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	220a      	movs	r2, #10
 800725a:	761a      	strb	r2, [r3, #24]
      break;
 800725c:	e055      	b.n	800730a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	795b      	ldrb	r3, [r3, #5]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fb95 	bl	8007994 <USBH_LL_GetURBState>
 800726a:	4603      	mov	r3, r0
 800726c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d105      	bne.n	8007280 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	220d      	movs	r2, #13
 800727c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800727e:	e043      	b.n	8007308 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d103      	bne.n	800728e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2209      	movs	r2, #9
 800728a:	761a      	strb	r2, [r3, #24]
      break;
 800728c:	e03c      	b.n	8007308 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b04      	cmp	r3, #4
 8007292:	d139      	bne.n	8007308 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	220b      	movs	r2, #11
 8007298:	761a      	strb	r2, [r3, #24]
      break;
 800729a:	e035      	b.n	8007308 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	7e5b      	ldrb	r3, [r3, #25]
 80072a0:	3301      	adds	r3, #1
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	765a      	strb	r2, [r3, #25]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7e5b      	ldrb	r3, [r3, #25]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d806      	bhi.n	80072be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80072bc:	e025      	b.n	800730a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072c4:	2106      	movs	r1, #6
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	795b      	ldrb	r3, [r3, #5]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f90c 	bl	80074f4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	791b      	ldrb	r3, [r3, #4]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f906 	bl	80074f4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80072ee:	2302      	movs	r3, #2
 80072f0:	73fb      	strb	r3, [r7, #15]
      break;
 80072f2:	e00a      	b.n	800730a <USBH_HandleControl+0x2de>

    default:
      break;
 80072f4:	bf00      	nop
 80072f6:	e008      	b.n	800730a <USBH_HandleControl+0x2de>
      break;
 80072f8:	bf00      	nop
 80072fa:	e006      	b.n	800730a <USBH_HandleControl+0x2de>
      break;
 80072fc:	bf00      	nop
 80072fe:	e004      	b.n	800730a <USBH_HandleControl+0x2de>
      break;
 8007300:	bf00      	nop
 8007302:	e002      	b.n	800730a <USBH_HandleControl+0x2de>
      break;
 8007304:	bf00      	nop
 8007306:	e000      	b.n	800730a <USBH_HandleControl+0x2de>
      break;
 8007308:	bf00      	nop
  }

  return status;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af04      	add	r7, sp, #16
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007322:	79f9      	ldrb	r1, [r7, #7]
 8007324:	2300      	movs	r3, #0
 8007326:	9303      	str	r3, [sp, #12]
 8007328:	2308      	movs	r3, #8
 800732a:	9302      	str	r3, [sp, #8]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	2300      	movs	r3, #0
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	2300      	movs	r3, #0
 8007336:	2200      	movs	r2, #0
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 fafa 	bl	8007932 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af04      	add	r7, sp, #16
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	4611      	mov	r1, r2
 8007354:	461a      	mov	r2, r3
 8007356:	460b      	mov	r3, r1
 8007358:	80fb      	strh	r3, [r7, #6]
 800735a:	4613      	mov	r3, r2
 800735c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800736c:	7979      	ldrb	r1, [r7, #5]
 800736e:	7e3b      	ldrb	r3, [r7, #24]
 8007370:	9303      	str	r3, [sp, #12]
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	9302      	str	r3, [sp, #8]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	2301      	movs	r3, #1
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	2300      	movs	r3, #0
 8007380:	2200      	movs	r2, #0
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fad5 	bl	8007932 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b088      	sub	sp, #32
 8007396:	af04      	add	r7, sp, #16
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	4611      	mov	r1, r2
 800739e:	461a      	mov	r2, r3
 80073a0:	460b      	mov	r3, r1
 80073a2:	80fb      	strh	r3, [r7, #6]
 80073a4:	4613      	mov	r3, r2
 80073a6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80073a8:	7979      	ldrb	r1, [r7, #5]
 80073aa:	2300      	movs	r3, #0
 80073ac:	9303      	str	r3, [sp, #12]
 80073ae:	88fb      	ldrh	r3, [r7, #6]
 80073b0:	9302      	str	r3, [sp, #8]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	2301      	movs	r3, #1
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	2300      	movs	r3, #0
 80073bc:	2201      	movs	r2, #1
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 fab7 	bl	8007932 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80073c4:	2300      	movs	r3, #0

}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b088      	sub	sp, #32
 80073d2:	af04      	add	r7, sp, #16
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	4611      	mov	r1, r2
 80073da:	461a      	mov	r2, r3
 80073dc:	460b      	mov	r3, r1
 80073de:	80fb      	strh	r3, [r7, #6]
 80073e0:	4613      	mov	r3, r2
 80073e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80073f2:	7979      	ldrb	r1, [r7, #5]
 80073f4:	7e3b      	ldrb	r3, [r7, #24]
 80073f6:	9303      	str	r3, [sp, #12]
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	9302      	str	r3, [sp, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	2301      	movs	r3, #1
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2302      	movs	r3, #2
 8007406:	2200      	movs	r2, #0
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fa92 	bl	8007932 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af04      	add	r7, sp, #16
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4611      	mov	r1, r2
 8007424:	461a      	mov	r2, r3
 8007426:	460b      	mov	r3, r1
 8007428:	80fb      	strh	r3, [r7, #6]
 800742a:	4613      	mov	r3, r2
 800742c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800742e:	7979      	ldrb	r1, [r7, #5]
 8007430:	2300      	movs	r3, #0
 8007432:	9303      	str	r3, [sp, #12]
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	9302      	str	r3, [sp, #8]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	9301      	str	r3, [sp, #4]
 800743c:	2301      	movs	r3, #1
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	2302      	movs	r3, #2
 8007442:	2201      	movs	r2, #1
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 fa74 	bl	8007932 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af04      	add	r7, sp, #16
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	4608      	mov	r0, r1
 800745e:	4611      	mov	r1, r2
 8007460:	461a      	mov	r2, r3
 8007462:	4603      	mov	r3, r0
 8007464:	70fb      	strb	r3, [r7, #3]
 8007466:	460b      	mov	r3, r1
 8007468:	70bb      	strb	r3, [r7, #2]
 800746a:	4613      	mov	r3, r2
 800746c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800746e:	7878      	ldrb	r0, [r7, #1]
 8007470:	78ba      	ldrb	r2, [r7, #2]
 8007472:	78f9      	ldrb	r1, [r7, #3]
 8007474:	8b3b      	ldrh	r3, [r7, #24]
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	7d3b      	ldrb	r3, [r7, #20]
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	7c3b      	ldrb	r3, [r7, #16]
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	4603      	mov	r3, r0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa07 	bl	8007896 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fa26 	bl	80078f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f836 	bl	8007530 <USBH_GetFreePipe>
 80074c4:	4603      	mov	r3, r0
 80074c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80074c8:	89fb      	ldrh	r3, [r7, #14]
 80074ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00a      	beq.n	80074e8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	89fb      	ldrh	r3, [r7, #14]
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	33e0      	adds	r3, #224	; 0xe0
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80074e8:	89fb      	ldrh	r3, [r7, #14]
 80074ea:	b2db      	uxtb	r3, r3
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	2b0f      	cmp	r3, #15
 8007504:	d80d      	bhi.n	8007522 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	33e0      	adds	r3, #224	; 0xe0
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	33e0      	adds	r3, #224	; 0xe0
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]
 8007540:	e00f      	b.n	8007562 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	33e0      	adds	r3, #224	; 0xe0
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d102      	bne.n	800755c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	b29b      	uxth	r3, r3
 800755a:	e007      	b.n	800756c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	3301      	adds	r3, #1
 8007560:	73fb      	strb	r3, [r7, #15]
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b0f      	cmp	r3, #15
 8007566:	d9ec      	bls.n	8007542 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007568:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800757c:	2201      	movs	r2, #1
 800757e:	490e      	ldr	r1, [pc, #56]	; (80075b8 <MX_USB_HOST_Init+0x40>)
 8007580:	480e      	ldr	r0, [pc, #56]	; (80075bc <MX_USB_HOST_Init+0x44>)
 8007582:	f7ff fb37 	bl	8006bf4 <USBH_Init>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800758c:	f7f9 fa84 	bl	8000a98 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007590:	490b      	ldr	r1, [pc, #44]	; (80075c0 <MX_USB_HOST_Init+0x48>)
 8007592:	480a      	ldr	r0, [pc, #40]	; (80075bc <MX_USB_HOST_Init+0x44>)
 8007594:	f7ff fbbc 	bl	8006d10 <USBH_RegisterClass>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800759e:	f7f9 fa7b 	bl	8000a98 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80075a2:	4806      	ldr	r0, [pc, #24]	; (80075bc <MX_USB_HOST_Init+0x44>)
 80075a4:	f7ff fc40 	bl	8006e28 <USBH_Start>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80075ae:	f7f9 fa73 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80075b2:	bf00      	nop
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	080075c5 	.word	0x080075c5
 80075bc:	20000238 	.word	0x20000238
 80075c0:	2000000c 	.word	0x2000000c

080075c4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d819      	bhi.n	800760c <USBH_UserProcess+0x48>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <USBH_UserProcess+0x1c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	080075fd 	.word	0x080075fd
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007605 	.word	0x08007605
 80075f0:	080075f5 	.word	0x080075f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80075f4:	4b09      	ldr	r3, [pc, #36]	; (800761c <USBH_UserProcess+0x58>)
 80075f6:	2203      	movs	r2, #3
 80075f8:	701a      	strb	r2, [r3, #0]
  break;
 80075fa:	e008      	b.n	800760e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80075fc:	4b07      	ldr	r3, [pc, #28]	; (800761c <USBH_UserProcess+0x58>)
 80075fe:	2202      	movs	r2, #2
 8007600:	701a      	strb	r2, [r3, #0]
  break;
 8007602:	e004      	b.n	800760e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007604:	4b05      	ldr	r3, [pc, #20]	; (800761c <USBH_UserProcess+0x58>)
 8007606:	2201      	movs	r2, #1
 8007608:	701a      	strb	r2, [r3, #0]
  break;
 800760a:	e000      	b.n	800760e <USBH_UserProcess+0x4a>

  default:
  break;
 800760c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000610 	.word	0x20000610

08007620 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	60da      	str	r2, [r3, #12]
 8007636:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007640:	d147      	bne.n	80076d2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007642:	2300      	movs	r3, #0
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	4b25      	ldr	r3, [pc, #148]	; (80076dc <HAL_HCD_MspInit+0xbc>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	4a24      	ldr	r2, [pc, #144]	; (80076dc <HAL_HCD_MspInit+0xbc>)
 800764c:	f043 0301 	orr.w	r3, r3, #1
 8007650:	6313      	str	r3, [r2, #48]	; 0x30
 8007652:	4b22      	ldr	r3, [pc, #136]	; (80076dc <HAL_HCD_MspInit+0xbc>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800765e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007664:	2300      	movs	r3, #0
 8007666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007668:	2300      	movs	r3, #0
 800766a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	4619      	mov	r1, r3
 8007672:	481b      	ldr	r0, [pc, #108]	; (80076e0 <HAL_HCD_MspInit+0xc0>)
 8007674:	f7f9 ff2e 	bl	80014d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007678:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800767c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767e:	2302      	movs	r3, #2
 8007680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007686:	2300      	movs	r3, #0
 8007688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800768a:	230a      	movs	r3, #10
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800768e:	f107 0314 	add.w	r3, r7, #20
 8007692:	4619      	mov	r1, r3
 8007694:	4812      	ldr	r0, [pc, #72]	; (80076e0 <HAL_HCD_MspInit+0xc0>)
 8007696:	f7f9 ff1d 	bl	80014d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800769a:	4b10      	ldr	r3, [pc, #64]	; (80076dc <HAL_HCD_MspInit+0xbc>)
 800769c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769e:	4a0f      	ldr	r2, [pc, #60]	; (80076dc <HAL_HCD_MspInit+0xbc>)
 80076a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a4:	6353      	str	r3, [r2, #52]	; 0x34
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <HAL_HCD_MspInit+0xbc>)
 80076ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ae:	4a0b      	ldr	r2, [pc, #44]	; (80076dc <HAL_HCD_MspInit+0xbc>)
 80076b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076b4:	6453      	str	r3, [r2, #68]	; 0x44
 80076b6:	4b09      	ldr	r3, [pc, #36]	; (80076dc <HAL_HCD_MspInit+0xbc>)
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076c2:	2200      	movs	r2, #0
 80076c4:	2100      	movs	r1, #0
 80076c6:	2043      	movs	r0, #67	; 0x43
 80076c8:	f7f9 fecd 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076cc:	2043      	movs	r0, #67	; 0x43
 80076ce:	f7f9 fee6 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076d2:	bf00      	nop
 80076d4:	3728      	adds	r7, #40	; 0x28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40023800 	.word	0x40023800
 80076e0:	40020000 	.word	0x40020000

080076e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff fbb7 	bl	8006e66 <USBH_LL_IncTimer>
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fbef 	bl	8006ef2 <USBH_LL_Connect>
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fbf8 	bl	8006f20 <USBH_LL_Disconnect>
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
 8007744:	4613      	mov	r3, r2
 8007746:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fba9 	bl	8006eba <USBH_LL_PortEnabled>
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fba9 	bl	8006ed6 <USBH_LL_PortDisabled>
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800779a:	2b01      	cmp	r3, #1
 800779c:	d12a      	bne.n	80077f4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800779e:	4a18      	ldr	r2, [pc, #96]	; (8007800 <USBH_LL_Init+0x74>)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a15      	ldr	r2, [pc, #84]	; (8007800 <USBH_LL_Init+0x74>)
 80077aa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80077ae:	4b14      	ldr	r3, [pc, #80]	; (8007800 <USBH_LL_Init+0x74>)
 80077b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80077b4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80077b6:	4b12      	ldr	r3, [pc, #72]	; (8007800 <USBH_LL_Init+0x74>)
 80077b8:	2208      	movs	r2, #8
 80077ba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80077bc:	4b10      	ldr	r3, [pc, #64]	; (8007800 <USBH_LL_Init+0x74>)
 80077be:	2201      	movs	r2, #1
 80077c0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077c2:	4b0f      	ldr	r3, [pc, #60]	; (8007800 <USBH_LL_Init+0x74>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <USBH_LL_Init+0x74>)
 80077ca:	2202      	movs	r2, #2
 80077cc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077ce:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <USBH_LL_Init+0x74>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80077d4:	480a      	ldr	r0, [pc, #40]	; (8007800 <USBH_LL_Init+0x74>)
 80077d6:	f7fa f865 	bl	80018a4 <HAL_HCD_Init>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80077e0:	f7f9 f95a 	bl	8000a98 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80077e4:	4806      	ldr	r0, [pc, #24]	; (8007800 <USBH_LL_Init+0x74>)
 80077e6:	f7fa fc3a 	bl	800205e <HAL_HCD_GetCurrentFrame>
 80077ea:	4603      	mov	r3, r0
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff fb2a 	bl	8006e48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000614 	.word	0x20000614

08007804 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800781a:	4618      	mov	r0, r3
 800781c:	f7fa fbb7 	bl	8001f8e <HAL_HCD_Start>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 f90e 	bl	8007a48 <USBH_Get_USB_Status>
 800782c:	4603      	mov	r3, r0
 800782e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007830:	7bbb      	ldrb	r3, [r7, #14]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007850:	4618      	mov	r0, r3
 8007852:	f7fa fbbf 	bl	8001fd4 <HAL_HCD_Stop>
 8007856:	4603      	mov	r3, r0
 8007858:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	4618      	mov	r0, r3
 800785e:	f000 f8f3 	bl	8007a48 <USBH_Get_USB_Status>
 8007862:	4603      	mov	r3, r0
 8007864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007866:	7bbb      	ldrb	r3, [r7, #14]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007882:	78fa      	ldrb	r2, [r7, #3]
 8007884:	4611      	mov	r1, r2
 8007886:	4618      	mov	r0, r3
 8007888:	f7fa fbd5 	bl	8002036 <HAL_HCD_HC_GetXferCount>
 800788c:	4603      	mov	r3, r0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007896:	b590      	push	{r4, r7, lr}
 8007898:	b089      	sub	sp, #36	; 0x24
 800789a:	af04      	add	r7, sp, #16
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	4608      	mov	r0, r1
 80078a0:	4611      	mov	r1, r2
 80078a2:	461a      	mov	r2, r3
 80078a4:	4603      	mov	r3, r0
 80078a6:	70fb      	strb	r3, [r7, #3]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70bb      	strb	r3, [r7, #2]
 80078ac:	4613      	mov	r3, r2
 80078ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078be:	787c      	ldrb	r4, [r7, #1]
 80078c0:	78ba      	ldrb	r2, [r7, #2]
 80078c2:	78f9      	ldrb	r1, [r7, #3]
 80078c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	4623      	mov	r3, r4
 80078d6:	f7fa f847 	bl	8001968 <HAL_HCD_HC_Init>
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 f8b1 	bl	8007a48 <USBH_Get_USB_Status>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd90      	pop	{r4, r7, pc}

080078f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	4611      	mov	r1, r2
 8007912:	4618      	mov	r0, r3
 8007914:	f7fa f8b7 	bl	8001a86 <HAL_HCD_HC_Halt>
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	4618      	mov	r0, r3
 8007920:	f000 f892 	bl	8007a48 <USBH_Get_USB_Status>
 8007924:	4603      	mov	r3, r0
 8007926:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007928:	7bbb      	ldrb	r3, [r7, #14]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007932:	b590      	push	{r4, r7, lr}
 8007934:	b089      	sub	sp, #36	; 0x24
 8007936:	af04      	add	r7, sp, #16
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	461a      	mov	r2, r3
 8007940:	4603      	mov	r3, r0
 8007942:	70fb      	strb	r3, [r7, #3]
 8007944:	460b      	mov	r3, r1
 8007946:	70bb      	strb	r3, [r7, #2]
 8007948:	4613      	mov	r3, r2
 800794a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800795a:	787c      	ldrb	r4, [r7, #1]
 800795c:	78ba      	ldrb	r2, [r7, #2]
 800795e:	78f9      	ldrb	r1, [r7, #3]
 8007960:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007964:	9303      	str	r3, [sp, #12]
 8007966:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007968:	9302      	str	r3, [sp, #8]
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4623      	mov	r3, r4
 8007976:	f7fa f8a9 	bl	8001acc <HAL_HCD_HC_SubmitRequest>
 800797a:	4603      	mov	r3, r0
 800797c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f861 	bl	8007a48 <USBH_Get_USB_Status>
 8007986:	4603      	mov	r3, r0
 8007988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800798a:	7bbb      	ldrb	r3, [r7, #14]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	bd90      	pop	{r4, r7, pc}

08007994 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079a6:	78fa      	ldrb	r2, [r7, #3]
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fa fb2f 	bl	800200e <HAL_HCD_HC_GetURBState>
 80079b0:	4603      	mov	r3, r0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b082      	sub	sp, #8
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d103      	bne.n	80079d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 f864 	bl	8007aa0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079d8:	20c8      	movs	r0, #200	; 0xc8
 80079da:	f7f9 fc45 	bl	8001268 <HAL_Delay>
  return USBH_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
 80079f4:	4613      	mov	r3, r2
 80079f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	212c      	movs	r1, #44	; 0x2c
 8007a06:	fb01 f303 	mul.w	r3, r1, r3
 8007a0a:	4413      	add	r3, r2
 8007a0c:	333b      	adds	r3, #59	; 0x3b
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d009      	beq.n	8007a28 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	212c      	movs	r1, #44	; 0x2c
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	4413      	add	r3, r2
 8007a20:	3354      	adds	r3, #84	; 0x54
 8007a22:	78ba      	ldrb	r2, [r7, #2]
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e008      	b.n	8007a3a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	212c      	movs	r1, #44	; 0x2c
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	3355      	adds	r3, #85	; 0x55
 8007a36:	78ba      	ldrb	r2, [r7, #2]
 8007a38:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d817      	bhi.n	8007a8c <USBH_Get_USB_Status+0x44>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <USBH_Get_USB_Status+0x1c>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a7b 	.word	0x08007a7b
 8007a6c:	08007a81 	.word	0x08007a81
 8007a70:	08007a87 	.word	0x08007a87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73fb      	strb	r3, [r7, #15]
    break;
 8007a78:	e00b      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7e:	e008      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a80:	2301      	movs	r3, #1
 8007a82:	73fb      	strb	r3, [r7, #15]
    break;
 8007a84:	e005      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a86:	2302      	movs	r3, #2
 8007a88:	73fb      	strb	r3, [r7, #15]
    break;
 8007a8a:	e002      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a90:	bf00      	nop
  }
  return usb_status;
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
 8007ab8:	e001      	b.n	8007abe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4803      	ldr	r0, [pc, #12]	; (8007ad4 <MX_DriverVbusFS+0x34>)
 8007ac6:	f7f9 fea1 	bl	800180c <HAL_GPIO_WritePin>
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40020800 	.word	0x40020800

08007ad8 <__errno>:
 8007ad8:	4b01      	ldr	r3, [pc, #4]	; (8007ae0 <__errno+0x8>)
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	2000002c 	.word	0x2000002c

08007ae4 <__libc_init_array>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	4d0d      	ldr	r5, [pc, #52]	; (8007b1c <__libc_init_array+0x38>)
 8007ae8:	4c0d      	ldr	r4, [pc, #52]	; (8007b20 <__libc_init_array+0x3c>)
 8007aea:	1b64      	subs	r4, r4, r5
 8007aec:	10a4      	asrs	r4, r4, #2
 8007aee:	2600      	movs	r6, #0
 8007af0:	42a6      	cmp	r6, r4
 8007af2:	d109      	bne.n	8007b08 <__libc_init_array+0x24>
 8007af4:	4d0b      	ldr	r5, [pc, #44]	; (8007b24 <__libc_init_array+0x40>)
 8007af6:	4c0c      	ldr	r4, [pc, #48]	; (8007b28 <__libc_init_array+0x44>)
 8007af8:	f000 ffbe 	bl	8008a78 <_init>
 8007afc:	1b64      	subs	r4, r4, r5
 8007afe:	10a4      	asrs	r4, r4, #2
 8007b00:	2600      	movs	r6, #0
 8007b02:	42a6      	cmp	r6, r4
 8007b04:	d105      	bne.n	8007b12 <__libc_init_array+0x2e>
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0c:	4798      	blx	r3
 8007b0e:	3601      	adds	r6, #1
 8007b10:	e7ee      	b.n	8007af0 <__libc_init_array+0xc>
 8007b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b16:	4798      	blx	r3
 8007b18:	3601      	adds	r6, #1
 8007b1a:	e7f2      	b.n	8007b02 <__libc_init_array+0x1e>
 8007b1c:	08008b58 	.word	0x08008b58
 8007b20:	08008b58 	.word	0x08008b58
 8007b24:	08008b58 	.word	0x08008b58
 8007b28:	08008b5c 	.word	0x08008b5c

08007b2c <malloc>:
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <malloc+0xc>)
 8007b2e:	4601      	mov	r1, r0
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f000 b87f 	b.w	8007c34 <_malloc_r>
 8007b36:	bf00      	nop
 8007b38:	2000002c 	.word	0x2000002c

08007b3c <free>:
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <free+0xc>)
 8007b3e:	4601      	mov	r1, r0
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	f000 b80b 	b.w	8007b5c <_free_r>
 8007b46:	bf00      	nop
 8007b48:	2000002c 	.word	0x2000002c

08007b4c <memset>:
 8007b4c:	4402      	add	r2, r0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d100      	bne.n	8007b56 <memset+0xa>
 8007b54:	4770      	bx	lr
 8007b56:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5a:	e7f9      	b.n	8007b50 <memset+0x4>

08007b5c <_free_r>:
 8007b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b5e:	2900      	cmp	r1, #0
 8007b60:	d044      	beq.n	8007bec <_free_r+0x90>
 8007b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b66:	9001      	str	r0, [sp, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b6e:	bfb8      	it	lt
 8007b70:	18e4      	addlt	r4, r4, r3
 8007b72:	f000 f9f3 	bl	8007f5c <__malloc_lock>
 8007b76:	4a1e      	ldr	r2, [pc, #120]	; (8007bf0 <_free_r+0x94>)
 8007b78:	9801      	ldr	r0, [sp, #4]
 8007b7a:	6813      	ldr	r3, [r2, #0]
 8007b7c:	b933      	cbnz	r3, 8007b8c <_free_r+0x30>
 8007b7e:	6063      	str	r3, [r4, #4]
 8007b80:	6014      	str	r4, [r2, #0]
 8007b82:	b003      	add	sp, #12
 8007b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b88:	f000 b9ee 	b.w	8007f68 <__malloc_unlock>
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	d908      	bls.n	8007ba2 <_free_r+0x46>
 8007b90:	6825      	ldr	r5, [r4, #0]
 8007b92:	1961      	adds	r1, r4, r5
 8007b94:	428b      	cmp	r3, r1
 8007b96:	bf01      	itttt	eq
 8007b98:	6819      	ldreq	r1, [r3, #0]
 8007b9a:	685b      	ldreq	r3, [r3, #4]
 8007b9c:	1949      	addeq	r1, r1, r5
 8007b9e:	6021      	streq	r1, [r4, #0]
 8007ba0:	e7ed      	b.n	8007b7e <_free_r+0x22>
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	b10b      	cbz	r3, 8007bac <_free_r+0x50>
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d9fa      	bls.n	8007ba2 <_free_r+0x46>
 8007bac:	6811      	ldr	r1, [r2, #0]
 8007bae:	1855      	adds	r5, r2, r1
 8007bb0:	42a5      	cmp	r5, r4
 8007bb2:	d10b      	bne.n	8007bcc <_free_r+0x70>
 8007bb4:	6824      	ldr	r4, [r4, #0]
 8007bb6:	4421      	add	r1, r4
 8007bb8:	1854      	adds	r4, r2, r1
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	6011      	str	r1, [r2, #0]
 8007bbe:	d1e0      	bne.n	8007b82 <_free_r+0x26>
 8007bc0:	681c      	ldr	r4, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	6053      	str	r3, [r2, #4]
 8007bc6:	4421      	add	r1, r4
 8007bc8:	6011      	str	r1, [r2, #0]
 8007bca:	e7da      	b.n	8007b82 <_free_r+0x26>
 8007bcc:	d902      	bls.n	8007bd4 <_free_r+0x78>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6003      	str	r3, [r0, #0]
 8007bd2:	e7d6      	b.n	8007b82 <_free_r+0x26>
 8007bd4:	6825      	ldr	r5, [r4, #0]
 8007bd6:	1961      	adds	r1, r4, r5
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	bf04      	itt	eq
 8007bdc:	6819      	ldreq	r1, [r3, #0]
 8007bde:	685b      	ldreq	r3, [r3, #4]
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	bf04      	itt	eq
 8007be4:	1949      	addeq	r1, r1, r5
 8007be6:	6021      	streq	r1, [r4, #0]
 8007be8:	6054      	str	r4, [r2, #4]
 8007bea:	e7ca      	b.n	8007b82 <_free_r+0x26>
 8007bec:	b003      	add	sp, #12
 8007bee:	bd30      	pop	{r4, r5, pc}
 8007bf0:	20000918 	.word	0x20000918

08007bf4 <sbrk_aligned>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4e0e      	ldr	r6, [pc, #56]	; (8007c30 <sbrk_aligned+0x3c>)
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	6831      	ldr	r1, [r6, #0]
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	b911      	cbnz	r1, 8007c06 <sbrk_aligned+0x12>
 8007c00:	f000 f8a4 	bl	8007d4c <_sbrk_r>
 8007c04:	6030      	str	r0, [r6, #0]
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 f89f 	bl	8007d4c <_sbrk_r>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	d00a      	beq.n	8007c28 <sbrk_aligned+0x34>
 8007c12:	1cc4      	adds	r4, r0, #3
 8007c14:	f024 0403 	bic.w	r4, r4, #3
 8007c18:	42a0      	cmp	r0, r4
 8007c1a:	d007      	beq.n	8007c2c <sbrk_aligned+0x38>
 8007c1c:	1a21      	subs	r1, r4, r0
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 f894 	bl	8007d4c <_sbrk_r>
 8007c24:	3001      	adds	r0, #1
 8007c26:	d101      	bne.n	8007c2c <sbrk_aligned+0x38>
 8007c28:	f04f 34ff 	mov.w	r4, #4294967295
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	2000091c 	.word	0x2000091c

08007c34 <_malloc_r>:
 8007c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	1ccd      	adds	r5, r1, #3
 8007c3a:	f025 0503 	bic.w	r5, r5, #3
 8007c3e:	3508      	adds	r5, #8
 8007c40:	2d0c      	cmp	r5, #12
 8007c42:	bf38      	it	cc
 8007c44:	250c      	movcc	r5, #12
 8007c46:	2d00      	cmp	r5, #0
 8007c48:	4607      	mov	r7, r0
 8007c4a:	db01      	blt.n	8007c50 <_malloc_r+0x1c>
 8007c4c:	42a9      	cmp	r1, r5
 8007c4e:	d905      	bls.n	8007c5c <_malloc_r+0x28>
 8007c50:	230c      	movs	r3, #12
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	2600      	movs	r6, #0
 8007c56:	4630      	mov	r0, r6
 8007c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5c:	4e2e      	ldr	r6, [pc, #184]	; (8007d18 <_malloc_r+0xe4>)
 8007c5e:	f000 f97d 	bl	8007f5c <__malloc_lock>
 8007c62:	6833      	ldr	r3, [r6, #0]
 8007c64:	461c      	mov	r4, r3
 8007c66:	bb34      	cbnz	r4, 8007cb6 <_malloc_r+0x82>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f7ff ffc2 	bl	8007bf4 <sbrk_aligned>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	4604      	mov	r4, r0
 8007c74:	d14d      	bne.n	8007d12 <_malloc_r+0xde>
 8007c76:	6834      	ldr	r4, [r6, #0]
 8007c78:	4626      	mov	r6, r4
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d140      	bne.n	8007d00 <_malloc_r+0xcc>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	4631      	mov	r1, r6
 8007c82:	4638      	mov	r0, r7
 8007c84:	eb04 0803 	add.w	r8, r4, r3
 8007c88:	f000 f860 	bl	8007d4c <_sbrk_r>
 8007c8c:	4580      	cmp	r8, r0
 8007c8e:	d13a      	bne.n	8007d06 <_malloc_r+0xd2>
 8007c90:	6821      	ldr	r1, [r4, #0]
 8007c92:	3503      	adds	r5, #3
 8007c94:	1a6d      	subs	r5, r5, r1
 8007c96:	f025 0503 	bic.w	r5, r5, #3
 8007c9a:	3508      	adds	r5, #8
 8007c9c:	2d0c      	cmp	r5, #12
 8007c9e:	bf38      	it	cc
 8007ca0:	250c      	movcc	r5, #12
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff ffa5 	bl	8007bf4 <sbrk_aligned>
 8007caa:	3001      	adds	r0, #1
 8007cac:	d02b      	beq.n	8007d06 <_malloc_r+0xd2>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	442b      	add	r3, r5
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	e00e      	b.n	8007cd4 <_malloc_r+0xa0>
 8007cb6:	6822      	ldr	r2, [r4, #0]
 8007cb8:	1b52      	subs	r2, r2, r5
 8007cba:	d41e      	bmi.n	8007cfa <_malloc_r+0xc6>
 8007cbc:	2a0b      	cmp	r2, #11
 8007cbe:	d916      	bls.n	8007cee <_malloc_r+0xba>
 8007cc0:	1961      	adds	r1, r4, r5
 8007cc2:	42a3      	cmp	r3, r4
 8007cc4:	6025      	str	r5, [r4, #0]
 8007cc6:	bf18      	it	ne
 8007cc8:	6059      	strne	r1, [r3, #4]
 8007cca:	6863      	ldr	r3, [r4, #4]
 8007ccc:	bf08      	it	eq
 8007cce:	6031      	streq	r1, [r6, #0]
 8007cd0:	5162      	str	r2, [r4, r5]
 8007cd2:	604b      	str	r3, [r1, #4]
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	f104 060b 	add.w	r6, r4, #11
 8007cda:	f000 f945 	bl	8007f68 <__malloc_unlock>
 8007cde:	f026 0607 	bic.w	r6, r6, #7
 8007ce2:	1d23      	adds	r3, r4, #4
 8007ce4:	1af2      	subs	r2, r6, r3
 8007ce6:	d0b6      	beq.n	8007c56 <_malloc_r+0x22>
 8007ce8:	1b9b      	subs	r3, r3, r6
 8007cea:	50a3      	str	r3, [r4, r2]
 8007cec:	e7b3      	b.n	8007c56 <_malloc_r+0x22>
 8007cee:	6862      	ldr	r2, [r4, #4]
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	bf0c      	ite	eq
 8007cf4:	6032      	streq	r2, [r6, #0]
 8007cf6:	605a      	strne	r2, [r3, #4]
 8007cf8:	e7ec      	b.n	8007cd4 <_malloc_r+0xa0>
 8007cfa:	4623      	mov	r3, r4
 8007cfc:	6864      	ldr	r4, [r4, #4]
 8007cfe:	e7b2      	b.n	8007c66 <_malloc_r+0x32>
 8007d00:	4634      	mov	r4, r6
 8007d02:	6876      	ldr	r6, [r6, #4]
 8007d04:	e7b9      	b.n	8007c7a <_malloc_r+0x46>
 8007d06:	230c      	movs	r3, #12
 8007d08:	603b      	str	r3, [r7, #0]
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f000 f92c 	bl	8007f68 <__malloc_unlock>
 8007d10:	e7a1      	b.n	8007c56 <_malloc_r+0x22>
 8007d12:	6025      	str	r5, [r4, #0]
 8007d14:	e7de      	b.n	8007cd4 <_malloc_r+0xa0>
 8007d16:	bf00      	nop
 8007d18:	20000918 	.word	0x20000918

08007d1c <iprintf>:
 8007d1c:	b40f      	push	{r0, r1, r2, r3}
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <iprintf+0x2c>)
 8007d20:	b513      	push	{r0, r1, r4, lr}
 8007d22:	681c      	ldr	r4, [r3, #0]
 8007d24:	b124      	cbz	r4, 8007d30 <iprintf+0x14>
 8007d26:	69a3      	ldr	r3, [r4, #24]
 8007d28:	b913      	cbnz	r3, 8007d30 <iprintf+0x14>
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 f876 	bl	8007e1c <__sinit>
 8007d30:	ab05      	add	r3, sp, #20
 8007d32:	9a04      	ldr	r2, [sp, #16]
 8007d34:	68a1      	ldr	r1, [r4, #8]
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 f945 	bl	8007fc8 <_vfiprintf_r>
 8007d3e:	b002      	add	sp, #8
 8007d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d44:	b004      	add	sp, #16
 8007d46:	4770      	bx	lr
 8007d48:	2000002c 	.word	0x2000002c

08007d4c <_sbrk_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4d06      	ldr	r5, [pc, #24]	; (8007d68 <_sbrk_r+0x1c>)
 8007d50:	2300      	movs	r3, #0
 8007d52:	4604      	mov	r4, r0
 8007d54:	4608      	mov	r0, r1
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	f7f8 ffec 	bl	8000d34 <_sbrk>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_sbrk_r+0x1a>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_sbrk_r+0x1a>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	20000924 	.word	0x20000924

08007d6c <std>:
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	4604      	mov	r4, r0
 8007d72:	e9c0 3300 	strd	r3, r3, [r0]
 8007d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d7a:	6083      	str	r3, [r0, #8]
 8007d7c:	8181      	strh	r1, [r0, #12]
 8007d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d80:	81c2      	strh	r2, [r0, #14]
 8007d82:	6183      	str	r3, [r0, #24]
 8007d84:	4619      	mov	r1, r3
 8007d86:	2208      	movs	r2, #8
 8007d88:	305c      	adds	r0, #92	; 0x5c
 8007d8a:	f7ff fedf 	bl	8007b4c <memset>
 8007d8e:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <std+0x38>)
 8007d90:	6263      	str	r3, [r4, #36]	; 0x24
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <std+0x3c>)
 8007d94:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <std+0x40>)
 8007d98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d9a:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <std+0x44>)
 8007d9c:	6224      	str	r4, [r4, #32]
 8007d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	bf00      	nop
 8007da4:	08008551 	.word	0x08008551
 8007da8:	08008573 	.word	0x08008573
 8007dac:	080085ab 	.word	0x080085ab
 8007db0:	080085cf 	.word	0x080085cf

08007db4 <_cleanup_r>:
 8007db4:	4901      	ldr	r1, [pc, #4]	; (8007dbc <_cleanup_r+0x8>)
 8007db6:	f000 b8af 	b.w	8007f18 <_fwalk_reent>
 8007dba:	bf00      	nop
 8007dbc:	080088a9 	.word	0x080088a9

08007dc0 <__sfmoreglue>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	2268      	movs	r2, #104	; 0x68
 8007dc4:	1e4d      	subs	r5, r1, #1
 8007dc6:	4355      	muls	r5, r2
 8007dc8:	460e      	mov	r6, r1
 8007dca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dce:	f7ff ff31 	bl	8007c34 <_malloc_r>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	b140      	cbz	r0, 8007de8 <__sfmoreglue+0x28>
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	e9c0 1600 	strd	r1, r6, [r0]
 8007ddc:	300c      	adds	r0, #12
 8007dde:	60a0      	str	r0, [r4, #8]
 8007de0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007de4:	f7ff feb2 	bl	8007b4c <memset>
 8007de8:	4620      	mov	r0, r4
 8007dea:	bd70      	pop	{r4, r5, r6, pc}

08007dec <__sfp_lock_acquire>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__sfp_lock_acquire+0x8>)
 8007dee:	f000 b8b3 	b.w	8007f58 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	20000921 	.word	0x20000921

08007df8 <__sfp_lock_release>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__sfp_lock_release+0x8>)
 8007dfa:	f000 b8ae 	b.w	8007f5a <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	20000921 	.word	0x20000921

08007e04 <__sinit_lock_acquire>:
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <__sinit_lock_acquire+0x8>)
 8007e06:	f000 b8a7 	b.w	8007f58 <__retarget_lock_acquire_recursive>
 8007e0a:	bf00      	nop
 8007e0c:	20000922 	.word	0x20000922

08007e10 <__sinit_lock_release>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <__sinit_lock_release+0x8>)
 8007e12:	f000 b8a2 	b.w	8007f5a <__retarget_lock_release_recursive>
 8007e16:	bf00      	nop
 8007e18:	20000922 	.word	0x20000922

08007e1c <__sinit>:
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	4604      	mov	r4, r0
 8007e20:	f7ff fff0 	bl	8007e04 <__sinit_lock_acquire>
 8007e24:	69a3      	ldr	r3, [r4, #24]
 8007e26:	b11b      	cbz	r3, 8007e30 <__sinit+0x14>
 8007e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e2c:	f7ff bff0 	b.w	8007e10 <__sinit_lock_release>
 8007e30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e34:	6523      	str	r3, [r4, #80]	; 0x50
 8007e36:	4b13      	ldr	r3, [pc, #76]	; (8007e84 <__sinit+0x68>)
 8007e38:	4a13      	ldr	r2, [pc, #76]	; (8007e88 <__sinit+0x6c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	bf04      	itt	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	61a3      	streq	r3, [r4, #24]
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 f820 	bl	8007e8c <__sfp>
 8007e4c:	6060      	str	r0, [r4, #4]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 f81c 	bl	8007e8c <__sfp>
 8007e54:	60a0      	str	r0, [r4, #8]
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 f818 	bl	8007e8c <__sfp>
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	60e0      	str	r0, [r4, #12]
 8007e60:	2104      	movs	r1, #4
 8007e62:	6860      	ldr	r0, [r4, #4]
 8007e64:	f7ff ff82 	bl	8007d6c <std>
 8007e68:	68a0      	ldr	r0, [r4, #8]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	2109      	movs	r1, #9
 8007e6e:	f7ff ff7d 	bl	8007d6c <std>
 8007e72:	68e0      	ldr	r0, [r4, #12]
 8007e74:	2202      	movs	r2, #2
 8007e76:	2112      	movs	r1, #18
 8007e78:	f7ff ff78 	bl	8007d6c <std>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	61a3      	str	r3, [r4, #24]
 8007e80:	e7d2      	b.n	8007e28 <__sinit+0xc>
 8007e82:	bf00      	nop
 8007e84:	08008ab8 	.word	0x08008ab8
 8007e88:	08007db5 	.word	0x08007db5

08007e8c <__sfp>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	4607      	mov	r7, r0
 8007e90:	f7ff ffac 	bl	8007dec <__sfp_lock_acquire>
 8007e94:	4b1e      	ldr	r3, [pc, #120]	; (8007f10 <__sfp+0x84>)
 8007e96:	681e      	ldr	r6, [r3, #0]
 8007e98:	69b3      	ldr	r3, [r6, #24]
 8007e9a:	b913      	cbnz	r3, 8007ea2 <__sfp+0x16>
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff ffbd 	bl	8007e1c <__sinit>
 8007ea2:	3648      	adds	r6, #72	; 0x48
 8007ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	d503      	bpl.n	8007eb4 <__sfp+0x28>
 8007eac:	6833      	ldr	r3, [r6, #0]
 8007eae:	b30b      	cbz	r3, 8007ef4 <__sfp+0x68>
 8007eb0:	6836      	ldr	r6, [r6, #0]
 8007eb2:	e7f7      	b.n	8007ea4 <__sfp+0x18>
 8007eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007eb8:	b9d5      	cbnz	r5, 8007ef0 <__sfp+0x64>
 8007eba:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <__sfp+0x88>)
 8007ebc:	60e3      	str	r3, [r4, #12]
 8007ebe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ec2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ec4:	f000 f847 	bl	8007f56 <__retarget_lock_init_recursive>
 8007ec8:	f7ff ff96 	bl	8007df8 <__sfp_lock_release>
 8007ecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ed4:	6025      	str	r5, [r4, #0]
 8007ed6:	61a5      	str	r5, [r4, #24]
 8007ed8:	2208      	movs	r2, #8
 8007eda:	4629      	mov	r1, r5
 8007edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ee0:	f7ff fe34 	bl	8007b4c <memset>
 8007ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007eec:	4620      	mov	r0, r4
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef0:	3468      	adds	r4, #104	; 0x68
 8007ef2:	e7d9      	b.n	8007ea8 <__sfp+0x1c>
 8007ef4:	2104      	movs	r1, #4
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	f7ff ff62 	bl	8007dc0 <__sfmoreglue>
 8007efc:	4604      	mov	r4, r0
 8007efe:	6030      	str	r0, [r6, #0]
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d1d5      	bne.n	8007eb0 <__sfp+0x24>
 8007f04:	f7ff ff78 	bl	8007df8 <__sfp_lock_release>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	e7ee      	b.n	8007eec <__sfp+0x60>
 8007f0e:	bf00      	nop
 8007f10:	08008ab8 	.word	0x08008ab8
 8007f14:	ffff0001 	.word	0xffff0001

08007f18 <_fwalk_reent>:
 8007f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	4688      	mov	r8, r1
 8007f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f24:	2700      	movs	r7, #0
 8007f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f2e:	d505      	bpl.n	8007f3c <_fwalk_reent+0x24>
 8007f30:	6824      	ldr	r4, [r4, #0]
 8007f32:	2c00      	cmp	r4, #0
 8007f34:	d1f7      	bne.n	8007f26 <_fwalk_reent+0xe>
 8007f36:	4638      	mov	r0, r7
 8007f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f3c:	89ab      	ldrh	r3, [r5, #12]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d907      	bls.n	8007f52 <_fwalk_reent+0x3a>
 8007f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f46:	3301      	adds	r3, #1
 8007f48:	d003      	beq.n	8007f52 <_fwalk_reent+0x3a>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	47c0      	blx	r8
 8007f50:	4307      	orrs	r7, r0
 8007f52:	3568      	adds	r5, #104	; 0x68
 8007f54:	e7e9      	b.n	8007f2a <_fwalk_reent+0x12>

08007f56 <__retarget_lock_init_recursive>:
 8007f56:	4770      	bx	lr

08007f58 <__retarget_lock_acquire_recursive>:
 8007f58:	4770      	bx	lr

08007f5a <__retarget_lock_release_recursive>:
 8007f5a:	4770      	bx	lr

08007f5c <__malloc_lock>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	; (8007f64 <__malloc_lock+0x8>)
 8007f5e:	f7ff bffb 	b.w	8007f58 <__retarget_lock_acquire_recursive>
 8007f62:	bf00      	nop
 8007f64:	20000920 	.word	0x20000920

08007f68 <__malloc_unlock>:
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__malloc_unlock+0x8>)
 8007f6a:	f7ff bff6 	b.w	8007f5a <__retarget_lock_release_recursive>
 8007f6e:	bf00      	nop
 8007f70:	20000920 	.word	0x20000920

08007f74 <__sfputc_r>:
 8007f74:	6893      	ldr	r3, [r2, #8]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	b410      	push	{r4}
 8007f7c:	6093      	str	r3, [r2, #8]
 8007f7e:	da08      	bge.n	8007f92 <__sfputc_r+0x1e>
 8007f80:	6994      	ldr	r4, [r2, #24]
 8007f82:	42a3      	cmp	r3, r4
 8007f84:	db01      	blt.n	8007f8a <__sfputc_r+0x16>
 8007f86:	290a      	cmp	r1, #10
 8007f88:	d103      	bne.n	8007f92 <__sfputc_r+0x1e>
 8007f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f8e:	f000 bb23 	b.w	80085d8 <__swbuf_r>
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	1c58      	adds	r0, r3, #1
 8007f96:	6010      	str	r0, [r2, #0]
 8007f98:	7019      	strb	r1, [r3, #0]
 8007f9a:	4608      	mov	r0, r1
 8007f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <__sfputs_r>:
 8007fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	460f      	mov	r7, r1
 8007fa8:	4614      	mov	r4, r2
 8007faa:	18d5      	adds	r5, r2, r3
 8007fac:	42ac      	cmp	r4, r5
 8007fae:	d101      	bne.n	8007fb4 <__sfputs_r+0x12>
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	e007      	b.n	8007fc4 <__sfputs_r+0x22>
 8007fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb8:	463a      	mov	r2, r7
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f7ff ffda 	bl	8007f74 <__sfputc_r>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d1f3      	bne.n	8007fac <__sfputs_r+0xa>
 8007fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fc8 <_vfiprintf_r>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	460d      	mov	r5, r1
 8007fce:	b09d      	sub	sp, #116	; 0x74
 8007fd0:	4614      	mov	r4, r2
 8007fd2:	4698      	mov	r8, r3
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	b118      	cbz	r0, 8007fe0 <_vfiprintf_r+0x18>
 8007fd8:	6983      	ldr	r3, [r0, #24]
 8007fda:	b90b      	cbnz	r3, 8007fe0 <_vfiprintf_r+0x18>
 8007fdc:	f7ff ff1e 	bl	8007e1c <__sinit>
 8007fe0:	4b89      	ldr	r3, [pc, #548]	; (8008208 <_vfiprintf_r+0x240>)
 8007fe2:	429d      	cmp	r5, r3
 8007fe4:	d11b      	bne.n	800801e <_vfiprintf_r+0x56>
 8007fe6:	6875      	ldr	r5, [r6, #4]
 8007fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fea:	07d9      	lsls	r1, r3, #31
 8007fec:	d405      	bmi.n	8007ffa <_vfiprintf_r+0x32>
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	059a      	lsls	r2, r3, #22
 8007ff2:	d402      	bmi.n	8007ffa <_vfiprintf_r+0x32>
 8007ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ff6:	f7ff ffaf 	bl	8007f58 <__retarget_lock_acquire_recursive>
 8007ffa:	89ab      	ldrh	r3, [r5, #12]
 8007ffc:	071b      	lsls	r3, r3, #28
 8007ffe:	d501      	bpl.n	8008004 <_vfiprintf_r+0x3c>
 8008000:	692b      	ldr	r3, [r5, #16]
 8008002:	b9eb      	cbnz	r3, 8008040 <_vfiprintf_r+0x78>
 8008004:	4629      	mov	r1, r5
 8008006:	4630      	mov	r0, r6
 8008008:	f000 fb4a 	bl	80086a0 <__swsetup_r>
 800800c:	b1c0      	cbz	r0, 8008040 <_vfiprintf_r+0x78>
 800800e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008010:	07dc      	lsls	r4, r3, #31
 8008012:	d50e      	bpl.n	8008032 <_vfiprintf_r+0x6a>
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	b01d      	add	sp, #116	; 0x74
 800801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801e:	4b7b      	ldr	r3, [pc, #492]	; (800820c <_vfiprintf_r+0x244>)
 8008020:	429d      	cmp	r5, r3
 8008022:	d101      	bne.n	8008028 <_vfiprintf_r+0x60>
 8008024:	68b5      	ldr	r5, [r6, #8]
 8008026:	e7df      	b.n	8007fe8 <_vfiprintf_r+0x20>
 8008028:	4b79      	ldr	r3, [pc, #484]	; (8008210 <_vfiprintf_r+0x248>)
 800802a:	429d      	cmp	r5, r3
 800802c:	bf08      	it	eq
 800802e:	68f5      	ldreq	r5, [r6, #12]
 8008030:	e7da      	b.n	8007fe8 <_vfiprintf_r+0x20>
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	0598      	lsls	r0, r3, #22
 8008036:	d4ed      	bmi.n	8008014 <_vfiprintf_r+0x4c>
 8008038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803a:	f7ff ff8e 	bl	8007f5a <__retarget_lock_release_recursive>
 800803e:	e7e9      	b.n	8008014 <_vfiprintf_r+0x4c>
 8008040:	2300      	movs	r3, #0
 8008042:	9309      	str	r3, [sp, #36]	; 0x24
 8008044:	2320      	movs	r3, #32
 8008046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800804a:	f8cd 800c 	str.w	r8, [sp, #12]
 800804e:	2330      	movs	r3, #48	; 0x30
 8008050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008214 <_vfiprintf_r+0x24c>
 8008054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008058:	f04f 0901 	mov.w	r9, #1
 800805c:	4623      	mov	r3, r4
 800805e:	469a      	mov	sl, r3
 8008060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008064:	b10a      	cbz	r2, 800806a <_vfiprintf_r+0xa2>
 8008066:	2a25      	cmp	r2, #37	; 0x25
 8008068:	d1f9      	bne.n	800805e <_vfiprintf_r+0x96>
 800806a:	ebba 0b04 	subs.w	fp, sl, r4
 800806e:	d00b      	beq.n	8008088 <_vfiprintf_r+0xc0>
 8008070:	465b      	mov	r3, fp
 8008072:	4622      	mov	r2, r4
 8008074:	4629      	mov	r1, r5
 8008076:	4630      	mov	r0, r6
 8008078:	f7ff ff93 	bl	8007fa2 <__sfputs_r>
 800807c:	3001      	adds	r0, #1
 800807e:	f000 80aa 	beq.w	80081d6 <_vfiprintf_r+0x20e>
 8008082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008084:	445a      	add	r2, fp
 8008086:	9209      	str	r2, [sp, #36]	; 0x24
 8008088:	f89a 3000 	ldrb.w	r3, [sl]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 80a2 	beq.w	80081d6 <_vfiprintf_r+0x20e>
 8008092:	2300      	movs	r3, #0
 8008094:	f04f 32ff 	mov.w	r2, #4294967295
 8008098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800809c:	f10a 0a01 	add.w	sl, sl, #1
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	9307      	str	r3, [sp, #28]
 80080a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080a8:	931a      	str	r3, [sp, #104]	; 0x68
 80080aa:	4654      	mov	r4, sl
 80080ac:	2205      	movs	r2, #5
 80080ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b2:	4858      	ldr	r0, [pc, #352]	; (8008214 <_vfiprintf_r+0x24c>)
 80080b4:	f7f8 f88c 	bl	80001d0 <memchr>
 80080b8:	9a04      	ldr	r2, [sp, #16]
 80080ba:	b9d8      	cbnz	r0, 80080f4 <_vfiprintf_r+0x12c>
 80080bc:	06d1      	lsls	r1, r2, #27
 80080be:	bf44      	itt	mi
 80080c0:	2320      	movmi	r3, #32
 80080c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080c6:	0713      	lsls	r3, r2, #28
 80080c8:	bf44      	itt	mi
 80080ca:	232b      	movmi	r3, #43	; 0x2b
 80080cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d0:	f89a 3000 	ldrb.w	r3, [sl]
 80080d4:	2b2a      	cmp	r3, #42	; 0x2a
 80080d6:	d015      	beq.n	8008104 <_vfiprintf_r+0x13c>
 80080d8:	9a07      	ldr	r2, [sp, #28]
 80080da:	4654      	mov	r4, sl
 80080dc:	2000      	movs	r0, #0
 80080de:	f04f 0c0a 	mov.w	ip, #10
 80080e2:	4621      	mov	r1, r4
 80080e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e8:	3b30      	subs	r3, #48	; 0x30
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d94e      	bls.n	800818c <_vfiprintf_r+0x1c4>
 80080ee:	b1b0      	cbz	r0, 800811e <_vfiprintf_r+0x156>
 80080f0:	9207      	str	r2, [sp, #28]
 80080f2:	e014      	b.n	800811e <_vfiprintf_r+0x156>
 80080f4:	eba0 0308 	sub.w	r3, r0, r8
 80080f8:	fa09 f303 	lsl.w	r3, r9, r3
 80080fc:	4313      	orrs	r3, r2
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	46a2      	mov	sl, r4
 8008102:	e7d2      	b.n	80080aa <_vfiprintf_r+0xe2>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	1d19      	adds	r1, r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	9103      	str	r1, [sp, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	bfbb      	ittet	lt
 8008110:	425b      	neglt	r3, r3
 8008112:	f042 0202 	orrlt.w	r2, r2, #2
 8008116:	9307      	strge	r3, [sp, #28]
 8008118:	9307      	strlt	r3, [sp, #28]
 800811a:	bfb8      	it	lt
 800811c:	9204      	strlt	r2, [sp, #16]
 800811e:	7823      	ldrb	r3, [r4, #0]
 8008120:	2b2e      	cmp	r3, #46	; 0x2e
 8008122:	d10c      	bne.n	800813e <_vfiprintf_r+0x176>
 8008124:	7863      	ldrb	r3, [r4, #1]
 8008126:	2b2a      	cmp	r3, #42	; 0x2a
 8008128:	d135      	bne.n	8008196 <_vfiprintf_r+0x1ce>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	1d1a      	adds	r2, r3, #4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	9203      	str	r2, [sp, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	bfb8      	it	lt
 8008136:	f04f 33ff 	movlt.w	r3, #4294967295
 800813a:	3402      	adds	r4, #2
 800813c:	9305      	str	r3, [sp, #20]
 800813e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008224 <_vfiprintf_r+0x25c>
 8008142:	7821      	ldrb	r1, [r4, #0]
 8008144:	2203      	movs	r2, #3
 8008146:	4650      	mov	r0, sl
 8008148:	f7f8 f842 	bl	80001d0 <memchr>
 800814c:	b140      	cbz	r0, 8008160 <_vfiprintf_r+0x198>
 800814e:	2340      	movs	r3, #64	; 0x40
 8008150:	eba0 000a 	sub.w	r0, r0, sl
 8008154:	fa03 f000 	lsl.w	r0, r3, r0
 8008158:	9b04      	ldr	r3, [sp, #16]
 800815a:	4303      	orrs	r3, r0
 800815c:	3401      	adds	r4, #1
 800815e:	9304      	str	r3, [sp, #16]
 8008160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008164:	482c      	ldr	r0, [pc, #176]	; (8008218 <_vfiprintf_r+0x250>)
 8008166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800816a:	2206      	movs	r2, #6
 800816c:	f7f8 f830 	bl	80001d0 <memchr>
 8008170:	2800      	cmp	r0, #0
 8008172:	d03f      	beq.n	80081f4 <_vfiprintf_r+0x22c>
 8008174:	4b29      	ldr	r3, [pc, #164]	; (800821c <_vfiprintf_r+0x254>)
 8008176:	bb1b      	cbnz	r3, 80081c0 <_vfiprintf_r+0x1f8>
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	3307      	adds	r3, #7
 800817c:	f023 0307 	bic.w	r3, r3, #7
 8008180:	3308      	adds	r3, #8
 8008182:	9303      	str	r3, [sp, #12]
 8008184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008186:	443b      	add	r3, r7
 8008188:	9309      	str	r3, [sp, #36]	; 0x24
 800818a:	e767      	b.n	800805c <_vfiprintf_r+0x94>
 800818c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008190:	460c      	mov	r4, r1
 8008192:	2001      	movs	r0, #1
 8008194:	e7a5      	b.n	80080e2 <_vfiprintf_r+0x11a>
 8008196:	2300      	movs	r3, #0
 8008198:	3401      	adds	r4, #1
 800819a:	9305      	str	r3, [sp, #20]
 800819c:	4619      	mov	r1, r3
 800819e:	f04f 0c0a 	mov.w	ip, #10
 80081a2:	4620      	mov	r0, r4
 80081a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a8:	3a30      	subs	r2, #48	; 0x30
 80081aa:	2a09      	cmp	r2, #9
 80081ac:	d903      	bls.n	80081b6 <_vfiprintf_r+0x1ee>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0c5      	beq.n	800813e <_vfiprintf_r+0x176>
 80081b2:	9105      	str	r1, [sp, #20]
 80081b4:	e7c3      	b.n	800813e <_vfiprintf_r+0x176>
 80081b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ba:	4604      	mov	r4, r0
 80081bc:	2301      	movs	r3, #1
 80081be:	e7f0      	b.n	80081a2 <_vfiprintf_r+0x1da>
 80081c0:	ab03      	add	r3, sp, #12
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	462a      	mov	r2, r5
 80081c6:	4b16      	ldr	r3, [pc, #88]	; (8008220 <_vfiprintf_r+0x258>)
 80081c8:	a904      	add	r1, sp, #16
 80081ca:	4630      	mov	r0, r6
 80081cc:	f3af 8000 	nop.w
 80081d0:	4607      	mov	r7, r0
 80081d2:	1c78      	adds	r0, r7, #1
 80081d4:	d1d6      	bne.n	8008184 <_vfiprintf_r+0x1bc>
 80081d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081d8:	07d9      	lsls	r1, r3, #31
 80081da:	d405      	bmi.n	80081e8 <_vfiprintf_r+0x220>
 80081dc:	89ab      	ldrh	r3, [r5, #12]
 80081de:	059a      	lsls	r2, r3, #22
 80081e0:	d402      	bmi.n	80081e8 <_vfiprintf_r+0x220>
 80081e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e4:	f7ff feb9 	bl	8007f5a <__retarget_lock_release_recursive>
 80081e8:	89ab      	ldrh	r3, [r5, #12]
 80081ea:	065b      	lsls	r3, r3, #25
 80081ec:	f53f af12 	bmi.w	8008014 <_vfiprintf_r+0x4c>
 80081f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081f2:	e711      	b.n	8008018 <_vfiprintf_r+0x50>
 80081f4:	ab03      	add	r3, sp, #12
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	462a      	mov	r2, r5
 80081fa:	4b09      	ldr	r3, [pc, #36]	; (8008220 <_vfiprintf_r+0x258>)
 80081fc:	a904      	add	r1, sp, #16
 80081fe:	4630      	mov	r0, r6
 8008200:	f000 f880 	bl	8008304 <_printf_i>
 8008204:	e7e4      	b.n	80081d0 <_vfiprintf_r+0x208>
 8008206:	bf00      	nop
 8008208:	08008adc 	.word	0x08008adc
 800820c:	08008afc 	.word	0x08008afc
 8008210:	08008abc 	.word	0x08008abc
 8008214:	08008b1c 	.word	0x08008b1c
 8008218:	08008b26 	.word	0x08008b26
 800821c:	00000000 	.word	0x00000000
 8008220:	08007fa3 	.word	0x08007fa3
 8008224:	08008b22 	.word	0x08008b22

08008228 <_printf_common>:
 8008228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	4616      	mov	r6, r2
 800822e:	4699      	mov	r9, r3
 8008230:	688a      	ldr	r2, [r1, #8]
 8008232:	690b      	ldr	r3, [r1, #16]
 8008234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008238:	4293      	cmp	r3, r2
 800823a:	bfb8      	it	lt
 800823c:	4613      	movlt	r3, r2
 800823e:	6033      	str	r3, [r6, #0]
 8008240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008244:	4607      	mov	r7, r0
 8008246:	460c      	mov	r4, r1
 8008248:	b10a      	cbz	r2, 800824e <_printf_common+0x26>
 800824a:	3301      	adds	r3, #1
 800824c:	6033      	str	r3, [r6, #0]
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	0699      	lsls	r1, r3, #26
 8008252:	bf42      	ittt	mi
 8008254:	6833      	ldrmi	r3, [r6, #0]
 8008256:	3302      	addmi	r3, #2
 8008258:	6033      	strmi	r3, [r6, #0]
 800825a:	6825      	ldr	r5, [r4, #0]
 800825c:	f015 0506 	ands.w	r5, r5, #6
 8008260:	d106      	bne.n	8008270 <_printf_common+0x48>
 8008262:	f104 0a19 	add.w	sl, r4, #25
 8008266:	68e3      	ldr	r3, [r4, #12]
 8008268:	6832      	ldr	r2, [r6, #0]
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	42ab      	cmp	r3, r5
 800826e:	dc26      	bgt.n	80082be <_printf_common+0x96>
 8008270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008274:	1e13      	subs	r3, r2, #0
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	bf18      	it	ne
 800827a:	2301      	movne	r3, #1
 800827c:	0692      	lsls	r2, r2, #26
 800827e:	d42b      	bmi.n	80082d8 <_printf_common+0xb0>
 8008280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008284:	4649      	mov	r1, r9
 8008286:	4638      	mov	r0, r7
 8008288:	47c0      	blx	r8
 800828a:	3001      	adds	r0, #1
 800828c:	d01e      	beq.n	80082cc <_printf_common+0xa4>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	68e5      	ldr	r5, [r4, #12]
 8008292:	6832      	ldr	r2, [r6, #0]
 8008294:	f003 0306 	and.w	r3, r3, #6
 8008298:	2b04      	cmp	r3, #4
 800829a:	bf08      	it	eq
 800829c:	1aad      	subeq	r5, r5, r2
 800829e:	68a3      	ldr	r3, [r4, #8]
 80082a0:	6922      	ldr	r2, [r4, #16]
 80082a2:	bf0c      	ite	eq
 80082a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082a8:	2500      	movne	r5, #0
 80082aa:	4293      	cmp	r3, r2
 80082ac:	bfc4      	itt	gt
 80082ae:	1a9b      	subgt	r3, r3, r2
 80082b0:	18ed      	addgt	r5, r5, r3
 80082b2:	2600      	movs	r6, #0
 80082b4:	341a      	adds	r4, #26
 80082b6:	42b5      	cmp	r5, r6
 80082b8:	d11a      	bne.n	80082f0 <_printf_common+0xc8>
 80082ba:	2000      	movs	r0, #0
 80082bc:	e008      	b.n	80082d0 <_printf_common+0xa8>
 80082be:	2301      	movs	r3, #1
 80082c0:	4652      	mov	r2, sl
 80082c2:	4649      	mov	r1, r9
 80082c4:	4638      	mov	r0, r7
 80082c6:	47c0      	blx	r8
 80082c8:	3001      	adds	r0, #1
 80082ca:	d103      	bne.n	80082d4 <_printf_common+0xac>
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d4:	3501      	adds	r5, #1
 80082d6:	e7c6      	b.n	8008266 <_printf_common+0x3e>
 80082d8:	18e1      	adds	r1, r4, r3
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	2030      	movs	r0, #48	; 0x30
 80082de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082e2:	4422      	add	r2, r4
 80082e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082ec:	3302      	adds	r3, #2
 80082ee:	e7c7      	b.n	8008280 <_printf_common+0x58>
 80082f0:	2301      	movs	r3, #1
 80082f2:	4622      	mov	r2, r4
 80082f4:	4649      	mov	r1, r9
 80082f6:	4638      	mov	r0, r7
 80082f8:	47c0      	blx	r8
 80082fa:	3001      	adds	r0, #1
 80082fc:	d0e6      	beq.n	80082cc <_printf_common+0xa4>
 80082fe:	3601      	adds	r6, #1
 8008300:	e7d9      	b.n	80082b6 <_printf_common+0x8e>
	...

08008304 <_printf_i>:
 8008304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	7e0f      	ldrb	r7, [r1, #24]
 800830a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800830c:	2f78      	cmp	r7, #120	; 0x78
 800830e:	4691      	mov	r9, r2
 8008310:	4680      	mov	r8, r0
 8008312:	460c      	mov	r4, r1
 8008314:	469a      	mov	sl, r3
 8008316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800831a:	d807      	bhi.n	800832c <_printf_i+0x28>
 800831c:	2f62      	cmp	r7, #98	; 0x62
 800831e:	d80a      	bhi.n	8008336 <_printf_i+0x32>
 8008320:	2f00      	cmp	r7, #0
 8008322:	f000 80d8 	beq.w	80084d6 <_printf_i+0x1d2>
 8008326:	2f58      	cmp	r7, #88	; 0x58
 8008328:	f000 80a3 	beq.w	8008472 <_printf_i+0x16e>
 800832c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008334:	e03a      	b.n	80083ac <_printf_i+0xa8>
 8008336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800833a:	2b15      	cmp	r3, #21
 800833c:	d8f6      	bhi.n	800832c <_printf_i+0x28>
 800833e:	a101      	add	r1, pc, #4	; (adr r1, 8008344 <_printf_i+0x40>)
 8008340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008344:	0800839d 	.word	0x0800839d
 8008348:	080083b1 	.word	0x080083b1
 800834c:	0800832d 	.word	0x0800832d
 8008350:	0800832d 	.word	0x0800832d
 8008354:	0800832d 	.word	0x0800832d
 8008358:	0800832d 	.word	0x0800832d
 800835c:	080083b1 	.word	0x080083b1
 8008360:	0800832d 	.word	0x0800832d
 8008364:	0800832d 	.word	0x0800832d
 8008368:	0800832d 	.word	0x0800832d
 800836c:	0800832d 	.word	0x0800832d
 8008370:	080084bd 	.word	0x080084bd
 8008374:	080083e1 	.word	0x080083e1
 8008378:	0800849f 	.word	0x0800849f
 800837c:	0800832d 	.word	0x0800832d
 8008380:	0800832d 	.word	0x0800832d
 8008384:	080084df 	.word	0x080084df
 8008388:	0800832d 	.word	0x0800832d
 800838c:	080083e1 	.word	0x080083e1
 8008390:	0800832d 	.word	0x0800832d
 8008394:	0800832d 	.word	0x0800832d
 8008398:	080084a7 	.word	0x080084a7
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	1d1a      	adds	r2, r3, #4
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	602a      	str	r2, [r5, #0]
 80083a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083ac:	2301      	movs	r3, #1
 80083ae:	e0a3      	b.n	80084f8 <_printf_i+0x1f4>
 80083b0:	6820      	ldr	r0, [r4, #0]
 80083b2:	6829      	ldr	r1, [r5, #0]
 80083b4:	0606      	lsls	r6, r0, #24
 80083b6:	f101 0304 	add.w	r3, r1, #4
 80083ba:	d50a      	bpl.n	80083d2 <_printf_i+0xce>
 80083bc:	680e      	ldr	r6, [r1, #0]
 80083be:	602b      	str	r3, [r5, #0]
 80083c0:	2e00      	cmp	r6, #0
 80083c2:	da03      	bge.n	80083cc <_printf_i+0xc8>
 80083c4:	232d      	movs	r3, #45	; 0x2d
 80083c6:	4276      	negs	r6, r6
 80083c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083cc:	485e      	ldr	r0, [pc, #376]	; (8008548 <_printf_i+0x244>)
 80083ce:	230a      	movs	r3, #10
 80083d0:	e019      	b.n	8008406 <_printf_i+0x102>
 80083d2:	680e      	ldr	r6, [r1, #0]
 80083d4:	602b      	str	r3, [r5, #0]
 80083d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083da:	bf18      	it	ne
 80083dc:	b236      	sxthne	r6, r6
 80083de:	e7ef      	b.n	80083c0 <_printf_i+0xbc>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	6820      	ldr	r0, [r4, #0]
 80083e4:	1d19      	adds	r1, r3, #4
 80083e6:	6029      	str	r1, [r5, #0]
 80083e8:	0601      	lsls	r1, r0, #24
 80083ea:	d501      	bpl.n	80083f0 <_printf_i+0xec>
 80083ec:	681e      	ldr	r6, [r3, #0]
 80083ee:	e002      	b.n	80083f6 <_printf_i+0xf2>
 80083f0:	0646      	lsls	r6, r0, #25
 80083f2:	d5fb      	bpl.n	80083ec <_printf_i+0xe8>
 80083f4:	881e      	ldrh	r6, [r3, #0]
 80083f6:	4854      	ldr	r0, [pc, #336]	; (8008548 <_printf_i+0x244>)
 80083f8:	2f6f      	cmp	r7, #111	; 0x6f
 80083fa:	bf0c      	ite	eq
 80083fc:	2308      	moveq	r3, #8
 80083fe:	230a      	movne	r3, #10
 8008400:	2100      	movs	r1, #0
 8008402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008406:	6865      	ldr	r5, [r4, #4]
 8008408:	60a5      	str	r5, [r4, #8]
 800840a:	2d00      	cmp	r5, #0
 800840c:	bfa2      	ittt	ge
 800840e:	6821      	ldrge	r1, [r4, #0]
 8008410:	f021 0104 	bicge.w	r1, r1, #4
 8008414:	6021      	strge	r1, [r4, #0]
 8008416:	b90e      	cbnz	r6, 800841c <_printf_i+0x118>
 8008418:	2d00      	cmp	r5, #0
 800841a:	d04d      	beq.n	80084b8 <_printf_i+0x1b4>
 800841c:	4615      	mov	r5, r2
 800841e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008422:	fb03 6711 	mls	r7, r3, r1, r6
 8008426:	5dc7      	ldrb	r7, [r0, r7]
 8008428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800842c:	4637      	mov	r7, r6
 800842e:	42bb      	cmp	r3, r7
 8008430:	460e      	mov	r6, r1
 8008432:	d9f4      	bls.n	800841e <_printf_i+0x11a>
 8008434:	2b08      	cmp	r3, #8
 8008436:	d10b      	bne.n	8008450 <_printf_i+0x14c>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	07de      	lsls	r6, r3, #31
 800843c:	d508      	bpl.n	8008450 <_printf_i+0x14c>
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	6861      	ldr	r1, [r4, #4]
 8008442:	4299      	cmp	r1, r3
 8008444:	bfde      	ittt	le
 8008446:	2330      	movle	r3, #48	; 0x30
 8008448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800844c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008450:	1b52      	subs	r2, r2, r5
 8008452:	6122      	str	r2, [r4, #16]
 8008454:	f8cd a000 	str.w	sl, [sp]
 8008458:	464b      	mov	r3, r9
 800845a:	aa03      	add	r2, sp, #12
 800845c:	4621      	mov	r1, r4
 800845e:	4640      	mov	r0, r8
 8008460:	f7ff fee2 	bl	8008228 <_printf_common>
 8008464:	3001      	adds	r0, #1
 8008466:	d14c      	bne.n	8008502 <_printf_i+0x1fe>
 8008468:	f04f 30ff 	mov.w	r0, #4294967295
 800846c:	b004      	add	sp, #16
 800846e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008472:	4835      	ldr	r0, [pc, #212]	; (8008548 <_printf_i+0x244>)
 8008474:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008478:	6829      	ldr	r1, [r5, #0]
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008480:	6029      	str	r1, [r5, #0]
 8008482:	061d      	lsls	r5, r3, #24
 8008484:	d514      	bpl.n	80084b0 <_printf_i+0x1ac>
 8008486:	07df      	lsls	r7, r3, #31
 8008488:	bf44      	itt	mi
 800848a:	f043 0320 	orrmi.w	r3, r3, #32
 800848e:	6023      	strmi	r3, [r4, #0]
 8008490:	b91e      	cbnz	r6, 800849a <_printf_i+0x196>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	f023 0320 	bic.w	r3, r3, #32
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	2310      	movs	r3, #16
 800849c:	e7b0      	b.n	8008400 <_printf_i+0xfc>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	f043 0320 	orr.w	r3, r3, #32
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	2378      	movs	r3, #120	; 0x78
 80084a8:	4828      	ldr	r0, [pc, #160]	; (800854c <_printf_i+0x248>)
 80084aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084ae:	e7e3      	b.n	8008478 <_printf_i+0x174>
 80084b0:	0659      	lsls	r1, r3, #25
 80084b2:	bf48      	it	mi
 80084b4:	b2b6      	uxthmi	r6, r6
 80084b6:	e7e6      	b.n	8008486 <_printf_i+0x182>
 80084b8:	4615      	mov	r5, r2
 80084ba:	e7bb      	b.n	8008434 <_printf_i+0x130>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	6826      	ldr	r6, [r4, #0]
 80084c0:	6961      	ldr	r1, [r4, #20]
 80084c2:	1d18      	adds	r0, r3, #4
 80084c4:	6028      	str	r0, [r5, #0]
 80084c6:	0635      	lsls	r5, r6, #24
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	d501      	bpl.n	80084d0 <_printf_i+0x1cc>
 80084cc:	6019      	str	r1, [r3, #0]
 80084ce:	e002      	b.n	80084d6 <_printf_i+0x1d2>
 80084d0:	0670      	lsls	r0, r6, #25
 80084d2:	d5fb      	bpl.n	80084cc <_printf_i+0x1c8>
 80084d4:	8019      	strh	r1, [r3, #0]
 80084d6:	2300      	movs	r3, #0
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	4615      	mov	r5, r2
 80084dc:	e7ba      	b.n	8008454 <_printf_i+0x150>
 80084de:	682b      	ldr	r3, [r5, #0]
 80084e0:	1d1a      	adds	r2, r3, #4
 80084e2:	602a      	str	r2, [r5, #0]
 80084e4:	681d      	ldr	r5, [r3, #0]
 80084e6:	6862      	ldr	r2, [r4, #4]
 80084e8:	2100      	movs	r1, #0
 80084ea:	4628      	mov	r0, r5
 80084ec:	f7f7 fe70 	bl	80001d0 <memchr>
 80084f0:	b108      	cbz	r0, 80084f6 <_printf_i+0x1f2>
 80084f2:	1b40      	subs	r0, r0, r5
 80084f4:	6060      	str	r0, [r4, #4]
 80084f6:	6863      	ldr	r3, [r4, #4]
 80084f8:	6123      	str	r3, [r4, #16]
 80084fa:	2300      	movs	r3, #0
 80084fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008500:	e7a8      	b.n	8008454 <_printf_i+0x150>
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	462a      	mov	r2, r5
 8008506:	4649      	mov	r1, r9
 8008508:	4640      	mov	r0, r8
 800850a:	47d0      	blx	sl
 800850c:	3001      	adds	r0, #1
 800850e:	d0ab      	beq.n	8008468 <_printf_i+0x164>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	079b      	lsls	r3, r3, #30
 8008514:	d413      	bmi.n	800853e <_printf_i+0x23a>
 8008516:	68e0      	ldr	r0, [r4, #12]
 8008518:	9b03      	ldr	r3, [sp, #12]
 800851a:	4298      	cmp	r0, r3
 800851c:	bfb8      	it	lt
 800851e:	4618      	movlt	r0, r3
 8008520:	e7a4      	b.n	800846c <_printf_i+0x168>
 8008522:	2301      	movs	r3, #1
 8008524:	4632      	mov	r2, r6
 8008526:	4649      	mov	r1, r9
 8008528:	4640      	mov	r0, r8
 800852a:	47d0      	blx	sl
 800852c:	3001      	adds	r0, #1
 800852e:	d09b      	beq.n	8008468 <_printf_i+0x164>
 8008530:	3501      	adds	r5, #1
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	9903      	ldr	r1, [sp, #12]
 8008536:	1a5b      	subs	r3, r3, r1
 8008538:	42ab      	cmp	r3, r5
 800853a:	dcf2      	bgt.n	8008522 <_printf_i+0x21e>
 800853c:	e7eb      	b.n	8008516 <_printf_i+0x212>
 800853e:	2500      	movs	r5, #0
 8008540:	f104 0619 	add.w	r6, r4, #25
 8008544:	e7f5      	b.n	8008532 <_printf_i+0x22e>
 8008546:	bf00      	nop
 8008548:	08008b2d 	.word	0x08008b2d
 800854c:	08008b3e 	.word	0x08008b3e

08008550 <__sread>:
 8008550:	b510      	push	{r4, lr}
 8008552:	460c      	mov	r4, r1
 8008554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008558:	f000 fa5a 	bl	8008a10 <_read_r>
 800855c:	2800      	cmp	r0, #0
 800855e:	bfab      	itete	ge
 8008560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008562:	89a3      	ldrhlt	r3, [r4, #12]
 8008564:	181b      	addge	r3, r3, r0
 8008566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800856a:	bfac      	ite	ge
 800856c:	6563      	strge	r3, [r4, #84]	; 0x54
 800856e:	81a3      	strhlt	r3, [r4, #12]
 8008570:	bd10      	pop	{r4, pc}

08008572 <__swrite>:
 8008572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008576:	461f      	mov	r7, r3
 8008578:	898b      	ldrh	r3, [r1, #12]
 800857a:	05db      	lsls	r3, r3, #23
 800857c:	4605      	mov	r5, r0
 800857e:	460c      	mov	r4, r1
 8008580:	4616      	mov	r6, r2
 8008582:	d505      	bpl.n	8008590 <__swrite+0x1e>
 8008584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008588:	2302      	movs	r3, #2
 800858a:	2200      	movs	r2, #0
 800858c:	f000 f9c8 	bl	8008920 <_lseek_r>
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	4632      	mov	r2, r6
 800859e:	463b      	mov	r3, r7
 80085a0:	4628      	mov	r0, r5
 80085a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a6:	f000 b869 	b.w	800867c <_write_r>

080085aa <__sseek>:
 80085aa:	b510      	push	{r4, lr}
 80085ac:	460c      	mov	r4, r1
 80085ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b2:	f000 f9b5 	bl	8008920 <_lseek_r>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	bf15      	itete	ne
 80085bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80085be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085c6:	81a3      	strheq	r3, [r4, #12]
 80085c8:	bf18      	it	ne
 80085ca:	81a3      	strhne	r3, [r4, #12]
 80085cc:	bd10      	pop	{r4, pc}

080085ce <__sclose>:
 80085ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d2:	f000 b8d3 	b.w	800877c <_close_r>
	...

080085d8 <__swbuf_r>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	460e      	mov	r6, r1
 80085dc:	4614      	mov	r4, r2
 80085de:	4605      	mov	r5, r0
 80085e0:	b118      	cbz	r0, 80085ea <__swbuf_r+0x12>
 80085e2:	6983      	ldr	r3, [r0, #24]
 80085e4:	b90b      	cbnz	r3, 80085ea <__swbuf_r+0x12>
 80085e6:	f7ff fc19 	bl	8007e1c <__sinit>
 80085ea:	4b21      	ldr	r3, [pc, #132]	; (8008670 <__swbuf_r+0x98>)
 80085ec:	429c      	cmp	r4, r3
 80085ee:	d12b      	bne.n	8008648 <__swbuf_r+0x70>
 80085f0:	686c      	ldr	r4, [r5, #4]
 80085f2:	69a3      	ldr	r3, [r4, #24]
 80085f4:	60a3      	str	r3, [r4, #8]
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	071a      	lsls	r2, r3, #28
 80085fa:	d52f      	bpl.n	800865c <__swbuf_r+0x84>
 80085fc:	6923      	ldr	r3, [r4, #16]
 80085fe:	b36b      	cbz	r3, 800865c <__swbuf_r+0x84>
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	1ac0      	subs	r0, r0, r3
 8008606:	6963      	ldr	r3, [r4, #20]
 8008608:	b2f6      	uxtb	r6, r6
 800860a:	4283      	cmp	r3, r0
 800860c:	4637      	mov	r7, r6
 800860e:	dc04      	bgt.n	800861a <__swbuf_r+0x42>
 8008610:	4621      	mov	r1, r4
 8008612:	4628      	mov	r0, r5
 8008614:	f000 f948 	bl	80088a8 <_fflush_r>
 8008618:	bb30      	cbnz	r0, 8008668 <__swbuf_r+0x90>
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	3b01      	subs	r3, #1
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	6022      	str	r2, [r4, #0]
 8008626:	701e      	strb	r6, [r3, #0]
 8008628:	6963      	ldr	r3, [r4, #20]
 800862a:	3001      	adds	r0, #1
 800862c:	4283      	cmp	r3, r0
 800862e:	d004      	beq.n	800863a <__swbuf_r+0x62>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	07db      	lsls	r3, r3, #31
 8008634:	d506      	bpl.n	8008644 <__swbuf_r+0x6c>
 8008636:	2e0a      	cmp	r6, #10
 8008638:	d104      	bne.n	8008644 <__swbuf_r+0x6c>
 800863a:	4621      	mov	r1, r4
 800863c:	4628      	mov	r0, r5
 800863e:	f000 f933 	bl	80088a8 <_fflush_r>
 8008642:	b988      	cbnz	r0, 8008668 <__swbuf_r+0x90>
 8008644:	4638      	mov	r0, r7
 8008646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <__swbuf_r+0x9c>)
 800864a:	429c      	cmp	r4, r3
 800864c:	d101      	bne.n	8008652 <__swbuf_r+0x7a>
 800864e:	68ac      	ldr	r4, [r5, #8]
 8008650:	e7cf      	b.n	80085f2 <__swbuf_r+0x1a>
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <__swbuf_r+0xa0>)
 8008654:	429c      	cmp	r4, r3
 8008656:	bf08      	it	eq
 8008658:	68ec      	ldreq	r4, [r5, #12]
 800865a:	e7ca      	b.n	80085f2 <__swbuf_r+0x1a>
 800865c:	4621      	mov	r1, r4
 800865e:	4628      	mov	r0, r5
 8008660:	f000 f81e 	bl	80086a0 <__swsetup_r>
 8008664:	2800      	cmp	r0, #0
 8008666:	d0cb      	beq.n	8008600 <__swbuf_r+0x28>
 8008668:	f04f 37ff 	mov.w	r7, #4294967295
 800866c:	e7ea      	b.n	8008644 <__swbuf_r+0x6c>
 800866e:	bf00      	nop
 8008670:	08008adc 	.word	0x08008adc
 8008674:	08008afc 	.word	0x08008afc
 8008678:	08008abc 	.word	0x08008abc

0800867c <_write_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	; (800869c <_write_r+0x20>)
 8008680:	4604      	mov	r4, r0
 8008682:	4608      	mov	r0, r1
 8008684:	4611      	mov	r1, r2
 8008686:	2200      	movs	r2, #0
 8008688:	602a      	str	r2, [r5, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	f7f8 f90e 	bl	80008ac <_write>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_write_r+0x1e>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_write_r+0x1e>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20000924 	.word	0x20000924

080086a0 <__swsetup_r>:
 80086a0:	4b32      	ldr	r3, [pc, #200]	; (800876c <__swsetup_r+0xcc>)
 80086a2:	b570      	push	{r4, r5, r6, lr}
 80086a4:	681d      	ldr	r5, [r3, #0]
 80086a6:	4606      	mov	r6, r0
 80086a8:	460c      	mov	r4, r1
 80086aa:	b125      	cbz	r5, 80086b6 <__swsetup_r+0x16>
 80086ac:	69ab      	ldr	r3, [r5, #24]
 80086ae:	b913      	cbnz	r3, 80086b6 <__swsetup_r+0x16>
 80086b0:	4628      	mov	r0, r5
 80086b2:	f7ff fbb3 	bl	8007e1c <__sinit>
 80086b6:	4b2e      	ldr	r3, [pc, #184]	; (8008770 <__swsetup_r+0xd0>)
 80086b8:	429c      	cmp	r4, r3
 80086ba:	d10f      	bne.n	80086dc <__swsetup_r+0x3c>
 80086bc:	686c      	ldr	r4, [r5, #4]
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086c4:	0719      	lsls	r1, r3, #28
 80086c6:	d42c      	bmi.n	8008722 <__swsetup_r+0x82>
 80086c8:	06dd      	lsls	r5, r3, #27
 80086ca:	d411      	bmi.n	80086f0 <__swsetup_r+0x50>
 80086cc:	2309      	movs	r3, #9
 80086ce:	6033      	str	r3, [r6, #0]
 80086d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	f04f 30ff 	mov.w	r0, #4294967295
 80086da:	e03e      	b.n	800875a <__swsetup_r+0xba>
 80086dc:	4b25      	ldr	r3, [pc, #148]	; (8008774 <__swsetup_r+0xd4>)
 80086de:	429c      	cmp	r4, r3
 80086e0:	d101      	bne.n	80086e6 <__swsetup_r+0x46>
 80086e2:	68ac      	ldr	r4, [r5, #8]
 80086e4:	e7eb      	b.n	80086be <__swsetup_r+0x1e>
 80086e6:	4b24      	ldr	r3, [pc, #144]	; (8008778 <__swsetup_r+0xd8>)
 80086e8:	429c      	cmp	r4, r3
 80086ea:	bf08      	it	eq
 80086ec:	68ec      	ldreq	r4, [r5, #12]
 80086ee:	e7e6      	b.n	80086be <__swsetup_r+0x1e>
 80086f0:	0758      	lsls	r0, r3, #29
 80086f2:	d512      	bpl.n	800871a <__swsetup_r+0x7a>
 80086f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086f6:	b141      	cbz	r1, 800870a <__swsetup_r+0x6a>
 80086f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d002      	beq.n	8008706 <__swsetup_r+0x66>
 8008700:	4630      	mov	r0, r6
 8008702:	f7ff fa2b 	bl	8007b5c <_free_r>
 8008706:	2300      	movs	r3, #0
 8008708:	6363      	str	r3, [r4, #52]	; 0x34
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008710:	81a3      	strh	r3, [r4, #12]
 8008712:	2300      	movs	r3, #0
 8008714:	6063      	str	r3, [r4, #4]
 8008716:	6923      	ldr	r3, [r4, #16]
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	f043 0308 	orr.w	r3, r3, #8
 8008720:	81a3      	strh	r3, [r4, #12]
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	b94b      	cbnz	r3, 800873a <__swsetup_r+0x9a>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800872c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008730:	d003      	beq.n	800873a <__swsetup_r+0x9a>
 8008732:	4621      	mov	r1, r4
 8008734:	4630      	mov	r0, r6
 8008736:	f000 f92b 	bl	8008990 <__smakebuf_r>
 800873a:	89a0      	ldrh	r0, [r4, #12]
 800873c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008740:	f010 0301 	ands.w	r3, r0, #1
 8008744:	d00a      	beq.n	800875c <__swsetup_r+0xbc>
 8008746:	2300      	movs	r3, #0
 8008748:	60a3      	str	r3, [r4, #8]
 800874a:	6963      	ldr	r3, [r4, #20]
 800874c:	425b      	negs	r3, r3
 800874e:	61a3      	str	r3, [r4, #24]
 8008750:	6923      	ldr	r3, [r4, #16]
 8008752:	b943      	cbnz	r3, 8008766 <__swsetup_r+0xc6>
 8008754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008758:	d1ba      	bne.n	80086d0 <__swsetup_r+0x30>
 800875a:	bd70      	pop	{r4, r5, r6, pc}
 800875c:	0781      	lsls	r1, r0, #30
 800875e:	bf58      	it	pl
 8008760:	6963      	ldrpl	r3, [r4, #20]
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	e7f4      	b.n	8008750 <__swsetup_r+0xb0>
 8008766:	2000      	movs	r0, #0
 8008768:	e7f7      	b.n	800875a <__swsetup_r+0xba>
 800876a:	bf00      	nop
 800876c:	2000002c 	.word	0x2000002c
 8008770:	08008adc 	.word	0x08008adc
 8008774:	08008afc 	.word	0x08008afc
 8008778:	08008abc 	.word	0x08008abc

0800877c <_close_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	; (8008798 <_close_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7f8 fa9f 	bl	8000cca <_close>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_close_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_close_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000924 	.word	0x20000924

0800879c <__sflush_r>:
 800879c:	898a      	ldrh	r2, [r1, #12]
 800879e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a2:	4605      	mov	r5, r0
 80087a4:	0710      	lsls	r0, r2, #28
 80087a6:	460c      	mov	r4, r1
 80087a8:	d458      	bmi.n	800885c <__sflush_r+0xc0>
 80087aa:	684b      	ldr	r3, [r1, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dc05      	bgt.n	80087bc <__sflush_r+0x20>
 80087b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dc02      	bgt.n	80087bc <__sflush_r+0x20>
 80087b6:	2000      	movs	r0, #0
 80087b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d0f9      	beq.n	80087b6 <__sflush_r+0x1a>
 80087c2:	2300      	movs	r3, #0
 80087c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087c8:	682f      	ldr	r7, [r5, #0]
 80087ca:	602b      	str	r3, [r5, #0]
 80087cc:	d032      	beq.n	8008834 <__sflush_r+0x98>
 80087ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	075a      	lsls	r2, r3, #29
 80087d4:	d505      	bpl.n	80087e2 <__sflush_r+0x46>
 80087d6:	6863      	ldr	r3, [r4, #4]
 80087d8:	1ac0      	subs	r0, r0, r3
 80087da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087dc:	b10b      	cbz	r3, 80087e2 <__sflush_r+0x46>
 80087de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087e0:	1ac0      	subs	r0, r0, r3
 80087e2:	2300      	movs	r3, #0
 80087e4:	4602      	mov	r2, r0
 80087e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087e8:	6a21      	ldr	r1, [r4, #32]
 80087ea:	4628      	mov	r0, r5
 80087ec:	47b0      	blx	r6
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	d106      	bne.n	8008802 <__sflush_r+0x66>
 80087f4:	6829      	ldr	r1, [r5, #0]
 80087f6:	291d      	cmp	r1, #29
 80087f8:	d82c      	bhi.n	8008854 <__sflush_r+0xb8>
 80087fa:	4a2a      	ldr	r2, [pc, #168]	; (80088a4 <__sflush_r+0x108>)
 80087fc:	40ca      	lsrs	r2, r1
 80087fe:	07d6      	lsls	r6, r2, #31
 8008800:	d528      	bpl.n	8008854 <__sflush_r+0xb8>
 8008802:	2200      	movs	r2, #0
 8008804:	6062      	str	r2, [r4, #4]
 8008806:	04d9      	lsls	r1, r3, #19
 8008808:	6922      	ldr	r2, [r4, #16]
 800880a:	6022      	str	r2, [r4, #0]
 800880c:	d504      	bpl.n	8008818 <__sflush_r+0x7c>
 800880e:	1c42      	adds	r2, r0, #1
 8008810:	d101      	bne.n	8008816 <__sflush_r+0x7a>
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	b903      	cbnz	r3, 8008818 <__sflush_r+0x7c>
 8008816:	6560      	str	r0, [r4, #84]	; 0x54
 8008818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800881a:	602f      	str	r7, [r5, #0]
 800881c:	2900      	cmp	r1, #0
 800881e:	d0ca      	beq.n	80087b6 <__sflush_r+0x1a>
 8008820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008824:	4299      	cmp	r1, r3
 8008826:	d002      	beq.n	800882e <__sflush_r+0x92>
 8008828:	4628      	mov	r0, r5
 800882a:	f7ff f997 	bl	8007b5c <_free_r>
 800882e:	2000      	movs	r0, #0
 8008830:	6360      	str	r0, [r4, #52]	; 0x34
 8008832:	e7c1      	b.n	80087b8 <__sflush_r+0x1c>
 8008834:	6a21      	ldr	r1, [r4, #32]
 8008836:	2301      	movs	r3, #1
 8008838:	4628      	mov	r0, r5
 800883a:	47b0      	blx	r6
 800883c:	1c41      	adds	r1, r0, #1
 800883e:	d1c7      	bne.n	80087d0 <__sflush_r+0x34>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0c4      	beq.n	80087d0 <__sflush_r+0x34>
 8008846:	2b1d      	cmp	r3, #29
 8008848:	d001      	beq.n	800884e <__sflush_r+0xb2>
 800884a:	2b16      	cmp	r3, #22
 800884c:	d101      	bne.n	8008852 <__sflush_r+0xb6>
 800884e:	602f      	str	r7, [r5, #0]
 8008850:	e7b1      	b.n	80087b6 <__sflush_r+0x1a>
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	e7ad      	b.n	80087b8 <__sflush_r+0x1c>
 800885c:	690f      	ldr	r7, [r1, #16]
 800885e:	2f00      	cmp	r7, #0
 8008860:	d0a9      	beq.n	80087b6 <__sflush_r+0x1a>
 8008862:	0793      	lsls	r3, r2, #30
 8008864:	680e      	ldr	r6, [r1, #0]
 8008866:	bf08      	it	eq
 8008868:	694b      	ldreq	r3, [r1, #20]
 800886a:	600f      	str	r7, [r1, #0]
 800886c:	bf18      	it	ne
 800886e:	2300      	movne	r3, #0
 8008870:	eba6 0807 	sub.w	r8, r6, r7
 8008874:	608b      	str	r3, [r1, #8]
 8008876:	f1b8 0f00 	cmp.w	r8, #0
 800887a:	dd9c      	ble.n	80087b6 <__sflush_r+0x1a>
 800887c:	6a21      	ldr	r1, [r4, #32]
 800887e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008880:	4643      	mov	r3, r8
 8008882:	463a      	mov	r2, r7
 8008884:	4628      	mov	r0, r5
 8008886:	47b0      	blx	r6
 8008888:	2800      	cmp	r0, #0
 800888a:	dc06      	bgt.n	800889a <__sflush_r+0xfe>
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008892:	81a3      	strh	r3, [r4, #12]
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	e78e      	b.n	80087b8 <__sflush_r+0x1c>
 800889a:	4407      	add	r7, r0
 800889c:	eba8 0800 	sub.w	r8, r8, r0
 80088a0:	e7e9      	b.n	8008876 <__sflush_r+0xda>
 80088a2:	bf00      	nop
 80088a4:	20400001 	.word	0x20400001

080088a8 <_fflush_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	690b      	ldr	r3, [r1, #16]
 80088ac:	4605      	mov	r5, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	b913      	cbnz	r3, 80088b8 <_fflush_r+0x10>
 80088b2:	2500      	movs	r5, #0
 80088b4:	4628      	mov	r0, r5
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	b118      	cbz	r0, 80088c2 <_fflush_r+0x1a>
 80088ba:	6983      	ldr	r3, [r0, #24]
 80088bc:	b90b      	cbnz	r3, 80088c2 <_fflush_r+0x1a>
 80088be:	f7ff faad 	bl	8007e1c <__sinit>
 80088c2:	4b14      	ldr	r3, [pc, #80]	; (8008914 <_fflush_r+0x6c>)
 80088c4:	429c      	cmp	r4, r3
 80088c6:	d11b      	bne.n	8008900 <_fflush_r+0x58>
 80088c8:	686c      	ldr	r4, [r5, #4]
 80088ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0ef      	beq.n	80088b2 <_fflush_r+0xa>
 80088d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088d4:	07d0      	lsls	r0, r2, #31
 80088d6:	d404      	bmi.n	80088e2 <_fflush_r+0x3a>
 80088d8:	0599      	lsls	r1, r3, #22
 80088da:	d402      	bmi.n	80088e2 <_fflush_r+0x3a>
 80088dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088de:	f7ff fb3b 	bl	8007f58 <__retarget_lock_acquire_recursive>
 80088e2:	4628      	mov	r0, r5
 80088e4:	4621      	mov	r1, r4
 80088e6:	f7ff ff59 	bl	800879c <__sflush_r>
 80088ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ec:	07da      	lsls	r2, r3, #31
 80088ee:	4605      	mov	r5, r0
 80088f0:	d4e0      	bmi.n	80088b4 <_fflush_r+0xc>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	059b      	lsls	r3, r3, #22
 80088f6:	d4dd      	bmi.n	80088b4 <_fflush_r+0xc>
 80088f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fa:	f7ff fb2e 	bl	8007f5a <__retarget_lock_release_recursive>
 80088fe:	e7d9      	b.n	80088b4 <_fflush_r+0xc>
 8008900:	4b05      	ldr	r3, [pc, #20]	; (8008918 <_fflush_r+0x70>)
 8008902:	429c      	cmp	r4, r3
 8008904:	d101      	bne.n	800890a <_fflush_r+0x62>
 8008906:	68ac      	ldr	r4, [r5, #8]
 8008908:	e7df      	b.n	80088ca <_fflush_r+0x22>
 800890a:	4b04      	ldr	r3, [pc, #16]	; (800891c <_fflush_r+0x74>)
 800890c:	429c      	cmp	r4, r3
 800890e:	bf08      	it	eq
 8008910:	68ec      	ldreq	r4, [r5, #12]
 8008912:	e7da      	b.n	80088ca <_fflush_r+0x22>
 8008914:	08008adc 	.word	0x08008adc
 8008918:	08008afc 	.word	0x08008afc
 800891c:	08008abc 	.word	0x08008abc

08008920 <_lseek_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4d07      	ldr	r5, [pc, #28]	; (8008940 <_lseek_r+0x20>)
 8008924:	4604      	mov	r4, r0
 8008926:	4608      	mov	r0, r1
 8008928:	4611      	mov	r1, r2
 800892a:	2200      	movs	r2, #0
 800892c:	602a      	str	r2, [r5, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	f7f8 f9f2 	bl	8000d18 <_lseek>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_lseek_r+0x1e>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_lseek_r+0x1e>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	20000924 	.word	0x20000924

08008944 <__swhatbuf_r>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	460e      	mov	r6, r1
 8008948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894c:	2900      	cmp	r1, #0
 800894e:	b096      	sub	sp, #88	; 0x58
 8008950:	4614      	mov	r4, r2
 8008952:	461d      	mov	r5, r3
 8008954:	da08      	bge.n	8008968 <__swhatbuf_r+0x24>
 8008956:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	602a      	str	r2, [r5, #0]
 800895e:	061a      	lsls	r2, r3, #24
 8008960:	d410      	bmi.n	8008984 <__swhatbuf_r+0x40>
 8008962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008966:	e00e      	b.n	8008986 <__swhatbuf_r+0x42>
 8008968:	466a      	mov	r2, sp
 800896a:	f000 f863 	bl	8008a34 <_fstat_r>
 800896e:	2800      	cmp	r0, #0
 8008970:	dbf1      	blt.n	8008956 <__swhatbuf_r+0x12>
 8008972:	9a01      	ldr	r2, [sp, #4]
 8008974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800897c:	425a      	negs	r2, r3
 800897e:	415a      	adcs	r2, r3
 8008980:	602a      	str	r2, [r5, #0]
 8008982:	e7ee      	b.n	8008962 <__swhatbuf_r+0x1e>
 8008984:	2340      	movs	r3, #64	; 0x40
 8008986:	2000      	movs	r0, #0
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	b016      	add	sp, #88	; 0x58
 800898c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008990 <__smakebuf_r>:
 8008990:	898b      	ldrh	r3, [r1, #12]
 8008992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008994:	079d      	lsls	r5, r3, #30
 8008996:	4606      	mov	r6, r0
 8008998:	460c      	mov	r4, r1
 800899a:	d507      	bpl.n	80089ac <__smakebuf_r+0x1c>
 800899c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	6123      	str	r3, [r4, #16]
 80089a4:	2301      	movs	r3, #1
 80089a6:	6163      	str	r3, [r4, #20]
 80089a8:	b002      	add	sp, #8
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	ab01      	add	r3, sp, #4
 80089ae:	466a      	mov	r2, sp
 80089b0:	f7ff ffc8 	bl	8008944 <__swhatbuf_r>
 80089b4:	9900      	ldr	r1, [sp, #0]
 80089b6:	4605      	mov	r5, r0
 80089b8:	4630      	mov	r0, r6
 80089ba:	f7ff f93b 	bl	8007c34 <_malloc_r>
 80089be:	b948      	cbnz	r0, 80089d4 <__smakebuf_r+0x44>
 80089c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089c4:	059a      	lsls	r2, r3, #22
 80089c6:	d4ef      	bmi.n	80089a8 <__smakebuf_r+0x18>
 80089c8:	f023 0303 	bic.w	r3, r3, #3
 80089cc:	f043 0302 	orr.w	r3, r3, #2
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	e7e3      	b.n	800899c <__smakebuf_r+0xc>
 80089d4:	4b0d      	ldr	r3, [pc, #52]	; (8008a0c <__smakebuf_r+0x7c>)
 80089d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	6020      	str	r0, [r4, #0]
 80089dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	9b00      	ldr	r3, [sp, #0]
 80089e4:	6163      	str	r3, [r4, #20]
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	6120      	str	r0, [r4, #16]
 80089ea:	b15b      	cbz	r3, 8008a04 <__smakebuf_r+0x74>
 80089ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089f0:	4630      	mov	r0, r6
 80089f2:	f000 f831 	bl	8008a58 <_isatty_r>
 80089f6:	b128      	cbz	r0, 8008a04 <__smakebuf_r+0x74>
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	f023 0303 	bic.w	r3, r3, #3
 80089fe:	f043 0301 	orr.w	r3, r3, #1
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	89a0      	ldrh	r0, [r4, #12]
 8008a06:	4305      	orrs	r5, r0
 8008a08:	81a5      	strh	r5, [r4, #12]
 8008a0a:	e7cd      	b.n	80089a8 <__smakebuf_r+0x18>
 8008a0c:	08007db5 	.word	0x08007db5

08008a10 <_read_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d07      	ldr	r5, [pc, #28]	; (8008a30 <_read_r+0x20>)
 8008a14:	4604      	mov	r4, r0
 8008a16:	4608      	mov	r0, r1
 8008a18:	4611      	mov	r1, r2
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	602a      	str	r2, [r5, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f7f8 f936 	bl	8000c90 <_read>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d102      	bne.n	8008a2e <_read_r+0x1e>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	b103      	cbz	r3, 8008a2e <_read_r+0x1e>
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	20000924 	.word	0x20000924

08008a34 <_fstat_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	; (8008a54 <_fstat_r+0x20>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	f7f8 f94e 	bl	8000ce2 <_fstat>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d102      	bne.n	8008a50 <_fstat_r+0x1c>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	b103      	cbz	r3, 8008a50 <_fstat_r+0x1c>
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	bf00      	nop
 8008a54:	20000924 	.word	0x20000924

08008a58 <_isatty_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	; (8008a74 <_isatty_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f8 f94d 	bl	8000d02 <_isatty>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_isatty_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_isatty_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	20000924 	.word	0x20000924

08008a78 <_init>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr

08008a84 <_fini>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr

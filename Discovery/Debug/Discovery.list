
Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cfc  08007cfc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007cfc  08007cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d04  08007d04  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d08  08007d08  00017d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016487  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c52  00000000  00000000  00036547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  0003a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  0003b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fa2  00000000  00000000  0003c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e7a  00000000  00000000  00060292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb8d8  00000000  00000000  0007910c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001449e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004940  00000000  00000000  00144a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cc8 	.word	0x08007cc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007cc8 	.word	0x08007cc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b76      	ldr	r3, [pc, #472]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a75      	ldr	r2, [pc, #468]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b73      	ldr	r3, [pc, #460]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b6f      	ldr	r3, [pc, #444]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a6e      	ldr	r2, [pc, #440]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b6c      	ldr	r3, [pc, #432]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b68      	ldr	r3, [pc, #416]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a67      	ldr	r2, [pc, #412]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b61      	ldr	r3, [pc, #388]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a60      	ldr	r2, [pc, #384]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b5e      	ldr	r3, [pc, #376]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b5a      	ldr	r3, [pc, #360]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a59      	ldr	r2, [pc, #356]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b57      	ldr	r3, [pc, #348]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b53      	ldr	r3, [pc, #332]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a52      	ldr	r2, [pc, #328]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b50      	ldr	r3, [pc, #320]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	484d      	ldr	r0, [pc, #308]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000590:	f000 fef8 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	484b      	ldr	r0, [pc, #300]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 800059a:	f000 fef3 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800059e:	2200      	movs	r2, #0
 80005a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a4:	4849      	ldr	r0, [pc, #292]	; (80006cc <MX_GPIO_Init+0x200>)
 80005a6:	f000 feed 	bl	8001384 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	4840      	ldr	r0, [pc, #256]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 80005c2:	f000 fd43 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 80005de:	f000 fd35 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4832      	ldr	r0, [pc, #200]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 80005fe:	f000 fd25 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING ;
 8000606:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	482e      	ldr	r0, [pc, #184]	; (80006d0 <MX_GPIO_Init+0x204>)
 8000618:	f000 fd18 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800061c:	2304      	movs	r3, #4
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <MX_GPIO_Init+0x208>)
 8000630:	f000 fd0c 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000646:	2305      	movs	r3, #5
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4619      	mov	r1, r3
 8000650:	4820      	ldr	r0, [pc, #128]	; (80006d4 <MX_GPIO_Init+0x208>)
 8000652:	f000 fcfb 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000656:	f24f 0310 	movw	r3, #61456	; 0xf010
 800065a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0x200>)
 8000670:	f000 fcec 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000674:	2320      	movs	r3, #32
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_GPIO_Init+0x200>)
 8000688:	f000 fce0 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000690:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 80006a2:	f000 fcd3 	bl	800104c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2006      	movs	r0, #6
 80006ac:	f000 fc97 	bl	8000fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b0:	2006      	movs	r0, #6
 80006b2:	f000 fcb0 	bl	8001016 <HAL_NVIC_EnableIRQ>

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	; 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40020400 	.word	0x40020400

080006d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f002 fa8b 	bl	8002c30 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f992 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000ac 	.word	0x200000ac
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_I2C_MspInit+0x84>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d12c      	bne.n	80007b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000772:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000784:	2304      	movs	r3, #4
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <HAL_I2C_MspInit+0x8c>)
 8000790:	f000 fc5c 	bl	800104c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_I2C_MspInit+0x88>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400

080007c4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <MX_I2S3_Init+0x58>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <MX_I2S3_Init+0x5c>)
 80007ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_I2S3_Init+0x54>)
 8000804:	f002 fb58 	bl	8002eb8 <HAL_I2S_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800080e:	f000 f91b 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000100 	.word	0x20000100
 800081c:	40003c00 	.word	0x40003c00
 8000820:	00017700 	.word	0x00017700

08000824 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a31      	ldr	r2, [pc, #196]	; (8000914 <HAL_I2S_MspInit+0xf0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d15a      	bne.n	800090a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000858:	23c0      	movs	r3, #192	; 0xc0
 800085a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fc4b 	bl	8004100 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000870:	f000 f8ea 	bl	8000a48 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a26      	ldr	r2, [pc, #152]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 800087e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a18      	ldr	r2, [pc, #96]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <HAL_I2S_MspInit+0xf8>)
 80008e4:	f000 fbb2 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fa:	2306      	movs	r3, #6
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <HAL_I2S_MspInit+0xfc>)
 8000906:	f000 fba1 	bl	800104c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800090a:	bf00      	nop
 800090c:	3738      	adds	r7, #56	; 0x38
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40003c00 	.word	0x40003c00
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020800 	.word	0x40020800

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 f9e8 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f80e 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f7ff fdcc 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000934:	f7ff fed0 	bl	80006d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000938:	f7ff ff44 	bl	80007c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800093c:	f000 f88a 	bl	8000a54 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000940:	f006 fd7a 	bl	8007438 <MX_USB_HOST_Init>
//	  HAL_Delay(1000);
//	  Blue_LED_Toggle;
//	  HAL_Delay(1000);

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000944:	f006 fd9e 	bl	8007484 <MX_USB_HOST_Process>
 8000948:	e7fc      	b.n	8000944 <main+0x20>
	...

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	2230      	movs	r2, #48	; 0x30
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 f8ae 	bl	8007abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <SystemClock_Config+0xcc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <SystemClock_Config+0xcc>)
 800097a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <SystemClock_Config+0xcc>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <SystemClock_Config+0xd0>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <SystemClock_Config+0xd0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009bc:	2308      	movs	r3, #8
 80009be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ca:	2307      	movs	r3, #7
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 ff10 	bl	80037f8 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009de:	f000 f833 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2302      	movs	r3, #2
 80009e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2105      	movs	r1, #5
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 f971 	bl	8003ce8 <HAL_RCC_ClockConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a0c:	f000 f81c 	bl	8000a48 <Error_Handler>
  }
}
 8000a10:	bf00      	nop
 8000a12:	3750      	adds	r7, #80	; 0x50
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//Interrupt Switch
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d104      	bne.n	8000a3a <HAL_GPIO_EXTI_Callback+0x1a>
		Blue_LED_Toggle;
 8000a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a36:	f000 fcbe 	bl	80013b6 <HAL_GPIO_TogglePin>
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40020c00 	.word	0x40020c00

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa6:	f003 fc6b 	bl	8004380 <HAL_SPI_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f7ff ffca 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000148 	.word	0x20000148
 8000abc:	40013000 	.word	0x40013000

08000ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <HAL_SPI_MspInit+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12b      	bne.n	8000b3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b1a:	23e0      	movs	r3, #224	; 0xe0
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_SPI_MspInit+0x8c>)
 8000b36:	f000 fa89 	bl	800104c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40013000 	.word	0x40013000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b8e:	2007      	movs	r0, #7
 8000b90:	f000 fa1a 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f8d8 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fbf7 	bl	80013ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <OTG_FS_IRQHandler+0x10>)
 8000c0a:	f000 fe71 	bl	80018f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000584 	.word	0x20000584

08000c18 <_sbrk>:
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
 8000c48:	f006 fefe 	bl	8007a48 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	200001a0 	.word	0x200001a0
 8000c80:	20000898 	.word	0x20000898

08000c84 <SystemInit>:
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:
 8000cb6:	58d4      	ldr	r4, [r2, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:
 8000cbc:	18c4      	adds	r4, r0, r3
 8000cbe:	428c      	cmp	r4, r1
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:
 8000cce:	42a2      	cmp	r2, r4
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>
 8000cd2:	f7ff ffd7 	bl	8000c84 <SystemInit>
 8000cd6:	f006 febd 	bl	8007a54 <__libc_init_array>
 8000cda:	f7ff fe23 	bl	8000924 <main>
 8000cde:	4770      	bx	lr
 8000ce0:	20020000 	.word	0x20020000
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000090 	.word	0x20000090
 8000cec:	08007d0c 	.word	0x08007d0c
 8000cf0:	20000090 	.word	0x20000090
 8000cf4:	20000898 	.word	0x20000898

08000cf8 <ADC_IRQHandler>:
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>
 8000d30:	f7ff ff0e 	bl	8000b50 <HAL_MspInit>
 8000d34:	2300      	movs	r3, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f967 	bl	8001032 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f92f 	bl	8000fde <HAL_NVIC_SetPriority>
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200001a4 	.word	0x200001a4

08000dc8 <HAL_GetTick>:
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001a4 	.word	0x200001a4

08000de0 <HAL_Delay>:
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
 8000f74:	4313      	orrs	r3, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e16b      	b.n	8001340 <HAL_GPIO_Init+0x2f4>
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 815a 	bne.w	800133a <HAL_GPIO_Init+0x2ee>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_GPIO_Init+0x52>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d130      	bne.n	8001100 <HAL_GPIO_Init+0xb4>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	f003 0201 	and.w	r2, r3, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0xf0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x144>
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80b4 	beq.w	800133a <HAL_GPIO_Init+0x2ee>
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b60      	ldr	r3, [pc, #384]	; (8001358 <HAL_GPIO_Init+0x30c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a5f      	ldr	r2, [pc, #380]	; (8001358 <HAL_GPIO_Init+0x30c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b5d      	ldr	r3, [pc, #372]	; (8001358 <HAL_GPIO_Init+0x30c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a5b      	ldr	r2, [pc, #364]	; (800135c <HAL_GPIO_Init+0x310>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a52      	ldr	r2, [pc, #328]	; (8001360 <HAL_GPIO_Init+0x314>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d02b      	beq.n	8001272 <HAL_GPIO_Init+0x226>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a51      	ldr	r2, [pc, #324]	; (8001364 <HAL_GPIO_Init+0x318>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x222>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a50      	ldr	r2, [pc, #320]	; (8001368 <HAL_GPIO_Init+0x31c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x21e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <HAL_GPIO_Init+0x320>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x21a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	; (8001370 <HAL_GPIO_Init+0x324>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x216>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	; (8001374 <HAL_GPIO_Init+0x328>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x212>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <HAL_GPIO_Init+0x32c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x20e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_GPIO_Init+0x330>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x20a>
 8001252:	2307      	movs	r3, #7
 8001254:	e00e      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001256:	2308      	movs	r3, #8
 8001258:	e00c      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800125a:	2306      	movs	r3, #6
 800125c:	e00a      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800125e:	2305      	movs	r3, #5
 8001260:	e008      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001262:	2304      	movs	r3, #4
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001266:	2303      	movs	r3, #3
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001272:	2300      	movs	r3, #0
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	f002 0203 	and.w	r2, r2, #3
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	4935      	ldr	r1, [pc, #212]	; (800135c <HAL_GPIO_Init+0x310>)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x26a>
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	4a32      	ldr	r2, [pc, #200]	; (8001380 <HAL_GPIO_Init+0x334>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6093      	str	r3, [r2, #8]
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_GPIO_Init+0x334>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x294>
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <HAL_GPIO_Init+0x334>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	60d3      	str	r3, [r2, #12]
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_GPIO_Init+0x334>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x2be>
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	4a1d      	ldr	r2, [pc, #116]	; (8001380 <HAL_GPIO_Init+0x334>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6053      	str	r3, [r2, #4]
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x2e8>
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b0f      	cmp	r3, #15
 8001344:	f67f ae90 	bls.w	8001068 <HAL_GPIO_Init+0x1c>
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40013800 	.word	0x40013800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400
 8001368:	40020800 	.word	0x40020800
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40021000 	.word	0x40021000
 8001374:	40021400 	.word	0x40021400
 8001378:	40021800 	.word	0x40021800
 800137c:	40021c00 	.word	0x40021c00
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_GPIO_WritePin>:
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_TogglePin>:
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	041a      	lsls	r2, r3, #16
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	400b      	ands	r3, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_GPIO_EXTI_IRQHandler>:
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	6153      	str	r3, [r2, #20]
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fb08 	bl	8000a20 <HAL_GPIO_EXTI_Callback>
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40013c00 	.word	0x40013c00

0800141c <HAL_HCD_Init>:
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141e:	b08f      	sub	sp, #60	; 0x3c
 8001420:	af0a      	add	r7, sp, #40	; 0x28
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_HCD_Init+0x12>
 800142a:	2301      	movs	r3, #1
 800142c:	e054      	b.n	80014d8 <HAL_HCD_Init+0xbc>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d106      	bne.n	800144e <HAL_HCD_Init+0x32>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f006 f853 	bl	80074f4 <HAL_HCD_MspInit>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_HCD_Init+0x4c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f003 f882 	bl	8004576 <USB_DisableGlobalInt>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	687e      	ldr	r6, [r7, #4]
 800147a:	466d      	mov	r5, sp
 800147c:	f106 0410 	add.w	r4, r6, #16
 8001480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001488:	e894 0003 	ldmia.w	r4, {r0, r1}
 800148c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001490:	1d33      	adds	r3, r6, #4
 8001492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f002 fffc 	bl	8004492 <USB_CoreInit>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 f879 	bl	8004598 <USB_SetCurrentMode>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	687e      	ldr	r6, [r7, #4]
 80014ae:	466d      	mov	r5, sp
 80014b0:	f106 0410 	add.w	r4, r6, #16
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c4:	1d33      	adds	r3, r6, #4
 80014c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c8:	6838      	ldr	r0, [r7, #0]
 80014ca:	f003 fa01 	bl	80048d0 <USB_HostInit>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 80014d6:	2300      	movs	r3, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e0 <HAL_HCD_HC_Init>:
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af04      	add	r7, sp, #16
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	4608      	mov	r0, r1
 80014ea:	4611      	mov	r1, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4603      	mov	r3, r0
 80014f0:	70fb      	strb	r3, [r7, #3]
 80014f2:	460b      	mov	r3, r1
 80014f4:	70bb      	strb	r3, [r7, #2]
 80014f6:	4613      	mov	r3, r2
 80014f8:	707b      	strb	r3, [r7, #1]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_HCD_HC_Init+0x28>
 8001504:	2302      	movs	r3, #2
 8001506:	e076      	b.n	80015f6 <HAL_HCD_HC_Init+0x116>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	212c      	movs	r1, #44	; 0x2c
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	333d      	adds	r3, #61	; 0x3d
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	212c      	movs	r1, #44	; 0x2c
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	3338      	adds	r3, #56	; 0x38
 8001530:	787a      	ldrb	r2, [r7, #1]
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	212c      	movs	r1, #44	; 0x2c
 800153a:	fb01 f303 	mul.w	r3, r1, r3
 800153e:	4413      	add	r3, r2
 8001540:	3340      	adds	r3, #64	; 0x40
 8001542:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	212c      	movs	r1, #44	; 0x2c
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	4413      	add	r3, r2
 8001552:	3339      	adds	r3, #57	; 0x39
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	212c      	movs	r1, #44	; 0x2c
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	4413      	add	r3, r2
 8001564:	333f      	adds	r3, #63	; 0x3f
 8001566:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	78ba      	ldrb	r2, [r7, #2]
 8001570:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001574:	b2d0      	uxtb	r0, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	212c      	movs	r1, #44	; 0x2c
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	333a      	adds	r3, #58	; 0x3a
 8001582:	4602      	mov	r2, r0
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da09      	bge.n	80015a2 <HAL_HCD_HC_Init+0xc2>
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	333b      	adds	r3, #59	; 0x3b
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e008      	b.n	80015b4 <HAL_HCD_HC_Init+0xd4>
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	333b      	adds	r3, #59	; 0x3b
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	212c      	movs	r1, #44	; 0x2c
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4413      	add	r3, r2
 80015c0:	333c      	adds	r3, #60	; 0x3c
 80015c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	787c      	ldrb	r4, [r7, #1]
 80015ce:	78ba      	ldrb	r2, [r7, #2]
 80015d0:	78f9      	ldrb	r1, [r7, #3]
 80015d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4623      	mov	r3, r4
 80015e4:	f003 fafa 	bl	8004bdc <USB_HC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}

080015fe <HAL_HCD_HC_Halt>:
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	70fb      	strb	r3, [r7, #3]
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_HCD_HC_Halt+0x1e>
 8001618:	2302      	movs	r3, #2
 800161a:	e00f      	b.n	800163c <HAL_HCD_HC_Halt+0x3e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fd4a 	bl	80050c6 <USB_HC_Halt>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_HCD_HC_SubmitRequest>:
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	70fb      	strb	r3, [r7, #3]
 8001656:	460b      	mov	r3, r1
 8001658:	70bb      	strb	r3, [r7, #2]
 800165a:	4613      	mov	r3, r2
 800165c:	707b      	strb	r3, [r7, #1]
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	212c      	movs	r1, #44	; 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	333b      	adds	r3, #59	; 0x3b
 800166c:	78ba      	ldrb	r2, [r7, #2]
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	212c      	movs	r1, #44	; 0x2c
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	4413      	add	r3, r2
 800167c:	333f      	adds	r3, #63	; 0x3f
 800167e:	787a      	ldrb	r2, [r7, #1]
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	7c3b      	ldrb	r3, [r7, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d112      	bne.n	80016ae <HAL_HCD_HC_SubmitRequest+0x6a>
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	212c      	movs	r1, #44	; 0x2c
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	3342      	adds	r3, #66	; 0x42
 8001696:	2203      	movs	r2, #3
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	333d      	adds	r3, #61	; 0x3d
 80016a8:	7f3a      	ldrb	r2, [r7, #28]
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e008      	b.n	80016c0 <HAL_HCD_HC_SubmitRequest+0x7c>
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	3342      	adds	r3, #66	; 0x42
 80016bc:	2202      	movs	r2, #2
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	f200 80c6 	bhi.w	8001854 <HAL_HCD_HC_SubmitRequest+0x210>
 80016c8:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	08001841 	.word	0x08001841
 80016d8:	08001745 	.word	0x08001745
 80016dc:	080017c3 	.word	0x080017c3
 80016e0:	7c3b      	ldrb	r3, [r7, #16]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	f040 80b8 	bne.w	8001858 <HAL_HCD_HC_SubmitRequest+0x214>
 80016e8:	78bb      	ldrb	r3, [r7, #2]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 80b4 	bne.w	8001858 <HAL_HCD_HC_SubmitRequest+0x214>
 80016f0:	8b3b      	ldrh	r3, [r7, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <HAL_HCD_HC_SubmitRequest+0xc4>
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	3355      	adds	r3, #85	; 0x55
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	3355      	adds	r3, #85	; 0x55
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d109      	bne.n	8001730 <HAL_HCD_HC_SubmitRequest+0xec>
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3342      	adds	r3, #66	; 0x42
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e093      	b.n	8001858 <HAL_HCD_HC_SubmitRequest+0x214>
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	3342      	adds	r3, #66	; 0x42
 800173e:	2202      	movs	r2, #2
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e089      	b.n	8001858 <HAL_HCD_HC_SubmitRequest+0x214>
 8001744:	78bb      	ldrb	r3, [r7, #2]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d11d      	bne.n	8001786 <HAL_HCD_HC_SubmitRequest+0x142>
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3355      	adds	r3, #85	; 0x55
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_HCD_HC_SubmitRequest+0x12e>
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3342      	adds	r3, #66	; 0x42
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e073      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	3342      	adds	r3, #66	; 0x42
 8001780:	2202      	movs	r2, #2
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	e069      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	3354      	adds	r3, #84	; 0x54
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_HCD_HC_SubmitRequest+0x16a>
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	212c      	movs	r1, #44	; 0x2c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	3342      	adds	r3, #66	; 0x42
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e055      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2202      	movs	r2, #2
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e04b      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 80017c2:	78bb      	ldrb	r3, [r7, #2]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d11d      	bne.n	8001804 <HAL_HCD_HC_SubmitRequest+0x1c0>
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3355      	adds	r3, #85	; 0x55
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d109      	bne.n	80017f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e034      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	212c      	movs	r1, #44	; 0x2c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3342      	adds	r3, #66	; 0x42
 80017fe:	2202      	movs	r2, #2
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e02a      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3354      	adds	r3, #84	; 0x54
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_HCD_HC_SubmitRequest+0x1e8>
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3342      	adds	r3, #66	; 0x42
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e016      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2202      	movs	r2, #2
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e00c      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e002      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 8001854:	bf00      	nop
 8001856:	e000      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
 8001858:	bf00      	nop
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3344      	adds	r3, #68	; 0x44
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	202c      	movs	r0, #44	; 0x2c
 8001874:	fb00 f303 	mul.w	r3, r0, r3
 8001878:	440b      	add	r3, r1
 800187a:	334c      	adds	r3, #76	; 0x4c
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3360      	adds	r3, #96	; 0x60
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3350      	adds	r3, #80	; 0x50
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3339      	adds	r3, #57	; 0x39
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3361      	adds	r3, #97	; 0x61
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	222c      	movs	r2, #44	; 0x2c
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	3338      	adds	r3, #56	; 0x38
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	18d1      	adds	r1, r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	f003 fa9e 	bl	8004e20 <USB_HC_StartXfer>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop

080018f0 <HAL_HCD_IRQHandler>:
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 ff9f 	bl	800484a <USB_GetMode>
 800190c:	4603      	mov	r3, r0
 800190e:	2b01      	cmp	r3, #1
 8001910:	f040 80f6 	bne.w	8001b00 <HAL_HCD_IRQHandler+0x210>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 ff83 	bl	8004824 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80ec 	beq.w	8001afe <HAL_HCD_IRQHandler+0x20e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 ff7a 	bl	8004824 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800193a:	d104      	bne.n	8001946 <HAL_HCD_IRQHandler+0x56>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001944:	615a      	str	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f002 ff6a 	bl	8004824 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800195a:	d104      	bne.n	8001966 <HAL_HCD_IRQHandler+0x76>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001964:	615a      	str	r2, [r3, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f002 ff5a 	bl	8004824 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001976:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800197a:	d104      	bne.n	8001986 <HAL_HCD_IRQHandler+0x96>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001984:	615a      	str	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f002 ff4a 	bl	8004824 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b02      	cmp	r3, #2
 8001998:	d103      	bne.n	80019a2 <HAL_HCD_IRQHandler+0xb2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 ff3c 	bl	8004824 <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b6:	d11c      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x102>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x102>
 80019d2:	2110      	movs	r1, #16
 80019d4:	6938      	ldr	r0, [r7, #16]
 80019d6:	f002 fe2b 	bl	8004630 <USB_FlushTxFifo>
 80019da:	6938      	ldr	r0, [r7, #16]
 80019dc:	f002 fe5c 	bl	8004698 <USB_FlushRxFifo>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f832 	bl	8004a50 <USB_InitFSLSPClkSel>
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f005 fdff 	bl	80075f0 <HAL_HCD_Disconnect_Callback>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 ff14 	bl	8004824 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a06:	d102      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x11e>
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f001 f89e 	bl	8002b4a <HCD_Port_IRQHandler>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 ff06 	bl	8004824 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d106      	bne.n	8001a30 <HAL_HCD_IRQHandler+0x140>
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f005 fdc8 	bl	80075b8 <HAL_HCD_SOF_Callback>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	615a      	str	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fef5 	bl	8004824 <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d101      	bne.n	8001a48 <HAL_HCD_IRQHandler+0x158>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_HCD_IRQHandler+0x15a>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <HAL_HCD_IRQHandler+0x184>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0210 	bic.w	r2, r2, #16
 8001a5c:	619a      	str	r2, [r3, #24]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 ffa1 	bl	80029a6 <HCD_RXQLVL_IRQHandler>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0210 	orr.w	r2, r2, #16
 8001a72:	619a      	str	r2, [r3, #24]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fed3 	bl	8004824 <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a88:	d13a      	bne.n	8001b00 <HAL_HCD_IRQHandler+0x210>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fb08 	bl	80050a4 <USB_HC_ReadInterrupt>
 8001a94:	60b8      	str	r0, [r7, #8]
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e025      	b.n	8001ae8 <HAL_HCD_IRQHandler+0x1f8>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d018      	beq.n	8001ae2 <HAL_HCD_IRQHandler+0x1f2>
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	015a      	lsls	r2, r3, #5
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x1e6>
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8ab 	bl	8001c2a <HCD_HC_IN_IRQHandler>
 8001ad4:	e005      	b.n	8001ae2 <HAL_HCD_IRQHandler+0x1f2>
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fbf9 	bl	80022d4 <HCD_HC_OUT_IRQHandler>
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d3d4      	bcc.n	8001a9c <HAL_HCD_IRQHandler+0x1ac>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	e000      	b.n	8001b00 <HAL_HCD_IRQHandler+0x210>
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_HCD_Start>:
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_HCD_Start+0x16>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e013      	b.n	8001b44 <HAL_HCD_Start+0x3e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fff4 	bl	8004b18 <USB_DriveVbus>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fd0d 	bl	8004554 <USB_EnableGlobalInt>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001b42:	2300      	movs	r3, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_HCD_Stop>:
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_HCD_Stop+0x16>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e00d      	b.n	8001b7e <HAL_HCD_Stop+0x32>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fbe2 	bl	8005338 <USB_StopHost>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_HCD_ResetPort>:
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 ff96 	bl	8004ac4 <USB_ResetPort>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_HCD_HC_GetURBState>:
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	70fb      	strb	r3, [r7, #3]
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3360      	adds	r3, #96	; 0x60
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_HCD_HC_GetXferCount>:
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	3350      	adds	r3, #80	; 0x50
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_HCD_GetCurrentFrame>:
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 ffda 	bl	8004bb8 <USB_GetCurrentFrame>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_HCD_GetCurrentSpeed>:
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 ffb5 	bl	8004b8a <USB_GetHostSpeed>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HCD_HC_IN_IRQHandler>:
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	70fb      	strb	r3, [r7, #3]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d11a      	bne.n	8001c90 <HCD_HC_IN_IRQHandler+0x66>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	461a      	mov	r2, r3
 8001c68:	2304      	movs	r3, #4
 8001c6a:	6093      	str	r3, [r2, #8]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3361      	adds	r3, #97	; 0x61
 8001c7a:	2206      	movs	r2, #6
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fa1c 	bl	80050c6 <USB_HC_Halt>
 8001c8e:	e0af      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x1c6>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca6:	d11b      	bne.n	8001ce0 <HCD_HC_IN_IRQHandler+0xb6>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cba:	6093      	str	r3, [r2, #8]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3361      	adds	r3, #97	; 0x61
 8001cca:	2207      	movs	r2, #7
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 f9f4 	bl	80050c6 <USB_HC_Halt>
 8001cde:	e087      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x1c6>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d109      	bne.n	8001d0a <HCD_HC_IN_IRQHandler+0xe0>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	461a      	mov	r2, r3
 8001d04:	2320      	movs	r3, #32
 8001d06:	6093      	str	r3, [r2, #8]
 8001d08:	e072      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x1c6>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d11a      	bne.n	8001d56 <HCD_HC_IN_IRQHandler+0x12c>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2308      	movs	r3, #8
 8001d30:	6093      	str	r3, [r2, #8]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3361      	adds	r3, #97	; 0x61
 8001d40:	2205      	movs	r2, #5
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 f9b9 	bl	80050c6 <USB_HC_Halt>
 8001d54:	e04c      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x1c6>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6c:	d11b      	bne.n	8001da6 <HCD_HC_IN_IRQHandler+0x17c>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d80:	6093      	str	r3, [r2, #8]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3361      	adds	r3, #97	; 0x61
 8001d90:	2208      	movs	r2, #8
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 f991 	bl	80050c6 <USB_HC_Halt>
 8001da4:	e024      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x1c6>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db8:	2b80      	cmp	r3, #128	; 0x80
 8001dba:	d119      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x1c6>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	6093      	str	r3, [r2, #8]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3361      	adds	r3, #97	; 0x61
 8001ddc:	2206      	movs	r2, #6
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 f96b 	bl	80050c6 <USB_HC_Halt>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e06:	d112      	bne.n	8001e2e <HCD_HC_IN_IRQHandler+0x204>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 f957 	bl	80050c6 <USB_HC_Halt>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	461a      	mov	r2, r3
 8001e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e2a:	6093      	str	r3, [r2, #8]
 8001e2c:	e24e      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x6a2>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f040 80df 	bne.w	8002004 <HCD_HC_IN_IRQHandler+0x3da>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d019      	beq.n	8001e82 <HCD_HC_IN_IRQHandler+0x258>
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3348      	adds	r3, #72	; 0x48
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	0159      	lsls	r1, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	440b      	add	r3, r1
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	1ad2      	subs	r2, r2, r3
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	202c      	movs	r0, #44	; 0x2c
 8001e78:	fb00 f303 	mul.w	r3, r0, r3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3350      	adds	r3, #80	; 0x50
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	212c      	movs	r1, #44	; 0x2c
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3361      	adds	r3, #97	; 0x61
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	335c      	adds	r3, #92	; 0x5c
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	6093      	str	r3, [r2, #8]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	333f      	adds	r3, #63	; 0x3f
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HCD_HC_IN_IRQHandler+0x2b6>
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	333f      	adds	r3, #63	; 0x3f
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d111      	bne.n	8001f04 <HCD_HC_IN_IRQHandler+0x2da>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 f8eb 	bl	80050c6 <USB_HC_Halt>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	461a      	mov	r2, r3
 8001efe:	2310      	movs	r3, #16
 8001f00:	6093      	str	r3, [r2, #8]
 8001f02:	e03a      	b.n	8001f7a <HCD_HC_IN_IRQHandler+0x350>
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	333f      	adds	r3, #63	; 0x3f
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d009      	beq.n	8001f2c <HCD_HC_IN_IRQHandler+0x302>
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	333f      	adds	r3, #63	; 0x3f
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d126      	bne.n	8001f7a <HCD_HC_IN_IRQHandler+0x350>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	0151      	lsls	r1, r2, #5
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	440a      	add	r2, r1
 8001f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	212c      	movs	r1, #44	; 0x2c
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	3360      	adds	r3, #96	; 0x60
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	b2d9      	uxtb	r1, r3
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	202c      	movs	r0, #44	; 0x2c
 8001f68:	fb00 f303 	mul.w	r3, r0, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3360      	adds	r3, #96	; 0x60
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f005 fb49 	bl	800760c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d12b      	bne.n	8001fda <HCD_HC_IN_IRQHandler+0x3b0>
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	212c      	movs	r1, #44	; 0x2c
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3348      	adds	r3, #72	; 0x48
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	202c      	movs	r0, #44	; 0x2c
 8001f98:	fb00 f202 	mul.w	r2, r0, r2
 8001f9c:	440a      	add	r2, r1
 8001f9e:	3240      	adds	r2, #64	; 0x40
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 818e 	beq.w	80022cc <HCD_HC_IN_IRQHandler+0x6a2>
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	212c      	movs	r1, #44	; 0x2c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	3354      	adds	r3, #84	; 0x54
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f083 0301 	eor.w	r3, r3, #1
 8001fc4:	b2d8      	uxtb	r0, r3
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3354      	adds	r3, #84	; 0x54
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e178      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x6a2>
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3354      	adds	r3, #84	; 0x54
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2d8      	uxtb	r0, r3
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3354      	adds	r3, #84	; 0x54
 8001ffe:	4602      	mov	r2, r0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	e163      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x6a2>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b02      	cmp	r3, #2
 8002018:	f040 80f6 	bne.w	8002208 <HCD_HC_IN_IRQHandler+0x5de>
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	212c      	movs	r1, #44	; 0x2c
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	3361      	adds	r3, #97	; 0x61
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d109      	bne.n	8002044 <HCD_HC_IN_IRQHandler+0x41a>
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3360      	adds	r3, #96	; 0x60
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e0c9      	b.n	80021d8 <HCD_HC_IN_IRQHandler+0x5ae>
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3361      	adds	r3, #97	; 0x61
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b05      	cmp	r3, #5
 8002056:	d109      	bne.n	800206c <HCD_HC_IN_IRQHandler+0x442>
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	3360      	adds	r3, #96	; 0x60
 8002066:	2205      	movs	r2, #5
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e0b5      	b.n	80021d8 <HCD_HC_IN_IRQHandler+0x5ae>
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3361      	adds	r3, #97	; 0x61
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b06      	cmp	r3, #6
 800207e:	d009      	beq.n	8002094 <HCD_HC_IN_IRQHandler+0x46a>
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3361      	adds	r3, #97	; 0x61
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d150      	bne.n	8002136 <HCD_HC_IN_IRQHandler+0x50c>
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	335c      	adds	r3, #92	; 0x5c
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	fb00 f303 	mul.w	r3, r0, r3
 80020b0:	440b      	add	r3, r1
 80020b2:	335c      	adds	r3, #92	; 0x5c
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	335c      	adds	r3, #92	; 0x5c
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d912      	bls.n	80020f0 <HCD_HC_IN_IRQHandler+0x4c6>
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	335c      	adds	r3, #92	; 0x5c
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3360      	adds	r3, #96	; 0x60
 80020ea:	2204      	movs	r2, #4
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e073      	b.n	80021d8 <HCD_HC_IN_IRQHandler+0x5ae>
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3360      	adds	r3, #96	; 0x60
 80020fe:	2202      	movs	r2, #2
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e050      	b.n	80021d8 <HCD_HC_IN_IRQHandler+0x5ae>
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3361      	adds	r3, #97	; 0x61
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d122      	bne.n	8002190 <HCD_HC_IN_IRQHandler+0x566>
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3360      	adds	r3, #96	; 0x60
 8002158:	2202      	movs	r2, #2
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e023      	b.n	80021d8 <HCD_HC_IN_IRQHandler+0x5ae>
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3361      	adds	r3, #97	; 0x61
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b07      	cmp	r3, #7
 80021a2:	d119      	bne.n	80021d8 <HCD_HC_IN_IRQHandler+0x5ae>
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	202c      	movs	r0, #44	; 0x2c
 80021bc:	fb00 f303 	mul.w	r3, r0, r3
 80021c0:	440b      	add	r3, r1
 80021c2:	335c      	adds	r3, #92	; 0x5c
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3360      	adds	r3, #96	; 0x60
 80021d4:	2204      	movs	r2, #4
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e4:	461a      	mov	r2, r3
 80021e6:	2302      	movs	r3, #2
 80021e8:	6093      	str	r3, [r2, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	b2d9      	uxtb	r1, r3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	202c      	movs	r0, #44	; 0x2c
 80021f4:	fb00 f303 	mul.w	r3, r0, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3360      	adds	r3, #96	; 0x60
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f005 fa03 	bl	800760c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002206:	e061      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x6a2>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b10      	cmp	r3, #16
 800221c:	d156      	bne.n	80022cc <HCD_HC_IN_IRQHandler+0x6a2>
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	333f      	adds	r3, #63	; 0x3f
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d111      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0x62c>
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	335c      	adds	r3, #92	; 0x5c
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f002 ff39 	bl	80050c6 <USB_HC_Halt>
 8002254:	e031      	b.n	80022ba <HCD_HC_IN_IRQHandler+0x690>
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	333f      	adds	r3, #63	; 0x3f
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HCD_HC_IN_IRQHandler+0x654>
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	333f      	adds	r3, #63	; 0x3f
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d11d      	bne.n	80022ba <HCD_HC_IN_IRQHandler+0x690>
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	335c      	adds	r3, #92	; 0x5c
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d110      	bne.n	80022ba <HCD_HC_IN_IRQHandler+0x690>
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3361      	adds	r3, #97	; 0x61
 80022a6:	2203      	movs	r2, #3
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 ff06 	bl	80050c6 <USB_HC_Halt>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	461a      	mov	r2, r3
 80022c8:	2310      	movs	r3, #16
 80022ca:	6093      	str	r3, [r2, #8]
 80022cc:	bf00      	nop
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HCD_HC_OUT_IRQHandler>:
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b04      	cmp	r3, #4
 8002302:	d11a      	bne.n	800233a <HCD_HC_OUT_IRQHandler+0x66>
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002310:	461a      	mov	r2, r3
 8002312:	2304      	movs	r3, #4
 8002314:	6093      	str	r3, [r2, #8]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	3361      	adds	r3, #97	; 0x61
 8002324:	2206      	movs	r2, #6
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f002 fec7 	bl	80050c6 <USB_HC_Halt>
 8002338:	e331      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d12e      	bne.n	80023ae <HCD_HC_OUT_IRQHandler+0xda>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	461a      	mov	r2, r3
 800235e:	2320      	movs	r3, #32
 8002360:	6093      	str	r3, [r2, #8]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	333d      	adds	r3, #61	; 0x3d
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	f040 8313 	bne.w	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	333d      	adds	r3, #61	; 0x3d
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	3360      	adds	r3, #96	; 0x60
 8002398:	2202      	movs	r2, #2
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 fe8d 	bl	80050c6 <USB_HC_Halt>
 80023ac:	e2f7      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c4:	d112      	bne.n	80023ec <HCD_HC_OUT_IRQHandler+0x118>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	461a      	mov	r2, r3
 80023d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d8:	6093      	str	r3, [r2, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fe6e 	bl	80050c6 <USB_HC_Halt>
 80023ea:	e2d8      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d140      	bne.n	8002484 <HCD_HC_OUT_IRQHandler+0x1b0>
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	335c      	adds	r3, #92	; 0x5c
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	d111      	bne.n	800244e <HCD_HC_OUT_IRQHandler+0x17a>
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	333d      	adds	r3, #61	; 0x3d
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	461a      	mov	r2, r3
 800244a:	2340      	movs	r3, #64	; 0x40
 800244c:	6093      	str	r3, [r2, #8]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	461a      	mov	r2, r3
 800245c:	2301      	movs	r3, #1
 800245e:	6093      	str	r3, [r2, #8]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3361      	adds	r3, #97	; 0x61
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f002 fe22 	bl	80050c6 <USB_HC_Halt>
 8002482:	e28c      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	d12c      	bne.n	80024f4 <HCD_HC_OUT_IRQHandler+0x220>
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3361      	adds	r3, #97	; 0x61
 80024a8:	2204      	movs	r2, #4
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	333d      	adds	r3, #61	; 0x3d
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	335c      	adds	r3, #92	; 0x5c
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fdf3 	bl	80050c6 <USB_HC_Halt>
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	461a      	mov	r2, r3
 80024ee:	2340      	movs	r3, #64	; 0x40
 80024f0:	6093      	str	r3, [r2, #8]
 80024f2:	e254      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11a      	bne.n	8002540 <HCD_HC_OUT_IRQHandler+0x26c>
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	461a      	mov	r2, r3
 8002518:	2308      	movs	r3, #8
 800251a:	6093      	str	r3, [r2, #8]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3361      	adds	r3, #97	; 0x61
 800252a:	2205      	movs	r2, #5
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f002 fdc4 	bl	80050c6 <USB_HC_Halt>
 800253e:	e22e      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b10      	cmp	r3, #16
 8002554:	d140      	bne.n	80025d8 <HCD_HC_OUT_IRQHandler+0x304>
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	335c      	adds	r3, #92	; 0x5c
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3361      	adds	r3, #97	; 0x61
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	333d      	adds	r3, #61	; 0x3d
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d112      	bne.n	80025b4 <HCD_HC_OUT_IRQHandler+0x2e0>
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	333c      	adds	r3, #60	; 0x3c
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HCD_HC_OUT_IRQHandler+0x2e0>
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	333d      	adds	r3, #61	; 0x3d
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 fd81 	bl	80050c6 <USB_HC_Halt>
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	461a      	mov	r2, r3
 80025d2:	2310      	movs	r3, #16
 80025d4:	6093      	str	r3, [r2, #8]
 80025d6:	e1e2      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d164      	bne.n	80026b8 <HCD_HC_OUT_IRQHandler+0x3e4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d111      	bne.n	800261a <HCD_HC_OUT_IRQHandler+0x346>
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3361      	adds	r3, #97	; 0x61
 8002604:	2206      	movs	r2, #6
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fd57 	bl	80050c6 <USB_HC_Halt>
 8002618:	e044      	b.n	80026a4 <HCD_HC_OUT_IRQHandler+0x3d0>
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	202c      	movs	r0, #44	; 0x2c
 8002632:	fb00 f303 	mul.w	r3, r0, r3
 8002636:	440b      	add	r3, r1
 8002638:	335c      	adds	r3, #92	; 0x5c
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	335c      	adds	r3, #92	; 0x5c
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d920      	bls.n	8002692 <HCD_HC_OUT_IRQHandler+0x3be>
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	335c      	adds	r3, #92	; 0x5c
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	3360      	adds	r3, #96	; 0x60
 8002670:	2204      	movs	r2, #4
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	b2d9      	uxtb	r1, r3
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	202c      	movs	r0, #44	; 0x2c
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	4413      	add	r3, r2
 8002684:	3360      	adds	r3, #96	; 0x60
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f004 ffbe 	bl	800760c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002690:	e008      	b.n	80026a4 <HCD_HC_OUT_IRQHandler+0x3d0>
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3360      	adds	r3, #96	; 0x60
 80026a0:	2202      	movs	r2, #2
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	461a      	mov	r2, r3
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	6093      	str	r3, [r2, #8]
 80026b6:	e172      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d11b      	bne.n	8002708 <HCD_HC_OUT_IRQHandler+0x434>
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	3361      	adds	r3, #97	; 0x61
 80026de:	2208      	movs	r2, #8
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fcea 	bl	80050c6 <USB_HC_Halt>
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	461a      	mov	r2, r3
 8002700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002704:	6093      	str	r3, [r2, #8]
 8002706:	e14a      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b02      	cmp	r3, #2
 800271c:	f040 813f 	bne.w	800299e <HCD_HC_OUT_IRQHandler+0x6ca>
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3361      	adds	r3, #97	; 0x61
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d17d      	bne.n	8002830 <HCD_HC_OUT_IRQHandler+0x55c>
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3360      	adds	r3, #96	; 0x60
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	333f      	adds	r3, #63	; 0x3f
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d00a      	beq.n	8002770 <HCD_HC_OUT_IRQHandler+0x49c>
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	333f      	adds	r3, #63	; 0x3f
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b03      	cmp	r3, #3
 800276c:	f040 8100 	bne.w	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d113      	bne.n	80027a0 <HCD_HC_OUT_IRQHandler+0x4cc>
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3355      	adds	r3, #85	; 0x55
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f083 0301 	eor.w	r3, r3, #1
 800278c:	b2d8      	uxtb	r0, r3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3355      	adds	r3, #85	; 0x55
 800279c:	4602      	mov	r2, r0
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	f040 80e3 	bne.w	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	334c      	adds	r3, #76	; 0x4c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80d8 	beq.w	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	334c      	adds	r3, #76	; 0x4c
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	202c      	movs	r0, #44	; 0x2c
 80027d6:	fb00 f202 	mul.w	r2, r0, r2
 80027da:	440a      	add	r2, r1
 80027dc:	3240      	adds	r2, #64	; 0x40
 80027de:	8812      	ldrh	r2, [r2, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	202c      	movs	r0, #44	; 0x2c
 80027ea:	fb00 f202 	mul.w	r2, r0, r2
 80027ee:	440a      	add	r2, r1
 80027f0:	3240      	adds	r2, #64	; 0x40
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80b5 	beq.w	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3355      	adds	r3, #85	; 0x55
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f083 0301 	eor.w	r3, r3, #1
 800281a:	b2d8      	uxtb	r0, r3
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3355      	adds	r3, #85	; 0x55
 800282a:	4602      	mov	r2, r0
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e09f      	b.n	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3361      	adds	r3, #97	; 0x61
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d109      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0x584>
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3360      	adds	r3, #96	; 0x60
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e08b      	b.n	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3361      	adds	r3, #97	; 0x61
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d109      	bne.n	8002880 <HCD_HC_OUT_IRQHandler+0x5ac>
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3360      	adds	r3, #96	; 0x60
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e077      	b.n	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3361      	adds	r3, #97	; 0x61
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b05      	cmp	r3, #5
 8002892:	d109      	bne.n	80028a8 <HCD_HC_OUT_IRQHandler+0x5d4>
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3360      	adds	r3, #96	; 0x60
 80028a2:	2205      	movs	r2, #5
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	e063      	b.n	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3361      	adds	r3, #97	; 0x61
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d009      	beq.n	80028d0 <HCD_HC_OUT_IRQHandler+0x5fc>
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d14f      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	335c      	adds	r3, #92	; 0x5c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	202c      	movs	r0, #44	; 0x2c
 80028e8:	fb00 f303 	mul.w	r3, r0, r3
 80028ec:	440b      	add	r3, r1
 80028ee:	335c      	adds	r3, #92	; 0x5c
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	335c      	adds	r3, #92	; 0x5c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d912      	bls.n	800292c <HCD_HC_OUT_IRQHandler+0x658>
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	335c      	adds	r3, #92	; 0x5c
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3360      	adds	r3, #96	; 0x60
 8002926:	2204      	movs	r2, #4
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e021      	b.n	8002970 <HCD_HC_OUT_IRQHandler+0x69c>
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3360      	adds	r3, #96	; 0x60
 800293a:	2202      	movs	r2, #2
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296a:	461a      	mov	r2, r3
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	2302      	movs	r3, #2
 8002980:	6093      	str	r3, [r2, #8]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	b2d9      	uxtb	r1, r3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	202c      	movs	r0, #44	; 0x2c
 800298c:	fb00 f303 	mul.w	r3, r0, r3
 8002990:	4413      	add	r3, r2
 8002992:	3360      	adds	r3, #96	; 0x60
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f004 fe37 	bl	800760c <HAL_HCD_HC_NotifyURBChange_Callback>
 800299e:	bf00      	nop
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HCD_RXQLVL_IRQHandler>:
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b08a      	sub	sp, #40	; 0x28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	623b      	str	r3, [r7, #32]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	0c5b      	lsrs	r3, r3, #17
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d004      	beq.n	80029ec <HCD_RXQLVL_IRQHandler+0x46>
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	f000 80a9 	beq.w	8002b3c <HCD_RXQLVL_IRQHandler+0x196>
 80029ea:	e0aa      	b.n	8002b42 <HCD_RXQLVL_IRQHandler+0x19c>
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80a6 	beq.w	8002b40 <HCD_RXQLVL_IRQHandler+0x19a>
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3344      	adds	r3, #68	; 0x44
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 809b 	beq.w	8002b40 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3350      	adds	r3, #80	; 0x50
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	441a      	add	r2, r3
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	202c      	movs	r0, #44	; 0x2c
 8002a24:	fb00 f303 	mul.w	r3, r0, r3
 8002a28:	440b      	add	r3, r1
 8002a2a:	334c      	adds	r3, #76	; 0x4c
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d87a      	bhi.n	8002b28 <HCD_RXQLVL_IRQHandler+0x182>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3344      	adds	r3, #68	; 0x44
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f001 fe92 	bl	8004774 <USB_ReadPacket>
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3344      	adds	r3, #68	; 0x44
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	441a      	add	r2, r3
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	202c      	movs	r0, #44	; 0x2c
 8002a6a:	fb00 f303 	mul.w	r3, r0, r3
 8002a6e:	440b      	add	r3, r1
 8002a70:	3344      	adds	r3, #68	; 0x44
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3350      	adds	r3, #80	; 0x50
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	441a      	add	r2, r3
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	202c      	movs	r0, #44	; 0x2c
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	440b      	add	r3, r1
 8002a94:	3350      	adds	r3, #80	; 0x50
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	0cdb      	lsrs	r3, r3, #19
 8002aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3340      	adds	r3, #64	; 0x40
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d13c      	bne.n	8002b40 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d039      	beq.n	8002b40 <HCD_RXQLVL_IRQHandler+0x19a>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3354      	adds	r3, #84	; 0x54
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f083 0301 	eor.w	r3, r3, #1
 8002b12:	b2d8      	uxtb	r0, r3
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3354      	adds	r3, #84	; 0x54
 8002b22:	4602      	mov	r2, r0
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e00b      	b.n	8002b40 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3360      	adds	r3, #96	; 0x60
 8002b36:	2204      	movs	r2, #4
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e001      	b.n	8002b40 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <HCD_RXQLVL_IRQHandler+0x19c>
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3728      	adds	r7, #40	; 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HCD_Port_IRQHandler>:
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d10b      	bne.n	8002b9a <HCD_Port_IRQHandler+0x50>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d102      	bne.n	8002b92 <HCD_Port_IRQHandler+0x48>
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f004 fd21 	bl	80075d4 <HAL_HCD_Connect_Callback>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d132      	bne.n	8002c0a <HCD_Port_IRQHandler+0xc0>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f043 0308 	orr.w	r3, r3, #8
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d126      	bne.n	8002c04 <HCD_Port_IRQHandler+0xba>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d113      	bne.n	8002be6 <HCD_Port_IRQHandler+0x9c>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bc8:	d106      	bne.n	8002bd8 <HCD_Port_IRQHandler+0x8e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2102      	movs	r1, #2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 ff3d 	bl	8004a50 <USB_InitFSLSPClkSel>
 8002bd6:	e011      	b.n	8002bfc <HCD_Port_IRQHandler+0xb2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 ff36 	bl	8004a50 <USB_InitFSLSPClkSel>
 8002be4:	e00a      	b.n	8002bfc <HCD_Port_IRQHandler+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d106      	bne.n	8002bfc <HCD_Port_IRQHandler+0xb2>
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bfa:	6053      	str	r3, [r2, #4]
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f004 fd13 	bl	8007628 <HAL_HCD_PortEnabled_Callback>
 8002c02:	e002      	b.n	8002c0a <HCD_Port_IRQHandler+0xc0>
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f004 fd1d 	bl	8007644 <HAL_HCD_PortDisabled_Callback>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d103      	bne.n	8002c1c <HCD_Port_IRQHandler+0xd2>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f043 0320 	orr.w	r3, r3, #32
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_I2C_Init>:
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Init+0x12>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e12b      	b.n	8002e9a <HAL_I2C_Init+0x26a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_I2C_Init+0x2c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd fd6c 	bl	8000734 <HAL_I2C_MspInit>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f001 fa20 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a81      	ldr	r2, [pc, #516]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d807      	bhi.n	8002cb4 <HAL_I2C_Init+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_I2C_Init+0x278>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a7d      	ldr	r2, [pc, #500]	; (8002eac <HAL_I2C_Init+0x27c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x9a>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0e7      	b.n	8002e9a <HAL_I2C_Init+0x26a>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a78      	ldr	r2, [pc, #480]	; (8002eb0 <HAL_I2C_Init+0x280>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <HAL_I2C_Init+0xd4>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e009      	b.n	8002d18 <HAL_I2C_Init+0xe8>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_I2C_Init+0x284>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	495c      	ldr	r1, [pc, #368]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d819      	bhi.n	8002d6c <HAL_I2C_Init+0x13c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e59      	subs	r1, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_I2C_Init+0x138>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e59      	subs	r1, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d66:	e051      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e04f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_I2C_Init+0x168>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_I2C_Init+0x18e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x196>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10e      	bne.n	8002dec <HAL_I2C_Init+0x1bc>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e58      	subs	r0, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	440b      	add	r3, r1
 8002ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6809      	ldr	r1, [r1, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6911      	ldr	r1, [r2, #16]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e98:	2300      	movs	r3, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	003d08ff 	.word	0x003d08ff
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_I2S_Init>:
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_I2S_Init+0x12>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e128      	b.n	800311c <HAL_I2S_Init+0x264>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_I2S_Init+0x32>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a90      	ldr	r2, [pc, #576]	; (8003124 <HAL_I2S_Init+0x26c>)
 8002ee2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fd fc9d 	bl	8000824 <HAL_I2S_MspInit>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f00:	f023 030f 	bic.w	r3, r3, #15
 8002f04:	61d3      	str	r3, [r2, #28]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	621a      	str	r2, [r3, #32]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d060      	beq.n	8002fd8 <HAL_I2S_Init+0x120>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <HAL_I2S_Init+0x6c>
 8002f1e:	2310      	movs	r3, #16
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	e001      	b.n	8002f28 <HAL_I2S_Init+0x70>
 8002f24:	2320      	movs	r3, #32
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d802      	bhi.n	8002f36 <HAL_I2S_Init+0x7e>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	2001      	movs	r0, #1
 8002f38:	f001 f9c4 	bl	80042c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f46:	d125      	bne.n	8002f94 <HAL_I2S_Init+0xdc>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <HAL_I2S_Init+0xba>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	3305      	adds	r3, #5
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e01f      	b.n	8002fb2 <HAL_I2S_Init+0xfa>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	461a      	mov	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	3305      	adds	r3, #5
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e00e      	b.n	8002fb2 <HAL_I2S_Init+0xfa>
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	3305      	adds	r3, #5
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4a5c      	ldr	r2, [pc, #368]	; (8003128 <HAL_I2S_Init+0x270>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	08db      	lsrs	r3, r3, #3
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e003      	b.n	8002fe0 <HAL_I2S_Init+0x128>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d902      	bls.n	8002fec <HAL_I2S_Init+0x134>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	2bff      	cmp	r3, #255	; 0xff
 8002fea:	d907      	bls.n	8002ffc <HAL_I2S_Init+0x144>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e08f      	b.n	800311c <HAL_I2S_Init+0x264>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	ea42 0103 	orr.w	r1, r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	430a      	orrs	r2, r1
 800300e:	621a      	str	r2, [r3, #32]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800301a:	f023 030f 	bic.w	r3, r3, #15
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6851      	ldr	r1, [r2, #4]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68d2      	ldr	r2, [r2, #12]
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6992      	ldr	r2, [r2, #24]
 8003032:	430a      	orrs	r2, r1
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303e:	61da      	str	r2, [r3, #28]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d161      	bne.n	800310c <HAL_I2S_Init+0x254>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a38      	ldr	r2, [pc, #224]	; (800312c <HAL_I2S_Init+0x274>)
 800304c:	635a      	str	r2, [r3, #52]	; 0x34
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a37      	ldr	r2, [pc, #220]	; (8003130 <HAL_I2S_Init+0x278>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_I2S_Init+0x1a4>
 8003058:	4b36      	ldr	r3, [pc, #216]	; (8003134 <HAL_I2S_Init+0x27c>)
 800305a:	e001      	b.n	8003060 <HAL_I2S_Init+0x1a8>
 800305c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	4932      	ldr	r1, [pc, #200]	; (8003130 <HAL_I2S_Init+0x278>)
 8003068:	428a      	cmp	r2, r1
 800306a:	d101      	bne.n	8003070 <HAL_I2S_Init+0x1b8>
 800306c:	4a31      	ldr	r2, [pc, #196]	; (8003134 <HAL_I2S_Init+0x27c>)
 800306e:	e001      	b.n	8003074 <HAL_I2S_Init+0x1bc>
 8003070:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003074:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003078:	f023 030f 	bic.w	r3, r3, #15
 800307c:	61d3      	str	r3, [r2, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <HAL_I2S_Init+0x278>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_I2S_Init+0x1d4>
 8003088:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <HAL_I2S_Init+0x27c>)
 800308a:	e001      	b.n	8003090 <HAL_I2S_Init+0x1d8>
 800308c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003090:	2202      	movs	r2, #2
 8003092:	621a      	str	r2, [r3, #32]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a25      	ldr	r2, [pc, #148]	; (8003130 <HAL_I2S_Init+0x278>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_I2S_Init+0x1ea>
 800309e:	4b25      	ldr	r3, [pc, #148]	; (8003134 <HAL_I2S_Init+0x27c>)
 80030a0:	e001      	b.n	80030a6 <HAL_I2S_Init+0x1ee>
 80030a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	817b      	strh	r3, [r7, #10]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b2:	d003      	beq.n	80030bc <HAL_I2S_Init+0x204>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <HAL_I2S_Init+0x20c>
 80030bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	e001      	b.n	80030c8 <HAL_I2S_Init+0x210>
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	4313      	orrs	r3, r2
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4313      	orrs	r3, r2
 80030de:	b29a      	uxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	897b      	ldrh	r3, [r7, #10]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <HAL_I2S_Init+0x278>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d101      	bne.n	8003104 <HAL_I2S_Init+0x24c>
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <HAL_I2S_Init+0x27c>)
 8003102:	e001      	b.n	8003108 <HAL_I2S_Init+0x250>
 8003104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003108:	897a      	ldrh	r2, [r7, #10]
 800310a:	61da      	str	r2, [r3, #28]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800311a:	2300      	movs	r3, #0
 800311c:	4618      	mov	r0, r3
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	0800322f 	.word	0x0800322f
 8003128:	cccccccd 	.word	0xcccccccd
 800312c:	08003345 	.word	0x08003345
 8003130:	40003800 	.word	0x40003800
 8003134:	40003400 	.word	0x40003400

08003138 <HAL_I2S_TxCpltCallback>:
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_I2S_RxCpltCallback>:
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_I2S_ErrorCallback>:
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <I2S_Transmit_IT>:
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c9a      	adds	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10e      	bne.n	80031c8 <I2S_Transmit_IT+0x54>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ffb8 	bl	8003138 <HAL_I2S_TxCpltCallback>
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2S_Receive_IT>:
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	b292      	uxth	r2, r2
 80031e4:	801a      	strh	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	1c9a      	adds	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	865a      	strh	r2, [r3, #50]	; 0x32
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10e      	bne.n	8003226 <I2S_Receive_IT+0x56>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff93 	bl	800314c <HAL_I2S_RxCpltCallback>
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <I2S_IRQHandler>:
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b04      	cmp	r3, #4
 8003248:	d13a      	bne.n	80032c0 <I2S_IRQHandler+0x92>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d109      	bne.n	8003268 <I2S_IRQHandler+0x3a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d102      	bne.n	8003268 <I2S_IRQHandler+0x3a>
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffb4 	bl	80031d0 <I2S_Receive_IT>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d126      	bne.n	80032c0 <I2S_IRQHandler+0x92>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b20      	cmp	r3, #32
 800327e:	d11f      	bne.n	80032c0 <I2S_IRQHandler+0x92>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f043 0202 	orr.w	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ff50 	bl	8003160 <HAL_I2S_ErrorCallback>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d136      	bne.n	800333a <I2S_IRQHandler+0x10c>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d109      	bne.n	80032ea <I2S_IRQHandler+0xbc>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b80      	cmp	r3, #128	; 0x80
 80032e2:	d102      	bne.n	80032ea <I2S_IRQHandler+0xbc>
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff45 	bl	8003174 <I2S_Transmit_IT>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d122      	bne.n	800333a <I2S_IRQHandler+0x10c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d11b      	bne.n	800333a <I2S_IRQHandler+0x10c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	645a      	str	r2, [r3, #68]	; 0x44
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff13 	bl	8003160 <HAL_I2S_ErrorCallback>
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_I2SEx_FullDuplex_IRQHandler>:
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a92      	ldr	r2, [pc, #584]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800335e:	4b92      	ldr	r3, [pc, #584]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003360:	e001      	b.n	8003366 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a8b      	ldr	r2, [pc, #556]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800337c:	4b8a      	ldr	r3, [pc, #552]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800337e:	e001      	b.n	8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003390:	d004      	beq.n	800339c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 8099 	bne.w	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d107      	bne.n	80033b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f925 	bl	8003600 <I2SEx_TxISR_I2S>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d107      	bne.n	80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9c8 	bl	8003760 <I2SEx_RxISR_I2SExt>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d13a      	bne.n	8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d035      	beq.n	8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a6e      	ldr	r2, [pc, #440]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033ee:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033f0:	e001      	b.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4969      	ldr	r1, [pc, #420]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033fe:	428b      	cmp	r3, r1
 8003400:	d101      	bne.n	8003406 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003402:	4b69      	ldr	r3, [pc, #420]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003404:	e001      	b.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f043 0202 	orr.w	r2, r3, #2
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fe88 	bl	8003160 <HAL_I2S_ErrorCallback>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b08      	cmp	r3, #8
 8003458:	f040 80c3 	bne.w	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80bd 	beq.w	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a49      	ldr	r2, [pc, #292]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003482:	4b49      	ldr	r3, [pc, #292]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003484:	e001      	b.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4944      	ldr	r1, [pc, #272]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003492:	428b      	cmp	r3, r1
 8003494:	d101      	bne.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003496:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003498:	e001      	b.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800349a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	2300      	movs	r3, #0
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f043 0204 	orr.w	r2, r3, #4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fe4a 	bl	8003160 <HAL_I2S_ErrorCallback>
 80034cc:	e089      	b.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d107      	bne.n	80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f8be 	bl	8003664 <I2SEx_TxISR_I2SExt>
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d107      	bne.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8fd 	bl	80036fc <I2SEx_RxISR_I2S>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d12f      	bne.n	800356c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d02a      	beq.n	800356c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003532:	e001      	b.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4919      	ldr	r1, [pc, #100]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003540:	428b      	cmp	r3, r1
 8003542:	d101      	bne.n	8003548 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003546:	e001      	b.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003548:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f043 0202 	orr.w	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fdfa 	bl	8003160 <HAL_I2S_ErrorCallback>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b08      	cmp	r3, #8
 8003574:	d136      	bne.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d031      	beq.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800358c:	e001      	b.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800358e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4902      	ldr	r1, [pc, #8]	; (80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800359a:	428b      	cmp	r3, r1
 800359c:	d106      	bne.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800359e:	4b02      	ldr	r3, [pc, #8]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a0:	e006      	b.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80035a2:	bf00      	nop
 80035a4:	40003800 	.word	0x40003800
 80035a8:	40003400 	.word	0x40003400
 80035ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	f043 0204 	orr.w	r2, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fdc0 	bl	8003160 <HAL_I2S_ErrorCallback>
 80035e0:	e000      	b.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_I2SEx_TxRxCpltCallback>:
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <I2SEx_TxISR_I2S>:
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c99      	adds	r1, r3, #2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6251      	str	r1, [r2, #36]	; 0x24
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d113      	bne.n	800365a <I2SEx_TxISR_I2S+0x5a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <I2SEx_TxISR_I2S+0x5a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ffc9 	bl	80035ec <HAL_I2SEx_TxRxCpltCallback>
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <I2SEx_TxISR_I2SExt>:
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c99      	adds	r1, r3, #2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6251      	str	r1, [r2, #36]	; 0x24
 8003676:	8819      	ldrh	r1, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1d      	ldr	r2, [pc, #116]	; (80036f4 <I2SEx_TxISR_I2SExt+0x90>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <I2SEx_TxISR_I2SExt+0x22>
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <I2SEx_TxISR_I2SExt+0x94>)
 8003684:	e001      	b.n	800368a <I2SEx_TxISR_I2SExt+0x26>
 8003686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368a:	460a      	mov	r2, r1
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d121      	bne.n	80036ea <I2SEx_TxISR_I2SExt+0x86>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <I2SEx_TxISR_I2SExt+0x90>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <I2SEx_TxISR_I2SExt+0x50>
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <I2SEx_TxISR_I2SExt+0x94>)
 80036b2:	e001      	b.n	80036b8 <I2SEx_TxISR_I2SExt+0x54>
 80036b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	490d      	ldr	r1, [pc, #52]	; (80036f4 <I2SEx_TxISR_I2SExt+0x90>)
 80036c0:	428b      	cmp	r3, r1
 80036c2:	d101      	bne.n	80036c8 <I2SEx_TxISR_I2SExt+0x64>
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <I2SEx_TxISR_I2SExt+0x94>)
 80036c6:	e001      	b.n	80036cc <I2SEx_TxISR_I2SExt+0x68>
 80036c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <I2SEx_TxISR_I2SExt+0x86>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff81 	bl	80035ec <HAL_I2SEx_TxRxCpltCallback>
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40003800 	.word	0x40003800
 80036f8:	40003400 	.word	0x40003400

080036fc <I2SEx_RxISR_I2S>:
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68d8      	ldr	r0, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	1c99      	adds	r1, r3, #2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003714:	b282      	uxth	r2, r0
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	865a      	strh	r2, [r3, #50]	; 0x32
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d113      	bne.n	8003758 <I2SEx_RxISR_I2S+0x5c>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <I2SEx_RxISR_I2S+0x5c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ff4a 	bl	80035ec <HAL_I2SEx_TxRxCpltCallback>
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2SEx_RxISR_I2SExt>:
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a20      	ldr	r2, [pc, #128]	; (80037f0 <I2SEx_RxISR_I2SExt+0x90>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <I2SEx_RxISR_I2SExt+0x16>
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <I2SEx_RxISR_I2SExt+0x94>)
 8003774:	e001      	b.n	800377a <I2SEx_RxISR_I2SExt+0x1a>
 8003776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377a:	68d8      	ldr	r0, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	1c99      	adds	r1, r3, #2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003786:	b282      	uxth	r2, r0
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	865a      	strh	r2, [r3, #50]	; 0x32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d121      	bne.n	80037e6 <I2SEx_RxISR_I2SExt+0x86>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <I2SEx_RxISR_I2SExt+0x90>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <I2SEx_RxISR_I2SExt+0x50>
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <I2SEx_RxISR_I2SExt+0x94>)
 80037ae:	e001      	b.n	80037b4 <I2SEx_RxISR_I2SExt+0x54>
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	490d      	ldr	r1, [pc, #52]	; (80037f0 <I2SEx_RxISR_I2SExt+0x90>)
 80037bc:	428b      	cmp	r3, r1
 80037be:	d101      	bne.n	80037c4 <I2SEx_RxISR_I2SExt+0x64>
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <I2SEx_RxISR_I2SExt+0x94>)
 80037c2:	e001      	b.n	80037c8 <I2SEx_RxISR_I2SExt+0x68>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <I2SEx_RxISR_I2SExt+0x86>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff03 	bl	80035ec <HAL_I2SEx_TxRxCpltCallback>
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40003800 	.word	0x40003800
 80037f4:	40003400 	.word	0x40003400

080037f8 <HAL_RCC_OscConfig>:
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x12>
 8003806:	2301      	movs	r3, #1
 8003808:	e267      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d075      	beq.n	8003902 <HAL_RCC_OscConfig+0x10a>
 8003816:	4b88      	ldr	r3, [pc, #544]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00c      	beq.n	800383c <HAL_RCC_OscConfig+0x44>
 8003822:	4b85      	ldr	r3, [pc, #532]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b08      	cmp	r3, #8
 800382c:	d112      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
 800382e:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800383a:	d10b      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
 800383c:	4b7e      	ldr	r3, [pc, #504]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05b      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d157      	bne.n	8003900 <HAL_RCC_OscConfig+0x108>
 8003850:	2301      	movs	r3, #1
 8003852:	e242      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d106      	bne.n	800386c <HAL_RCC_OscConfig+0x74>
 800385e:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a75      	ldr	r2, [pc, #468]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e01d      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x98>
 8003876:	4b70      	ldr	r3, [pc, #448]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6f      	ldr	r2, [pc, #444]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a6c      	ldr	r2, [pc, #432]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 8003890:	4b69      	ldr	r3, [pc, #420]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a68      	ldr	r2, [pc, #416]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a65      	ldr	r2, [pc, #404]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_OscConfig+0xe0>
 80038b0:	f7fd fa8a 	bl	8000dc8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xd2>
 80038b8:	f7fd fa86 	bl	8000dc8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xd2>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e207      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 80038ca:	4b5b      	ldr	r3, [pc, #364]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0xc0>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
 80038d8:	f7fd fa76 	bl	8000dc8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xfa>
 80038e0:	f7fd fa72 	bl	8000dc8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xfa>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e1f3      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 80038f2:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0xe8>
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
 8003900:	bf00      	nop
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d063      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1de>
 800390e:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_RCC_OscConfig+0x13a>
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b08      	cmp	r3, #8
 8003924:	d11c      	bne.n	8003960 <HAL_RCC_OscConfig+0x168>
 8003926:	4b44      	ldr	r3, [pc, #272]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d116      	bne.n	8003960 <HAL_RCC_OscConfig+0x168>
 8003932:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_RCC_OscConfig+0x152>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d001      	beq.n	800394a <HAL_RCC_OscConfig+0x152>
 8003946:	2301      	movs	r3, #1
 8003948:	e1c7      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4937      	ldr	r1, [pc, #220]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]
 800395e:	e03a      	b.n	80039d6 <HAL_RCC_OscConfig+0x1de>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_OscConfig+0x1b2>
 8003968:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <HAL_RCC_OscConfig+0x244>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	f7fd fa2b 	bl	8000dc8 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x190>
 8003976:	f7fd fa27 	bl	8000dc8 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x190>
 8003984:	2303      	movs	r3, #3
 8003986:	e1a8      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x17e>
 8003994:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4925      	ldr	r1, [pc, #148]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
 80039a8:	e015      	b.n	80039d6 <HAL_RCC_OscConfig+0x1de>
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <HAL_RCC_OscConfig+0x244>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f7fd fa0a 	bl	8000dc8 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x1d2>
 80039b8:	f7fd fa06 	bl	8000dc8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x1d2>
 80039c6:	2303      	movs	r3, #3
 80039c8:	e187      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x1c0>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d036      	beq.n	8003a50 <HAL_RCC_OscConfig+0x258>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_RCC_OscConfig+0x220>
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <HAL_RCC_OscConfig+0x248>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f7fd f9ea 	bl	8000dc8 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
 80039f8:	f7fd f9e6 	bl	8000dc8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x212>
 8003a06:	2303      	movs	r3, #3
 8003a08:	e167      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x200>
 8003a16:	e01b      	b.n	8003a50 <HAL_RCC_OscConfig+0x258>
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_RCC_OscConfig+0x248>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f7fd f9d3 	bl	8000dc8 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]
 8003a24:	e00e      	b.n	8003a44 <HAL_RCC_OscConfig+0x24c>
 8003a26:	f7fd f9cf 	bl	8000dc8 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d907      	bls.n	8003a44 <HAL_RCC_OscConfig+0x24c>
 8003a34:	2303      	movs	r3, #3
 8003a36:	e150      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	42470000 	.word	0x42470000
 8003a40:	42470e80 	.word	0x42470e80
 8003a44:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ea      	bne.n	8003a26 <HAL_RCC_OscConfig+0x22e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8097 	beq.w	8003b8c <HAL_RCC_OscConfig+0x394>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	75fb      	strb	r3, [r7, #23]
 8003a62:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_RCC_OscConfig+0x296>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	4b7d      	ldr	r3, [pc, #500]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	4a7c      	ldr	r2, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7e:	4b7a      	ldr	r3, [pc, #488]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
 8003a8e:	4b77      	ldr	r3, [pc, #476]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d118      	bne.n	8003acc <HAL_RCC_OscConfig+0x2d4>
 8003a9a:	4b74      	ldr	r3, [pc, #464]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a73      	ldr	r2, [pc, #460]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	f7fd f98f 	bl	8000dc8 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2c8>
 8003aae:	f7fd f98b 	bl	8000dc8 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x2c8>
 8003abc:	2303      	movs	r3, #3
 8003abe:	e10c      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003ac0:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x2b6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x2ea>
 8003ad4:	4b64      	ldr	r3, [pc, #400]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	4a63      	ldr	r2, [pc, #396]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae0:	e01c      	b.n	8003b1c <HAL_RCC_OscConfig+0x324>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x30c>
 8003aea:	4b5f      	ldr	r3, [pc, #380]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a5e      	ldr	r2, [pc, #376]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003af0:	f043 0304 	orr.w	r3, r3, #4
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70
 8003af6:	4b5c      	ldr	r3, [pc, #368]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a5b      	ldr	r2, [pc, #364]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
 8003b02:	e00b      	b.n	8003b1c <HAL_RCC_OscConfig+0x324>
 8003b04:	4b58      	ldr	r3, [pc, #352]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a57      	ldr	r2, [pc, #348]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	4b55      	ldr	r3, [pc, #340]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a54      	ldr	r2, [pc, #336]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f023 0304 	bic.w	r3, r3, #4
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d015      	beq.n	8003b50 <HAL_RCC_OscConfig+0x358>
 8003b24:	f7fd f950 	bl	8000dc8 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x34a>
 8003b2c:	f7fd f94c 	bl	8000dc8 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x34a>
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0cb      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003b42:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0ee      	beq.n	8003b2c <HAL_RCC_OscConfig+0x334>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x382>
 8003b50:	f7fd f93a 	bl	8000dc8 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b58:	f7fd f936 	bl	8000dc8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0b5      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003b6e:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ee      	bne.n	8003b58 <HAL_RCC_OscConfig+0x360>
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCC_OscConfig+0x394>
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80a1 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x4e0>
 8003b96:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d05c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x464>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d141      	bne.n	8003c2e <HAL_RCC_OscConfig+0x436>
 8003baa:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f7fd f90a 	bl	8000dc8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x3d2>
 8003bb8:	f7fd f906 	bl	8000dc8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x3d2>
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e087      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003bca:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x3c0>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	019b      	lsls	r3, r3, #6
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	491b      	ldr	r1, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f7fd f8df 	bl	8000dc8 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x428>
 8003c0e:	f7fd f8db 	bl	8000dc8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x428>
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e05c      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x416>
 8003c2c:	e054      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	f7fd f8c8 	bl	8000dc8 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x456>
 8003c3c:	f7fd f8c4 	bl	8000dc8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x456>
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e045      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x444>
 8003c5a:	e03d      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_OscConfig+0x47c>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e038      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	42470060 	.word	0x42470060
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x4ec>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d028      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d121      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d11a      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003caa:	0192      	lsls	r2, r2, #6
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d111      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_RCC_ClockConfig>:
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x14>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0cc      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
 8003cfc:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d90c      	bls.n	8003d24 <HAL_RCC_ClockConfig+0x3c>
 8003d0a:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	4b63      	ldr	r3, [pc, #396]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x3c>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0b8      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d020      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x8a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x60>
 8003d3c:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a58      	ldr	r2, [pc, #352]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d46:	6093      	str	r3, [r2, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x78>
 8003d54:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a52      	ldr	r2, [pc, #328]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d5e:	6093      	str	r3, [r2, #8]
 8003d60:	4b50      	ldr	r3, [pc, #320]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	494d      	ldr	r1, [pc, #308]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d044      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x120>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xae>
 8003d86:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d119      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e07f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_ClockConfig+0xbe>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xce>
 8003da6:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e06f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
 8003db6:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e067      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
 8003dc6:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4934      	ldr	r1, [pc, #208]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	608b      	str	r3, [r1, #8]
 8003dd8:	f7fc fff6 	bl	8000dc8 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
 8003de0:	f7fc fff2 	bl	8000dc8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
 8003df2:	2303      	movs	r3, #3
 8003df4:	e04f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
 8003df6:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 020c 	and.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d1eb      	bne.n	8003de0 <HAL_RCC_ClockConfig+0xf8>
 8003e08:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d20c      	bcs.n	8003e30 <HAL_RCC_ClockConfig+0x148>
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x148>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e032      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x166>
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4916      	ldr	r1, [pc, #88]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x186>
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	490e      	ldr	r1, [pc, #56]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
 8003e6e:	f000 f821 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8003e72:	4602      	mov	r2, r0
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	490a      	ldr	r1, [pc, #40]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	5ccb      	ldrb	r3, [r1, r3]
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	4a09      	ldr	r2, [pc, #36]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc ff56 	bl	8000d40 <HAL_InitTick>
 8003e94:	2300      	movs	r3, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023c00 	.word	0x40023c00
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	08007ce4 	.word	0x08007ce4
 8003eac:	20000000 	.word	0x20000000
 8003eb0:	20000004 	.word	0x20000004

08003eb4 <HAL_RCC_GetSysClockFreq>:
 8003eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb8:	b094      	sub	sp, #80	; 0x50
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec8:	2300      	movs	r3, #0
 8003eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ecc:	4b79      	ldr	r3, [pc, #484]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	f200 80e1 	bhi.w	80040a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d003      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ee6:	e0db      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ee8:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eec:	e0db      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1f2>
 8003eee:	4b73      	ldr	r3, [pc, #460]	; (80040bc <HAL_RCC_GetSysClockFreq+0x208>)
 8003ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ef2:	e0d8      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1f2>
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
 8003efe:	4b6d      	ldr	r3, [pc, #436]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d063      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x11e>
 8003f0a:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	2200      	movs	r2, #0
 8003f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f1e:	2300      	movs	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
 8003f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	0159      	lsls	r1, r3, #5
 8003f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f38:	0150      	lsls	r0, r2, #5
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4621      	mov	r1, r4
 8003f40:	1a51      	subs	r1, r2, r1
 8003f42:	6139      	str	r1, [r7, #16]
 8003f44:	4629      	mov	r1, r5
 8003f46:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f58:	4659      	mov	r1, fp
 8003f5a:	018b      	lsls	r3, r1, #6
 8003f5c:	4651      	mov	r1, sl
 8003f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f62:	4651      	mov	r1, sl
 8003f64:	018a      	lsls	r2, r1, #6
 8003f66:	4651      	mov	r1, sl
 8003f68:	ebb2 0801 	subs.w	r8, r2, r1
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f86:	4690      	mov	r8, r2
 8003f88:	4699      	mov	r9, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	eb18 0303 	adds.w	r3, r8, r3
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	462b      	mov	r3, r5
 8003f94:	eb49 0303 	adc.w	r3, r9, r3
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	024b      	lsls	r3, r1, #9
 8003faa:	4621      	mov	r1, r4
 8003fac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	024a      	lsls	r2, r1, #9
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fba:	2200      	movs	r2, #0
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fc4:	f7fc f900 	bl	80001c8 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd0:	e058      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x1d0>
 8003fd2:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	4611      	mov	r1, r2
 8003fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fec:	4642      	mov	r2, r8
 8003fee:	464b      	mov	r3, r9
 8003ff0:	f04f 0000 	mov.w	r0, #0
 8003ff4:	f04f 0100 	mov.w	r1, #0
 8003ff8:	0159      	lsls	r1, r3, #5
 8003ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ffe:	0150      	lsls	r0, r2, #5
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4641      	mov	r1, r8
 8004006:	ebb2 0a01 	subs.w	sl, r2, r1
 800400a:	4649      	mov	r1, r9
 800400c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800401c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004024:	ebb2 040a 	subs.w	r4, r2, sl
 8004028:	eb63 050b 	sbc.w	r5, r3, fp
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	00eb      	lsls	r3, r5, #3
 8004036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800403a:	00e2      	lsls	r2, r4, #3
 800403c:	4614      	mov	r4, r2
 800403e:	461d      	mov	r5, r3
 8004040:	4643      	mov	r3, r8
 8004042:	18e3      	adds	r3, r4, r3
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	464b      	mov	r3, r9
 8004048:	eb45 0303 	adc.w	r3, r5, r3
 800404c:	607b      	str	r3, [r7, #4]
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800405a:	4629      	mov	r1, r5
 800405c:	028b      	lsls	r3, r1, #10
 800405e:	4621      	mov	r1, r4
 8004060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004064:	4621      	mov	r1, r4
 8004066:	028a      	lsls	r2, r1, #10
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406e:	2200      	movs	r2, #0
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	61fa      	str	r2, [r7, #28]
 8004074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004078:	f7fc f8a6 	bl	80001c8 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4613      	mov	r3, r2
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	3301      	adds	r3, #1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	643b      	str	r3, [r7, #64]	; 0x40
 8004094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	64bb      	str	r3, [r7, #72]	; 0x48
 800409e:	e002      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1f2>
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a4:	bf00      	nop
 80040a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a8:	4618      	mov	r0, r3
 80040aa:	3750      	adds	r7, #80	; 0x50
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	00f42400 	.word	0x00f42400
 80040bc:	007a1200 	.word	0x007a1200

080040c0 <HAL_RCC_GetHCLKFreq>:
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000000 	.word	0x20000000

080040d8 <HAL_RCC_GetPCLK1Freq>:
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
 80040dc:	f7ff fff0 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	0a9b      	lsrs	r3, r3, #10
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4903      	ldr	r1, [pc, #12]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40023800 	.word	0x40023800
 80040fc:	08007cf4 	.word	0x08007cf4

08004100 <HAL_RCCEx_PeriphCLKConfig>:
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d035      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004128:	4b62      	ldr	r3, [pc, #392]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	f7fc fe4b 	bl	8000dc8 <HAL_GetTick>
 8004132:	6178      	str	r0, [r7, #20]
 8004134:	e008      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004136:	f7fc fe47 	bl	8000dc8 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004144:	2303      	movs	r3, #3
 8004146:	e0b0      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004148:	4b5b      	ldr	r3, [pc, #364]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	019a      	lsls	r2, r3, #6
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	071b      	lsls	r3, r3, #28
 8004160:	4955      	ldr	r1, [pc, #340]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8004168:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	f7fc fe2b 	bl	8000dc8 <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]
 8004174:	e008      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004176:	f7fc fe27 	bl	8000dc8 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004184:	2303      	movs	r3, #3
 8004186:	e090      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004188:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8083 	beq.w	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	4a43      	ldr	r2, [pc, #268]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b0:	6413      	str	r3, [r2, #64]	; 0x40
 80041b2:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a3e      	ldr	r2, [pc, #248]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	f7fc fdfd 	bl	8000dc8 <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]
 80041d0:	e008      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80041d2:	f7fc fdf9 	bl	8000dc8 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80041e0:	2303      	movs	r3, #3
 80041e2:	e062      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041e4:	4b35      	ldr	r3, [pc, #212]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02f      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	d028      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800420e:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d114      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004236:	f7fc fdc7 	bl	8000dc8 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]
 800423c:	e00a      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800423e:	f7fc fdc3 	bl	8000dc8 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	; 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004250:	2303      	movs	r3, #3
 8004252:	e02a      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ee      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426c:	d10d      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800426e:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	490d      	ldr	r1, [pc, #52]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]
 8004288:	e005      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004290:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004294:	6093      	str	r3, [r2, #8]
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a2:	4905      	ldr	r1, [pc, #20]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	670b      	str	r3, [r1, #112]	; 0x70
 80042a8:	2300      	movs	r3, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	42470068 	.word	0x42470068
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40007000 	.word	0x40007000
 80042c0:	42470e40 	.word	0x42470e40

080042c4 <HAL_RCCEx_GetPeriphCLKFreq>:
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d13e      	bne.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d12f      	bne.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e02f      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80042fe:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800430a:	d108      	bne.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004314:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	e007      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800431e:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004326:	4a15      	ldr	r2, [pc, #84]	; (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004348:	0f1b      	lsrs	r3, r3, #28
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e002      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4618      	mov	r0, r3
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	00bb8000 	.word	0x00bb8000
 8004378:	007a1200 	.word	0x007a1200
 800437c:	00f42400 	.word	0x00f42400

08004380 <HAL_SPI_Init>:
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_SPI_Init+0x12>
 800438e:	2301      	movs	r3, #1
 8004390:	e07b      	b.n	800448a <HAL_SPI_Init+0x10a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d108      	bne.n	80043ac <HAL_SPI_Init+0x2c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a2:	d009      	beq.n	80043b8 <HAL_SPI_Init+0x38>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	61da      	str	r2, [r3, #28]
 80043aa:	e005      	b.n	80043b8 <HAL_SPI_Init+0x38>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	615a      	str	r2, [r3, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_SPI_Init+0x58>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fc fb74 	bl	8000ac0 <HAL_SPI_MspInit>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	ea42 0103 	orr.w	r1, r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f003 0104 	and.w	r1, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0210 	and.w	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	61da      	str	r2, [r3, #28]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004488:	2300      	movs	r3, #0
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <USB_CoreInit>:
 8004492:	b084      	sub	sp, #16
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	f107 001c 	add.w	r0, r7, #28
 80044a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d122      	bne.n	80044f0 <USB_CoreInit+0x5e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	60d3      	str	r3, [r2, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d105      	bne.n	80044e4 <USB_CoreInit+0x52>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60da      	str	r2, [r3, #12]
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f9bf 	bl	8004868 <USB_CoreReset>
 80044ea:	4603      	mov	r3, r0
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	e01a      	b.n	8004526 <USB_CoreInit+0x94>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f9b3 	bl	8004868 <USB_CoreReset>
 8004502:	4603      	mov	r3, r0
 8004504:	73fb      	strb	r3, [r7, #15]
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <USB_CoreInit+0x88>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
 8004518:	e005      	b.n	8004526 <USB_CoreInit+0x94>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	639a      	str	r2, [r3, #56]	; 0x38
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	2b01      	cmp	r3, #1
 800452a:	d10b      	bne.n	8004544 <USB_CoreInit+0xb2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f043 0206 	orr.w	r2, r3, #6
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004550:	b004      	add	sp, #16
 8004552:	4770      	bx	lr

08004554 <USB_EnableGlobalInt>:
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f043 0201 	orr.w	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	2300      	movs	r3, #0
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <USB_DisableGlobalInt>:
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 0201 	bic.w	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	2300      	movs	r3, #0
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <USB_SetCurrentMode>:
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d115      	bne.n	80045e6 <USB_SetCurrentMode+0x4e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	2001      	movs	r0, #1
 80045c8:	f7fc fc0a 	bl	8000de0 <HAL_Delay>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3301      	adds	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f939 	bl	800484a <USB_GetMode>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d01e      	beq.n	800461c <USB_SetCurrentMode+0x84>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b31      	cmp	r3, #49	; 0x31
 80045e2:	d9f0      	bls.n	80045c6 <USB_SetCurrentMode+0x2e>
 80045e4:	e01a      	b.n	800461c <USB_SetCurrentMode+0x84>
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d115      	bne.n	8004618 <USB_SetCurrentMode+0x80>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]
 80045f8:	2001      	movs	r0, #1
 80045fa:	f7fc fbf1 	bl	8000de0 <HAL_Delay>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3301      	adds	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f920 	bl	800484a <USB_GetMode>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <USB_SetCurrentMode+0x84>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b31      	cmp	r3, #49	; 0x31
 8004614:	d9f0      	bls.n	80045f8 <USB_SetCurrentMode+0x60>
 8004616:	e001      	b.n	800461c <USB_SetCurrentMode+0x84>
 8004618:	2301      	movs	r3, #1
 800461a:	e005      	b.n	8004628 <USB_SetCurrentMode+0x90>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b32      	cmp	r3, #50	; 0x32
 8004620:	d101      	bne.n	8004626 <USB_SetCurrentMode+0x8e>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <USB_SetCurrentMode+0x90>
 8004626:	2300      	movs	r3, #0
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <USB_FlushTxFifo>:
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a13      	ldr	r2, [pc, #76]	; (8004694 <USB_FlushTxFifo+0x64>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <USB_FlushTxFifo+0x20>
 800464c:	2303      	movs	r3, #3
 800464e:	e01b      	b.n	8004688 <USB_FlushTxFifo+0x58>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	daf2      	bge.n	800463e <USB_FlushTxFifo+0xe>
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	019b      	lsls	r3, r3, #6
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	611a      	str	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <USB_FlushTxFifo+0x64>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <USB_FlushTxFifo+0x4a>
 8004676:	2303      	movs	r3, #3
 8004678:	e006      	b.n	8004688 <USB_FlushTxFifo+0x58>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b20      	cmp	r3, #32
 8004684:	d0f0      	beq.n	8004668 <USB_FlushTxFifo+0x38>
 8004686:	2300      	movs	r3, #0
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	00030d40 	.word	0x00030d40

08004698 <USB_FlushRxFifo>:
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a11      	ldr	r2, [pc, #68]	; (80046f4 <USB_FlushRxFifo+0x5c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <USB_FlushRxFifo+0x1e>
 80046b2:	2303      	movs	r3, #3
 80046b4:	e018      	b.n	80046e8 <USB_FlushRxFifo+0x50>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	daf2      	bge.n	80046a4 <USB_FlushRxFifo+0xc>
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2210      	movs	r2, #16
 80046c6:	611a      	str	r2, [r3, #16]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <USB_FlushRxFifo+0x5c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <USB_FlushRxFifo+0x42>
 80046d6:	2303      	movs	r3, #3
 80046d8:	e006      	b.n	80046e8 <USB_FlushRxFifo+0x50>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d0f0      	beq.n	80046c8 <USB_FlushRxFifo+0x30>
 80046e6:	2300      	movs	r3, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	00030d40 	.word	0x00030d40

080046f8 <USB_WritePacket>:
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4611      	mov	r1, r2
 8004704:	461a      	mov	r2, r3
 8004706:	460b      	mov	r3, r1
 8004708:	71fb      	strb	r3, [r7, #7]
 800470a:	4613      	mov	r3, r2
 800470c:	80bb      	strh	r3, [r7, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800471a:	2b00      	cmp	r3, #0
 800471c:	d123      	bne.n	8004766 <USB_WritePacket+0x6e>
 800471e:	88bb      	ldrh	r3, [r7, #4]
 8004720:	3303      	adds	r3, #3
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e018      	b.n	800475e <USB_WritePacket+0x66>
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	031a      	lsls	r2, r3, #12
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4413      	add	r3, r2
 8004734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004738:	461a      	mov	r2, r3
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	3301      	adds	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	3301      	adds	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3301      	adds	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	3301      	adds	r3, #1
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	429a      	cmp	r2, r3
 8004764:	d3e2      	bcc.n	800472c <USB_WritePacket+0x34>
 8004766:	2300      	movs	r3, #0
 8004768:	4618      	mov	r0, r3
 800476a:	3724      	adds	r7, #36	; 0x24
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <USB_ReadPacket>:
 8004774:	b480      	push	{r7}
 8004776:	b08b      	sub	sp, #44	; 0x2c
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	089b      	lsrs	r3, r3, #2
 800478e:	b29b      	uxth	r3, r3
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	83fb      	strh	r3, [r7, #30]
 800479a:	2300      	movs	r3, #0
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	e014      	b.n	80047ca <USB_ReadPacket+0x56>
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	3301      	adds	r3, #1
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	3301      	adds	r3, #1
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	3301      	adds	r3, #1
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	3301      	adds	r3, #1
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	3301      	adds	r3, #1
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d3e6      	bcc.n	80047a0 <USB_ReadPacket+0x2c>
 80047d2:	8bfb      	ldrh	r3, [r7, #30]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01e      	beq.n	8004816 <USB_ReadPacket+0xa2>
 80047d8:	2300      	movs	r3, #0
 80047da:	623b      	str	r3, [r7, #32]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e2:	461a      	mov	r2, r3
 80047e4:	f107 0310 	add.w	r3, r7, #16
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	3301      	adds	r3, #1
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	3301      	adds	r3, #1
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	8bfb      	ldrh	r3, [r7, #30]
 800480c:	3b01      	subs	r3, #1
 800480e:	83fb      	strh	r3, [r7, #30]
 8004810:	8bfb      	ldrh	r3, [r7, #30]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1ea      	bne.n	80047ec <USB_ReadPacket+0x78>
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	4618      	mov	r0, r3
 800481a:	372c      	adds	r7, #44	; 0x2c
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <USB_ReadInterrupts>:
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4013      	ands	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <USB_GetMode>:
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <USB_CoreReset>:
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3301      	adds	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a13      	ldr	r2, [pc, #76]	; (80048cc <USB_CoreReset+0x64>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <USB_CoreReset+0x1e>
 8004882:	2303      	movs	r3, #3
 8004884:	e01b      	b.n	80048be <USB_CoreReset+0x56>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	daf2      	bge.n	8004874 <USB_CoreReset+0xc>
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f043 0201 	orr.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3301      	adds	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a09      	ldr	r2, [pc, #36]	; (80048cc <USB_CoreReset+0x64>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <USB_CoreReset+0x48>
 80048ac:	2303      	movs	r3, #3
 80048ae:	e006      	b.n	80048be <USB_CoreReset+0x56>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d0f0      	beq.n	800489e <USB_CoreReset+0x36>
 80048bc:	2300      	movs	r3, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	00030d40 	.word	0x00030d40

080048d0 <USB_HostInit>:
 80048d0:	b084      	sub	sp, #16
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80048e2:	2300      	movs	r3, #0
 80048e4:	75fb      	strb	r3, [r7, #23]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048f0:	461a      	mov	r2, r3
 80048f2:	2300      	movs	r3, #0
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d018      	beq.n	8004958 <USB_HostInit+0x88>
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10a      	bne.n	8004942 <USB_HostInit+0x72>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800493a:	f043 0304 	orr.w	r3, r3, #4
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e014      	b.n	800496c <USB_HostInit+0x9c>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004950:	f023 0304 	bic.w	r3, r3, #4
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e009      	b.n	800496c <USB_HostInit+0x9c>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004966:	f023 0304 	bic.w	r3, r3, #4
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	2110      	movs	r1, #16
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fe5e 	bl	8004630 <USB_FlushTxFifo>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <USB_HostInit+0xae>
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fe8a 	bl	8004698 <USB_FlushRxFifo>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <USB_HostInit+0xbe>
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	e015      	b.n	80049c0 <USB_HostInit+0xf0>
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a0:	461a      	mov	r2, r3
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295
 80049a6:	6093      	str	r3, [r2, #8]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	461a      	mov	r2, r3
 80049b6:	2300      	movs	r3, #0
 80049b8:	60d3      	str	r3, [r2, #12]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3301      	adds	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d3e5      	bcc.n	8004994 <USB_HostInit+0xc4>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	619a      	str	r2, [r3, #24]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	615a      	str	r2, [r3, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <USB_HostInit+0x12a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <USB_HostInit+0x16c>)
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <USB_HostInit+0x170>)
 80049f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80049f8:	e009      	b.n	8004a0e <USB_HostInit+0x13e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <USB_HostInit+0x174>)
 8004a04:	629a      	str	r2, [r3, #40]	; 0x28
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <USB_HostInit+0x178>)
 8004a0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <USB_HostInit+0x150>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f043 0210 	orr.w	r2, r3, #16
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	619a      	str	r2, [r3, #24]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699a      	ldr	r2, [r3, #24]
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <USB_HostInit+0x17c>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6193      	str	r3, [r2, #24]
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a38:	b004      	add	sp, #16
 8004a3a:	4770      	bx	lr
 8004a3c:	01000200 	.word	0x01000200
 8004a40:	00e00300 	.word	0x00e00300
 8004a44:	00600080 	.word	0x00600080
 8004a48:	004000e0 	.word	0x004000e0
 8004a4c:	a3200008 	.word	0xa3200008

08004a50 <USB_InitFSLSPClkSel>:
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a6e:	f023 0303 	bic.w	r3, r3, #3
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <USB_InitFSLSPClkSel+0x52>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a9e:	6053      	str	r3, [r2, #4]
 8004aa0:	e009      	b.n	8004ab6 <USB_InitFSLSPClkSel+0x66>
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d106      	bne.n	8004ab6 <USB_InitFSLSPClkSel+0x66>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ab4:	6053      	str	r3, [r2, #4]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <USB_ResetPort>:
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	2064      	movs	r0, #100	; 0x64
 8004af6:	f7fc f973 	bl	8000de0 <HAL_Delay>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	200a      	movs	r0, #10
 8004b0a:	f7fc f969 	bl	8000de0 <HAL_Delay>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <USB_DriveVbus>:
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <USB_DriveVbus+0x44>
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d106      	bne.n	8004b5c <USB_DriveVbus+0x44>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b66:	d109      	bne.n	8004b7c <USB_DriveVbus+0x64>
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <USB_DriveVbus+0x64>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <USB_GetHostSpeed>:
 8004b8a:	b480      	push	{r7}
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	0c5b      	lsrs	r3, r3, #17
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <USB_GetCurrentFrame>:
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <USB_HC_Init>:
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	70fb      	strb	r3, [r7, #3]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	70bb      	strb	r3, [r7, #2]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	707b      	strb	r3, [r7, #1]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c10:	6093      	str	r3, [r2, #8]
 8004c12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d87e      	bhi.n	8004d18 <USB_HC_Init+0x13c>
 8004c1a:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <USB_HC_Init+0x44>)
 8004c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004cdb 	.word	0x08004cdb
 8004c28:	08004c31 	.word	0x08004c31
 8004c2c:	08004c9d 	.word	0x08004c9d
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c42:	60d3      	str	r3, [r2, #12]
 8004c44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	da10      	bge.n	8004c6e <USB_HC_Init+0x92>
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6a:	60d3      	str	r3, [r2, #12]
 8004c6c:	e057      	b.n	8004d1e <USB_HC_Init+0x142>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d051      	beq.n	8004d1e <USB_HC_Init+0x142>
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c98:	60d3      	str	r3, [r2, #12]
 8004c9a:	e040      	b.n	8004d1e <USB_HC_Init+0x142>
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f240 639d 	movw	r3, #1693	; 0x69d
 8004cae:	60d3      	str	r3, [r2, #12]
 8004cb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	da34      	bge.n	8004d22 <USB_HC_Init+0x146>
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	0151      	lsls	r1, r2, #5
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	440a      	add	r2, r1
 8004cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd6:	60d3      	str	r3, [r2, #12]
 8004cd8:	e023      	b.n	8004d22 <USB_HC_Init+0x146>
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f240 2325 	movw	r3, #549	; 0x225
 8004cec:	60d3      	str	r3, [r2, #12]
 8004cee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da17      	bge.n	8004d26 <USB_HC_Init+0x14a>
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d10:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d14:	60d3      	str	r3, [r2, #12]
 8004d16:	e006      	b.n	8004d26 <USB_HC_Init+0x14a>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e004      	b.n	8004d28 <USB_HC_Init+0x14c>
 8004d1e:	bf00      	nop
 8004d20:	e002      	b.n	8004d28 <USB_HC_Init+0x14c>
 8004d22:	bf00      	nop
 8004d24:	e000      	b.n	8004d28 <USB_HC_Init+0x14c>
 8004d26:	bf00      	nop
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d42:	f043 0302 	orr.w	r3, r3, #2
 8004d46:	60d3      	str	r3, [r2, #12]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	6939      	ldr	r1, [r7, #16]
 8004d5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d62:	4313      	orrs	r3, r2
 8004d64:	618b      	str	r3, [r1, #24]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	619a      	str	r2, [r3, #24]
 8004d72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	da03      	bge.n	8004d82 <USB_HC_Init+0x1a6>
 8004d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e001      	b.n	8004d86 <USB_HC_Init+0x1aa>
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff feff 	bl	8004b8a <USB_GetHostSpeed>
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d106      	bne.n	8004da4 <USB_HC_Init+0x1c8>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d003      	beq.n	8004da4 <USB_HC_Init+0x1c8>
 8004d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e001      	b.n	8004da8 <USB_HC_Init+0x1cc>
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	787b      	ldrb	r3, [r7, #1]
 8004daa:	059b      	lsls	r3, r3, #22
 8004dac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
 8004db0:	78bb      	ldrb	r3, [r7, #2]
 8004db2:	02db      	lsls	r3, r3, #11
 8004db4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8004db8:	431a      	orrs	r2, r3
 8004dba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004dbe:	049b      	lsls	r3, r3, #18
 8004dc0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	0159      	lsls	r1, r3, #5
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	440b      	add	r3, r1
 8004dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dde:	4619      	mov	r1, r3
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]
 8004de6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d003      	beq.n	8004df6 <USB_HC_Init+0x21a>
 8004dee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10f      	bne.n	8004e16 <USB_HC_Init+0x23a>
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	7ffb      	ldrb	r3, [r7, #31]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3720      	adds	r7, #32
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <USB_HC_StartXfer>:
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	; 0x30
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	71fb      	strb	r3, [r7, #7]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	623b      	str	r3, [r7, #32]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e3c:	837b      	strh	r3, [r7, #26]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d02d      	beq.n	8004ea6 <USB_HC_StartXfer+0x86>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	791b      	ldrb	r3, [r3, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d129      	bne.n	8004ea6 <USB_HC_StartXfer+0x86>
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d117      	bne.n	8004e88 <USB_HC_StartXfer+0x68>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	79db      	ldrb	r3, [r3, #7]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <USB_HC_StartXfer+0x48>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	79db      	ldrb	r3, [r3, #7]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d10f      	bne.n	8004e88 <USB_HC_StartXfer+0x68>
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	6a3a      	ldr	r2, [r7, #32]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	60d3      	str	r3, [r2, #12]
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10b      	bne.n	8004ea6 <USB_HC_StartXfer+0x86>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	795b      	ldrb	r3, [r3, #5]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d107      	bne.n	8004ea6 <USB_HC_StartXfer+0x86>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fa0f 	bl	80052c0 <USB_DoPing>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e0f8      	b.n	8005098 <USB_HC_StartXfer+0x278>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <USB_HC_StartXfer+0xc0>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	8912      	ldrh	r2, [r2, #8]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	8912      	ldrh	r2, [r2, #8]
 8004ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ec4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ec6:	8b7b      	ldrh	r3, [r7, #26]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d90b      	bls.n	8004ee4 <USB_HC_StartXfer+0xc4>
 8004ecc:	8b7b      	ldrh	r3, [r7, #26]
 8004ece:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	8912      	ldrh	r2, [r2, #8]
 8004ed6:	fb03 f202 	mul.w	r2, r3, r2
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	611a      	str	r2, [r3, #16]
 8004ede:	e001      	b.n	8004ee4 <USB_HC_StartXfer+0xc4>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	78db      	ldrb	r3, [r3, #3]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <USB_HC_StartXfer+0xdc>
 8004eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	8912      	ldrh	r2, [r2, #8]
 8004ef2:	fb03 f202 	mul.w	r2, r3, r2
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	611a      	str	r2, [r3, #16]
 8004efa:	e003      	b.n	8004f04 <USB_HC_StartXfer+0xe4>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	611a      	str	r2, [r3, #16]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8004f0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f0e:	04d9      	lsls	r1, r3, #19
 8004f10:	4b63      	ldr	r3, [pc, #396]	; (80050a0 <USB_HC_StartXfer+0x280>)
 8004f12:	400b      	ands	r3, r1
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	7a9b      	ldrb	r3, [r3, #10]
 8004f1a:	075b      	lsls	r3, r3, #29
 8004f1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004f20:	69f9      	ldr	r1, [r7, #28]
 8004f22:	0148      	lsls	r0, r1, #5
 8004f24:	6a39      	ldr	r1, [r7, #32]
 8004f26:	4401      	add	r1, r0
 8004f28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	610b      	str	r3, [r1, #16]
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <USB_HC_StartXfer+0x12a>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	68d9      	ldr	r1, [r3, #12]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	460a      	mov	r2, r1
 8004f48:	615a      	str	r2, [r3, #20]
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	767b      	strb	r3, [r7, #25]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	6a3a      	ldr	r2, [r7, #32]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	7e7b      	ldrb	r3, [r7, #25]
 8004f92:	075b      	lsls	r3, r3, #29
 8004f94:	69f9      	ldr	r1, [r7, #28]
 8004f96:	0148      	lsls	r0, r1, #5
 8004f98:	6a39      	ldr	r1, [r7, #32]
 8004f9a:	4401      	add	r1, r0
 8004f9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	78db      	ldrb	r3, [r3, #3]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <USB_HC_StartXfer+0x1ae>
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	e003      	b.n	8004fd6 <USB_HC_StartXfer+0x1b6>
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fea:	461a      	mov	r2, r3
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <USB_HC_StartXfer+0x1da>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e04e      	b.n	8005098 <USB_HC_StartXfer+0x278>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	78db      	ldrb	r3, [r3, #3]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d149      	bne.n	8005096 <USB_HC_StartXfer+0x276>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d045      	beq.n	8005096 <USB_HC_StartXfer+0x276>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	79db      	ldrb	r3, [r3, #7]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d830      	bhi.n	8005074 <USB_HC_StartXfer+0x254>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <USB_HC_StartXfer+0x1f8>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	08005029 	.word	0x08005029
 800501c:	0800504d 	.word	0x0800504d
 8005020:	08005029 	.word	0x08005029
 8005024:	0800504d 	.word	0x0800504d
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	3303      	adds	r3, #3
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	82fb      	strh	r3, [r7, #22]
 8005032:	8afa      	ldrh	r2, [r7, #22]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	b29b      	uxth	r3, r3
 800503a:	429a      	cmp	r2, r3
 800503c:	d91c      	bls.n	8005078 <USB_HC_StartXfer+0x258>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	619a      	str	r2, [r3, #24]
 800504a:	e015      	b.n	8005078 <USB_HC_StartXfer+0x258>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	3303      	adds	r3, #3
 8005052:	089b      	lsrs	r3, r3, #2
 8005054:	82fb      	strh	r3, [r7, #22]
 8005056:	8afa      	ldrh	r2, [r7, #22]
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	b29b      	uxth	r3, r3
 8005062:	429a      	cmp	r2, r3
 8005064:	d90a      	bls.n	800507c <USB_HC_StartXfer+0x25c>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	619a      	str	r2, [r3, #24]
 8005072:	e003      	b.n	800507c <USB_HC_StartXfer+0x25c>
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <USB_HC_StartXfer+0x25e>
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <USB_HC_StartXfer+0x25e>
 800507c:	bf00      	nop
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	68d9      	ldr	r1, [r3, #12]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	785a      	ldrb	r2, [r3, #1]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	b29b      	uxth	r3, r3
 800508c:	2000      	movs	r0, #0
 800508e:	9000      	str	r0, [sp, #0]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff fb31 	bl	80046f8 <USB_WritePacket>
 8005096:	2300      	movs	r3, #0
 8005098:	4618      	mov	r0, r3
 800509a:	3728      	adds	r7, #40	; 0x28
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	1ff80000 	.word	0x1ff80000

080050a4 <USB_HC_ReadInterrupt>:
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_HC_Halt>:
 80050c6:	b480      	push	{r7}
 80050c8:	b089      	sub	sp, #36	; 0x24
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	0c9b      	lsrs	r3, r3, #18
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	0fdb      	lsrs	r3, r3, #31
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b20      	cmp	r3, #32
 8005114:	d104      	bne.n	8005120 <USB_HC_Halt+0x5a>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <USB_HC_Halt+0x5a>
 800511c:	2300      	movs	r3, #0
 800511e:	e0c8      	b.n	80052b2 <USB_HC_Halt+0x1ec>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <USB_HC_Halt+0x66>
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d163      	bne.n	80051f4 <USB_HC_Halt+0x12e>
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	440a      	add	r2, r1
 8005142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 80ab 	bne.w	80052b0 <USB_HC_Halt+0x1ea>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d133      	bne.n	80051ce <USB_HC_Halt+0x108>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	440a      	add	r2, r1
 800517c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	440a      	add	r2, r1
 800519c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3301      	adds	r3, #1
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051b2:	d81d      	bhi.n	80051f0 <USB_HC_Halt+0x12a>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ca:	d0ec      	beq.n	80051a6 <USB_HC_Halt+0xe0>
 80051cc:	e070      	b.n	80052b0 <USB_HC_Halt+0x1ea>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	e05f      	b.n	80052b0 <USB_HC_Halt+0x1ea>
 80051f0:	bf00      	nop
 80051f2:	e05d      	b.n	80052b0 <USB_HC_Halt+0x1ea>
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	440a      	add	r2, r1
 800520a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d133      	bne.n	800528c <USB_HC_Halt+0x1c6>
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	440a      	add	r2, r1
 800523a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	440a      	add	r2, r1
 800525a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005270:	d81d      	bhi.n	80052ae <USB_HC_Halt+0x1e8>
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005288:	d0ec      	beq.n	8005264 <USB_HC_Halt+0x19e>
 800528a:	e011      	b.n	80052b0 <USB_HC_Halt+0x1ea>
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e000      	b.n	80052b0 <USB_HC_Halt+0x1ea>
 80052ae:	bf00      	nop
 80052b0:	2300      	movs	r3, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	3724      	adds	r7, #36	; 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <USB_DoPing>:
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	2301      	movs	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	04da      	lsls	r2, r3, #19
 80052dc:	4b15      	ldr	r3, [pc, #84]	; (8005334 <USB_DoPing+0x74>)
 80052de:	4013      	ands	r3, r2
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f0:	6113      	str	r3, [r2, #16]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531e:	461a      	mov	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	2300      	movs	r3, #0
 8005326:	4618      	mov	r0, r3
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	1ff80000 	.word	0x1ff80000

08005338 <USB_StopHost>:
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	2300      	movs	r3, #0
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff f912 	bl	8004576 <USB_DisableGlobalInt>
 8005352:	2110      	movs	r1, #16
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff f96b 	bl	8004630 <USB_FlushTxFifo>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <USB_StopHost+0x2c>
 8005360:	2301      	movs	r3, #1
 8005362:	77fb      	strb	r3, [r7, #31]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff f997 	bl	8004698 <USB_FlushRxFifo>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <USB_StopHost+0x3c>
 8005370:	2301      	movs	r3, #1
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	e01f      	b.n	80053ba <USB_StopHost+0x82>
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	461a      	mov	r2, r3
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	3301      	adds	r3, #1
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b0f      	cmp	r3, #15
 80053be:	d9dc      	bls.n	800537a <USB_StopHost+0x42>
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	e034      	b.n	8005430 <USB_StopHost+0xf8>
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fa:	461a      	mov	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800540c:	d80c      	bhi.n	8005428 <USB_StopHost+0xf0>
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005424:	d0ec      	beq.n	8005400 <USB_StopHost+0xc8>
 8005426:	e000      	b.n	800542a <USB_StopHost+0xf2>
 8005428:	bf00      	nop
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	3301      	adds	r3, #1
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b0f      	cmp	r3, #15
 8005434:	d9c7      	bls.n	80053c6 <USB_StopHost+0x8e>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800543c:	461a      	mov	r2, r3
 800543e:	f04f 33ff 	mov.w	r3, #4294967295
 8005442:	6153      	str	r3, [r2, #20]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f04f 32ff 	mov.w	r2, #4294967295
 800544a:	615a      	str	r2, [r3, #20]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff f881 	bl	8004554 <USB_EnableGlobalInt>
 8005452:	7ffb      	ldrb	r3, [r7, #31]
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b089      	sub	sp, #36	; 0x24
 8005460:	af04      	add	r7, sp, #16
 8005462:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005464:	2301      	movs	r3, #1
 8005466:	2202      	movs	r2, #2
 8005468:	2102      	movs	r1, #2
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fc66 	bl	8005d3c <USBH_FindInterface>
 8005470:	4603      	mov	r3, r0
 8005472:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2bff      	cmp	r3, #255	; 0xff
 8005478:	d002      	beq.n	8005480 <USBH_CDC_InterfaceInit+0x24>
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d901      	bls.n	8005484 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005480:	2302      	movs	r3, #2
 8005482:	e13d      	b.n	8005700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fc3b 	bl	8005d04 <USBH_SelectInterface>
 800548e:	4603      	mov	r3, r0
 8005490:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005492:	7bbb      	ldrb	r3, [r7, #14]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005498:	2302      	movs	r3, #2
 800549a:	e131      	b.n	8005700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80054a2:	2050      	movs	r0, #80	; 0x50
 80054a4:	f002 fafa 	bl	8007a9c <malloc>
 80054a8:	4603      	mov	r3, r0
 80054aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80054bc:	2302      	movs	r3, #2
 80054be:	e11f      	b.n	8005700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80054c0:	2250      	movs	r2, #80	; 0x50
 80054c2:	2100      	movs	r1, #0
 80054c4:	68b8      	ldr	r0, [r7, #8]
 80054c6:	f002 faf9 	bl	8007abc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	211a      	movs	r1, #26
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	b25b      	sxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da15      	bge.n	800550e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	211a      	movs	r1, #26
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	4413      	add	r3, r2
 80054ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054f2:	781a      	ldrb	r2, [r3, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	211a      	movs	r1, #26
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	4413      	add	r3, r2
 8005504:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f001 ff2c 	bl	8007372 <USBH_AllocPipe>
 800551a:	4603      	mov	r3, r0
 800551c:	461a      	mov	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	7819      	ldrb	r1, [r3, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	7858      	ldrb	r0, [r3, #1]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	8952      	ldrh	r2, [r2, #10]
 800553a:	9202      	str	r2, [sp, #8]
 800553c:	2203      	movs	r2, #3
 800553e:	9201      	str	r2, [sp, #4]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	4623      	mov	r3, r4
 8005544:	4602      	mov	r2, r0
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 fee4 	bl	8007314 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f002 f9f3 	bl	8007940 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800555a:	2300      	movs	r3, #0
 800555c:	2200      	movs	r2, #0
 800555e:	210a      	movs	r1, #10
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fbeb 	bl	8005d3c <USBH_FindInterface>
 8005566:	4603      	mov	r3, r0
 8005568:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2bff      	cmp	r3, #255	; 0xff
 800556e:	d002      	beq.n	8005576 <USBH_CDC_InterfaceInit+0x11a>
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d901      	bls.n	800557a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005576:	2302      	movs	r3, #2
 8005578:	e0c2      	b.n	8005700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	211a      	movs	r1, #26
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	b25b      	sxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	da16      	bge.n	80055c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	211a      	movs	r1, #26
 8005598:	fb01 f303 	mul.w	r3, r1, r3
 800559c:	4413      	add	r3, r2
 800559e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	211a      	movs	r1, #26
 80055ae:	fb01 f303 	mul.w	r3, r1, r3
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	835a      	strh	r2, [r3, #26]
 80055be:	e015      	b.n	80055ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	211a      	movs	r1, #26
 80055c6:	fb01 f303 	mul.w	r3, r1, r3
 80055ca:	4413      	add	r3, r2
 80055cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	211a      	movs	r1, #26
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055e6:	881a      	ldrh	r2, [r3, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	211a      	movs	r1, #26
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	da16      	bge.n	8005632 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	211a      	movs	r1, #26
 800560a:	fb01 f303 	mul.w	r3, r1, r3
 800560e:	4413      	add	r3, r2
 8005610:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	211a      	movs	r1, #26
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	4413      	add	r3, r2
 8005626:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	835a      	strh	r2, [r3, #26]
 8005630:	e015      	b.n	800565e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	211a      	movs	r1, #26
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	4413      	add	r3, r2
 800563e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005642:	781a      	ldrb	r2, [r3, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	211a      	movs	r1, #26
 800564e:	fb01 f303 	mul.w	r3, r1, r3
 8005652:	4413      	add	r3, r2
 8005654:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005658:	881a      	ldrh	r2, [r3, #0]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	7b9b      	ldrb	r3, [r3, #14]
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 fe84 	bl	8007372 <USBH_AllocPipe>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	7bdb      	ldrb	r3, [r3, #15]
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 fe7a 	bl	8007372 <USBH_AllocPipe>
 800567e:	4603      	mov	r3, r0
 8005680:	461a      	mov	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	7b59      	ldrb	r1, [r3, #13]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	7b98      	ldrb	r0, [r3, #14]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	8b12      	ldrh	r2, [r2, #24]
 800569e:	9202      	str	r2, [sp, #8]
 80056a0:	2202      	movs	r2, #2
 80056a2:	9201      	str	r2, [sp, #4]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4623      	mov	r3, r4
 80056a8:	4602      	mov	r2, r0
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f001 fe32 	bl	8007314 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	7b19      	ldrb	r1, [r3, #12]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	7bd8      	ldrb	r0, [r3, #15]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	8b52      	ldrh	r2, [r2, #26]
 80056c8:	9202      	str	r2, [sp, #8]
 80056ca:	2202      	movs	r2, #2
 80056cc:	9201      	str	r2, [sp, #4]
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	4623      	mov	r3, r4
 80056d2:	4602      	mov	r2, r0
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 fe1d 	bl	8007314 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	7b5b      	ldrb	r3, [r3, #13]
 80056e6:	2200      	movs	r2, #0
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f002 f928 	bl	8007940 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	7b1b      	ldrb	r3, [r3, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f002 f921 	bl	8007940 <USBH_LL_SetToggle>

  return USBH_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	bd90      	pop	{r4, r7, pc}

08005708 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 fe12 	bl	8007352 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 fe3d 	bl	80073b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7b1b      	ldrb	r3, [r3, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00e      	beq.n	8005766 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	7b1b      	ldrb	r3, [r3, #12]
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 fdff 	bl	8007352 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	7b1b      	ldrb	r3, [r3, #12]
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 fe2a 	bl	80073b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	7b5b      	ldrb	r3, [r3, #13]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00e      	beq.n	800578c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	7b5b      	ldrb	r3, [r3, #13]
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 fdec 	bl	8007352 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	7b5b      	ldrb	r3, [r3, #13]
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 fe17 	bl	80073b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f002 f983 	bl	8007aac <free>
    phost->pActiveClass->pData = 0U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057ac:	2200      	movs	r2, #0
 80057ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3340      	adds	r3, #64	; 0x40
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8b1 	bl	800593a <GetLineCoding>
 80057d8:	4603      	mov	r3, r0
 80057da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80057e8:	2102      	movs	r1, #2
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80057ee:	7afb      	ldrb	r3, [r7, #11]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005800:	2301      	movs	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005818:	2b04      	cmp	r3, #4
 800581a:	d877      	bhi.n	800590c <USBH_CDC_Process+0x114>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <USBH_CDC_Process+0x2c>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005839 	.word	0x08005839
 8005828:	0800583f 	.word	0x0800583f
 800582c:	0800586f 	.word	0x0800586f
 8005830:	080058e3 	.word	0x080058e3
 8005834:	080058f1 	.word	0x080058f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e06d      	b.n	800591a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f897 	bl	8005978 <SetLineCoding>
 800584a:	4603      	mov	r3, r0
 800584c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800584e:	7bbb      	ldrb	r3, [r7, #14]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800585c:	e058      	b.n	8005910 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800585e:	7bbb      	ldrb	r3, [r7, #14]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d055      	beq.n	8005910 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2204      	movs	r2, #4
 8005868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800586c:	e050      	b.n	8005910 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3340      	adds	r3, #64	; 0x40
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f860 	bl	800593a <GetLineCoding>
 800587a:	4603      	mov	r3, r0
 800587c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800587e:	7bbb      	ldrb	r3, [r7, #14]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d126      	bne.n	80058d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005896:	791b      	ldrb	r3, [r3, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d13b      	bne.n	8005914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d133      	bne.n	8005914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d12b      	bne.n	8005914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d124      	bne.n	8005914 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f958 	bl	8005b80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058d0:	e020      	b.n	8005914 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d01d      	beq.n	8005914 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2204      	movs	r2, #4
 80058dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058e0:	e018      	b.n	8005914 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f867 	bl	80059b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f8da 	bl	8005aa2 <CDC_ProcessReception>
      break;
 80058ee:	e014      	b.n	800591a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80058f0:	2100      	movs	r1, #0
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 ffef 	bl	80068d6 <USBH_ClrFeature>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800590a:	e005      	b.n	8005918 <USBH_CDC_Process+0x120>

    default:
      break;
 800590c:	bf00      	nop
 800590e:	e004      	b.n	800591a <USBH_CDC_Process+0x122>
      break;
 8005910:	bf00      	nop
 8005912:	e002      	b.n	800591a <USBH_CDC_Process+0x122>
      break;
 8005914:	bf00      	nop
 8005916:	e000      	b.n	800591a <USBH_CDC_Process+0x122>
      break;
 8005918:	bf00      	nop

  }

  return status;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	22a1      	movs	r2, #161	; 0xa1
 8005948:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2221      	movs	r2, #33	; 0x21
 800594e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2207      	movs	r2, #7
 8005960:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2207      	movs	r2, #7
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fa81 	bl	8006e70 <USBH_CtlReq>
 800596e:	4603      	mov	r3, r0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2221      	movs	r2, #33	; 0x21
 8005986:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2207      	movs	r2, #7
 800599e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2207      	movs	r2, #7
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fa62 	bl	8006e70 <USBH_CtlReq>
 80059ac:	4603      	mov	r3, r0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b086      	sub	sp, #24
 80059ba:	af02      	add	r7, sp, #8
 80059bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d002      	beq.n	80059dc <CDC_ProcessTransmission+0x26>
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d023      	beq.n	8005a22 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80059da:	e05e      	b.n	8005a9a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	8b12      	ldrh	r2, [r2, #24]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d90b      	bls.n	8005a00 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	69d9      	ldr	r1, [r3, #28]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8b1a      	ldrh	r2, [r3, #24]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	7b5b      	ldrb	r3, [r3, #13]
 80059f4:	2001      	movs	r0, #1
 80059f6:	9000      	str	r0, [sp, #0]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fc48 	bl	800728e <USBH_BulkSendData>
 80059fe:	e00b      	b.n	8005a18 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	7b5b      	ldrb	r3, [r3, #13]
 8005a0e:	2001      	movs	r0, #1
 8005a10:	9000      	str	r0, [sp, #0]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 fc3b 	bl	800728e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a20:	e03b      	b.n	8005a9a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	7b5b      	ldrb	r3, [r3, #13]
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 ff5f 	bl	80078ec <USBH_LL_GetURBState>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005a32:	7afb      	ldrb	r3, [r7, #11]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d128      	bne.n	8005a8a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	8b12      	ldrh	r2, [r2, #24]
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d90e      	bls.n	8005a62 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	8b12      	ldrh	r2, [r2, #24]
 8005a4c:	1a9a      	subs	r2, r3, r2
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	8b12      	ldrh	r2, [r2, #24]
 8005a5a:	441a      	add	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	61da      	str	r2, [r3, #28]
 8005a60:	e002      	b.n	8005a68 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a78:	e00e      	b.n	8005a98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f868 	bl	8005b58 <USBH_CDC_TransmitCallback>
      break;
 8005a88:	e006      	b.n	8005a98 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005a8a:	7afb      	ldrb	r3, [r7, #11]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d103      	bne.n	8005a98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a98:	bf00      	nop
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d002      	beq.n	8005ac8 <CDC_ProcessReception+0x26>
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d00e      	beq.n	8005ae4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005ac6:	e043      	b.n	8005b50 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	6a19      	ldr	r1, [r3, #32]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	8b5a      	ldrh	r2, [r3, #26]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	7b1b      	ldrb	r3, [r3, #12]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 fbff 	bl	80072d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2204      	movs	r2, #4
 8005ade:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005ae2:	e035      	b.n	8005b50 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	7b1b      	ldrb	r3, [r3, #12]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 fefe 	bl	80078ec <USBH_LL_GetURBState>
 8005af0:	4603      	mov	r3, r0
 8005af2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005af4:	7cfb      	ldrb	r3, [r7, #19]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d129      	bne.n	8005b4e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	7b1b      	ldrb	r3, [r3, #12]
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fe61 	bl	80077c8 <USBH_LL_GetLastXferSize>
 8005b06:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d016      	beq.n	8005b40 <CDC_ProcessReception+0x9e>
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	8b5b      	ldrh	r3, [r3, #26]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d910      	bls.n	8005b40 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1ad2      	subs	r2, r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6a1a      	ldr	r2, [r3, #32]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	441a      	add	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2203      	movs	r2, #3
 8005b3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b3e:	e006      	b.n	8005b4e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f80f 	bl	8005b6c <USBH_CDC_ReceiveCallback>
      break;
 8005b4e:	bf00      	nop
  }
}
 8005b50:	bf00      	nop
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e029      	b.n	8005c00 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	79fa      	ldrb	r2, [r7, #7]
 8005bb0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f81f 	bl	8005c08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f001 fd31 	bl	8007660 <USBH_LL_Init>

  return USBH_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e009      	b.n	8005c2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	33e0      	adds	r3, #224	; 0xe0
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	2200      	movs	r2, #0
 8005c26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b0f      	cmp	r3, #15
 8005c32:	d9f2      	bls.n	8005c1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e009      	b.n	8005c4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c54:	d3f1      	bcc.n	8005c3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2240      	movs	r2, #64	; 0x40
 8005c7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d016      	beq.n	8005cf2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10e      	bne.n	8005cec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005cd4:	1c59      	adds	r1, r3, #1
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	33de      	adds	r3, #222	; 0xde
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
 8005cea:	e004      	b.n	8005cf6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005cec:	2302      	movs	r3, #2
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e001      	b.n	8005cf6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d204      	bcs.n	8005d2a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005d28:	e001      	b.n	8005d2e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	4608      	mov	r0, r1
 8005d46:	4611      	mov	r1, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	70fb      	strb	r3, [r7, #3]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70bb      	strb	r3, [r7, #2]
 8005d52:	4613      	mov	r3, r2
 8005d54:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005d64:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d66:	e025      	b.n	8005db4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
 8005d6a:	221a      	movs	r2, #26
 8005d6c:	fb02 f303 	mul.w	r3, r2, r3
 8005d70:	3308      	adds	r3, #8
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	3302      	adds	r3, #2
 8005d78:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	795b      	ldrb	r3, [r3, #5]
 8005d7e:	78fa      	ldrb	r2, [r7, #3]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d002      	beq.n	8005d8a <USBH_FindInterface+0x4e>
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	2bff      	cmp	r3, #255	; 0xff
 8005d88:	d111      	bne.n	8005dae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d8e:	78ba      	ldrb	r2, [r7, #2]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d002      	beq.n	8005d9a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d94:	78bb      	ldrb	r3, [r7, #2]
 8005d96:	2bff      	cmp	r3, #255	; 0xff
 8005d98:	d109      	bne.n	8005dae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d9e:	787a      	ldrb	r2, [r7, #1]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d002      	beq.n	8005daa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005da4:	787b      	ldrb	r3, [r7, #1]
 8005da6:	2bff      	cmp	r3, #255	; 0xff
 8005da8:	d101      	bne.n	8005dae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	e006      	b.n	8005dbc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	3301      	adds	r3, #1
 8005db2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d9d6      	bls.n	8005d68 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005dba:	23ff      	movs	r3, #255	; 0xff
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 fc81 	bl	80076d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 fd9a 	bl	8007912 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af04      	add	r7, sp, #16
 8005dee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005df0:	2302      	movs	r3, #2
 8005df2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d102      	bne.n	8005e0a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2203      	movs	r2, #3
 8005e08:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b0b      	cmp	r3, #11
 8005e12:	f200 81be 	bhi.w	8006192 <USBH_Process+0x3aa>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <USBH_Process+0x34>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e4d 	.word	0x08005e4d
 8005e20:	08005e7f 	.word	0x08005e7f
 8005e24:	08005ee7 	.word	0x08005ee7
 8005e28:	0800612d 	.word	0x0800612d
 8005e2c:	08006193 	.word	0x08006193
 8005e30:	08005f8b 	.word	0x08005f8b
 8005e34:	080060d3 	.word	0x080060d3
 8005e38:	08005fc1 	.word	0x08005fc1
 8005e3c:	08005fe1 	.word	0x08005fe1
 8005e40:	08006001 	.word	0x08006001
 8005e44:	08006045 	.word	0x08006045
 8005e48:	08006115 	.word	0x08006115
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 819e 	beq.w	8006196 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005e60:	20c8      	movs	r0, #200	; 0xc8
 8005e62:	f001 fd9d 	bl	80079a0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f001 fc93 	bl	8007792 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005e7c:	e18b      	b.n	8006196 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d107      	bne.n	8005e98 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005e96:	e18d      	b.n	80061b4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea2:	d914      	bls.n	8005ece <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005eaa:	3301      	adds	r3, #1
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d903      	bls.n	8005ec6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	220d      	movs	r2, #13
 8005ec2:	701a      	strb	r2, [r3, #0]
      break;
 8005ec4:	e176      	b.n	80061b4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
      break;
 8005ecc:	e172      	b.n	80061b4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ed4:	f103 020a 	add.w	r2, r3, #10
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005ede:	200a      	movs	r0, #10
 8005ee0:	f001 fd5e 	bl	80079a0 <USBH_Delay>
      break;
 8005ee4:	e166      	b.n	80061b4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ef6:	2104      	movs	r1, #4
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005efc:	2064      	movs	r0, #100	; 0x64
 8005efe:	f001 fd4f 	bl	80079a0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fc1e 	bl	8007744 <USBH_LL_GetSpeed>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2205      	movs	r2, #5
 8005f16:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005f18:	2100      	movs	r1, #0
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fa29 	bl	8007372 <USBH_AllocPipe>
 8005f20:	4603      	mov	r3, r0
 8005f22:	461a      	mov	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005f28:	2180      	movs	r1, #128	; 0x80
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f001 fa21 	bl	8007372 <USBH_AllocPipe>
 8005f30:	4603      	mov	r3, r0
 8005f32:	461a      	mov	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	7919      	ldrb	r1, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f4c:	b292      	uxth	r2, r2
 8005f4e:	9202      	str	r2, [sp, #8]
 8005f50:	2200      	movs	r2, #0
 8005f52:	9201      	str	r2, [sp, #4]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	4603      	mov	r3, r0
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 f9da 	bl	8007314 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	7959      	ldrb	r1, [r3, #5]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f74:	b292      	uxth	r2, r2
 8005f76:	9202      	str	r2, [sp, #8]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	9201      	str	r2, [sp, #4]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2200      	movs	r2, #0
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 f9c6 	bl	8007314 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005f88:	e114      	b.n	80061b4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f918 	bl	80061c0 <USBH_HandleEnum>
 8005f90:	4603      	mov	r3, r0
 8005f92:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 80fe 	bne.w	800619a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d103      	bne.n	8005fb8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005fb6:	e0f0      	b.n	800619a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2207      	movs	r2, #7
 8005fbc:	701a      	strb	r2, [r3, #0]
      break;
 8005fbe:	e0ec      	b.n	800619a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80e9 	beq.w	800619e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2208      	movs	r2, #8
 8005fdc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005fde:	e0de      	b.n	800619e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fc2c 	bl	8006848 <USBH_SetCfg>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 80d5 	bne.w	80061a2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2209      	movs	r2, #9
 8005ffc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005ffe:	e0d0      	b.n	80061a2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d016      	beq.n	800603c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800600e:	2101      	movs	r1, #1
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fc3c 	bl	800688e <USBH_SetFeature>
 8006016:	4603      	mov	r3, r0
 8006018:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800601a:	7bbb      	ldrb	r3, [r7, #14]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	220a      	movs	r2, #10
 8006026:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006028:	e0bd      	b.n	80061a6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b03      	cmp	r3, #3
 8006030:	f040 80b9 	bne.w	80061a6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	220a      	movs	r2, #10
 8006038:	701a      	strb	r2, [r3, #0]
      break;
 800603a:	e0b4      	b.n	80061a6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	220a      	movs	r2, #10
 8006040:	701a      	strb	r2, [r3, #0]
      break;
 8006042:	e0b0      	b.n	80061a6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80ad 	beq.w	80061aa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e016      	b.n	800608c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800605e:	7bfa      	ldrb	r2, [r7, #15]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	32de      	adds	r2, #222	; 0xde
 8006064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006068:	791a      	ldrb	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006070:	429a      	cmp	r2, r3
 8006072:	d108      	bne.n	8006086 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006074:	7bfa      	ldrb	r2, [r7, #15]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	32de      	adds	r2, #222	; 0xde
 800607a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006084:	e005      	b.n	8006092 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	3301      	adds	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0e5      	beq.n	800605e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d016      	beq.n	80060ca <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2206      	movs	r2, #6
 80060b2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060ba:	2103      	movs	r1, #3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060c0:	e073      	b.n	80061aa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	220d      	movs	r2, #13
 80060c6:	701a      	strb	r2, [r3, #0]
      break;
 80060c8:	e06f      	b.n	80061aa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	220d      	movs	r2, #13
 80060ce:	701a      	strb	r2, [r3, #0]
      break;
 80060d0:	e06b      	b.n	80061aa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d017      	beq.n	800610c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
 80060e8:	4603      	mov	r3, r0
 80060ea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d103      	bne.n	80060fc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	220b      	movs	r2, #11
 80060f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060fa:	e058      	b.n	80061ae <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d154      	bne.n	80061ae <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	220d      	movs	r2, #13
 8006108:	701a      	strb	r2, [r3, #0]
      break;
 800610a:	e050      	b.n	80061ae <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	220d      	movs	r2, #13
 8006110:	701a      	strb	r2, [r3, #0]
      break;
 8006112:	e04c      	b.n	80061ae <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d049      	beq.n	80061b2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
      }
      break;
 800612a:	e042      	b.n	80061b2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fd67 	bl	8005c08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006168:	2105      	movs	r1, #5
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b01      	cmp	r3, #1
 8006178:	d107      	bne.n	800618a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff fe20 	bl	8005dc8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006188:	e014      	b.n	80061b4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 faa4 	bl	80076d8 <USBH_LL_Start>
      break;
 8006190:	e010      	b.n	80061b4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006192:	bf00      	nop
 8006194:	e00e      	b.n	80061b4 <USBH_Process+0x3cc>
      break;
 8006196:	bf00      	nop
 8006198:	e00c      	b.n	80061b4 <USBH_Process+0x3cc>
      break;
 800619a:	bf00      	nop
 800619c:	e00a      	b.n	80061b4 <USBH_Process+0x3cc>
    break;
 800619e:	bf00      	nop
 80061a0:	e008      	b.n	80061b4 <USBH_Process+0x3cc>
      break;
 80061a2:	bf00      	nop
 80061a4:	e006      	b.n	80061b4 <USBH_Process+0x3cc>
      break;
 80061a6:	bf00      	nop
 80061a8:	e004      	b.n	80061b4 <USBH_Process+0x3cc>
      break;
 80061aa:	bf00      	nop
 80061ac:	e002      	b.n	80061b4 <USBH_Process+0x3cc>
      break;
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <USBH_Process+0x3cc>
      break;
 80061b2:	bf00      	nop
  }
  return USBH_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop

080061c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af04      	add	r7, sp, #16
 80061c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	2b07      	cmp	r3, #7
 80061d6:	f200 81c1 	bhi.w	800655c <USBH_HandleEnum+0x39c>
 80061da:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <USBH_HandleEnum+0x20>)
 80061dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e0:	08006201 	.word	0x08006201
 80061e4:	080062bf 	.word	0x080062bf
 80061e8:	08006329 	.word	0x08006329
 80061ec:	080063b7 	.word	0x080063b7
 80061f0:	08006421 	.word	0x08006421
 80061f4:	08006491 	.word	0x08006491
 80061f8:	080064d7 	.word	0x080064d7
 80061fc:	0800651d 	.word	0x0800651d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006200:	2108      	movs	r1, #8
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa50 	bl	80066a8 <USBH_Get_DevDesc>
 8006208:	4603      	mov	r3, r0
 800620a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d130      	bne.n	8006274 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	7919      	ldrb	r1, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006236:	b292      	uxth	r2, r2
 8006238:	9202      	str	r2, [sp, #8]
 800623a:	2200      	movs	r2, #0
 800623c:	9201      	str	r2, [sp, #4]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	4603      	mov	r3, r0
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 f865 	bl	8007314 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7959      	ldrb	r1, [r3, #5]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800625e:	b292      	uxth	r2, r2
 8006260:	9202      	str	r2, [sp, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	9201      	str	r2, [sp, #4]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4603      	mov	r3, r0
 800626a:	2200      	movs	r2, #0
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 f851 	bl	8007314 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006272:	e175      	b.n	8006560 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	2b03      	cmp	r3, #3
 8006278:	f040 8172 	bne.w	8006560 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006282:	3301      	adds	r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006292:	2b03      	cmp	r3, #3
 8006294:	d903      	bls.n	800629e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	220d      	movs	r2, #13
 800629a:	701a      	strb	r2, [r3, #0]
      break;
 800629c:	e160      	b.n	8006560 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	795b      	ldrb	r3, [r3, #5]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f885 	bl	80073b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 f87f 	bl	80073b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
      break;
 80062bc:	e150      	b.n	8006560 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80062be:	2112      	movs	r1, #18
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f9f1 	bl	80066a8 <USBH_Get_DevDesc>
 80062c6:	4603      	mov	r3, r0
 80062c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d103      	bne.n	80062d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80062d6:	e145      	b.n	8006564 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	f040 8142 	bne.w	8006564 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062e6:	3301      	adds	r3, #1
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d903      	bls.n	8006302 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	220d      	movs	r2, #13
 80062fe:	701a      	strb	r2, [r3, #0]
      break;
 8006300:	e130      	b.n	8006564 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	795b      	ldrb	r3, [r3, #5]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 f853 	bl	80073b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	791b      	ldrb	r3, [r3, #4]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 f84d 	bl	80073b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
      break;
 8006326:	e11d      	b.n	8006564 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006328:	2101      	movs	r1, #1
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa68 	bl	8006800 <USBH_SetAddress>
 8006330:	4603      	mov	r3, r0
 8006332:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d132      	bne.n	80063a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800633a:	2002      	movs	r0, #2
 800633c:	f001 fb30 	bl	80079a0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2203      	movs	r2, #3
 800634c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	7919      	ldrb	r1, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006362:	b292      	uxth	r2, r2
 8006364:	9202      	str	r2, [sp, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	9201      	str	r2, [sp, #4]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	4603      	mov	r3, r0
 800636e:	2280      	movs	r2, #128	; 0x80
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 ffcf 	bl	8007314 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	7959      	ldrb	r1, [r3, #5]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800638a:	b292      	uxth	r2, r2
 800638c:	9202      	str	r2, [sp, #8]
 800638e:	2200      	movs	r2, #0
 8006390:	9201      	str	r2, [sp, #4]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4603      	mov	r3, r0
 8006396:	2200      	movs	r2, #0
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 ffbb 	bl	8007314 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800639e:	e0e3      	b.n	8006568 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	f040 80e0 	bne.w	8006568 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	220d      	movs	r2, #13
 80063ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	705a      	strb	r2, [r3, #1]
      break;
 80063b4:	e0d8      	b.n	8006568 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80063b6:	2109      	movs	r1, #9
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f99d 	bl	80066f8 <USBH_Get_CfgDesc>
 80063be:	4603      	mov	r3, r0
 80063c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2204      	movs	r2, #4
 80063cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063ce:	e0cd      	b.n	800656c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	f040 80ca 	bne.w	800656c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063de:	3301      	adds	r3, #1
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d903      	bls.n	80063fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	220d      	movs	r2, #13
 80063f6:	701a      	strb	r2, [r3, #0]
      break;
 80063f8:	e0b8      	b.n	800656c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	795b      	ldrb	r3, [r3, #5]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 ffd7 	bl	80073b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	791b      	ldrb	r3, [r3, #4]
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 ffd1 	bl	80073b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	701a      	strb	r2, [r3, #0]
      break;
 800641e:	e0a5      	b.n	800656c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f965 	bl	80066f8 <USBH_Get_CfgDesc>
 800642e:	4603      	mov	r3, r0
 8006430:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2205      	movs	r2, #5
 800643c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800643e:	e097      	b.n	8006570 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	2b03      	cmp	r3, #3
 8006444:	f040 8094 	bne.w	8006570 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800644e:	3301      	adds	r3, #1
 8006450:	b2da      	uxtb	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800645e:	2b03      	cmp	r3, #3
 8006460:	d903      	bls.n	800646a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	220d      	movs	r2, #13
 8006466:	701a      	strb	r2, [r3, #0]
      break;
 8006468:	e082      	b.n	8006570 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	795b      	ldrb	r3, [r3, #5]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 ff9f 	bl	80073b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	791b      	ldrb	r3, [r3, #4]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 ff99 	bl	80073b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
      break;
 800648e:	e06f      	b.n	8006570 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006496:	2b00      	cmp	r3, #0
 8006498:	d019      	beq.n	80064ce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80064a6:	23ff      	movs	r3, #255	; 0xff
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f949 	bl	8006740 <USBH_Get_StringDesc>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d103      	bne.n	80064c0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2206      	movs	r2, #6
 80064bc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80064be:	e059      	b.n	8006574 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d156      	bne.n	8006574 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2206      	movs	r2, #6
 80064ca:	705a      	strb	r2, [r3, #1]
      break;
 80064cc:	e052      	b.n	8006574 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2206      	movs	r2, #6
 80064d2:	705a      	strb	r2, [r3, #1]
      break;
 80064d4:	e04e      	b.n	8006574 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d019      	beq.n	8006514 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064ec:	23ff      	movs	r3, #255	; 0xff
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f926 	bl	8006740 <USBH_Get_StringDesc>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2207      	movs	r2, #7
 8006502:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006504:	e038      	b.n	8006578 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d135      	bne.n	8006578 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2207      	movs	r2, #7
 8006510:	705a      	strb	r2, [r3, #1]
      break;
 8006512:	e031      	b.n	8006578 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2207      	movs	r2, #7
 8006518:	705a      	strb	r2, [r3, #1]
      break;
 800651a:	e02d      	b.n	8006578 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006522:	2b00      	cmp	r3, #0
 8006524:	d017      	beq.n	8006556 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006532:	23ff      	movs	r3, #255	; 0xff
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f903 	bl	8006740 <USBH_Get_StringDesc>
 800653a:	4603      	mov	r3, r0
 800653c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006548:	e018      	b.n	800657c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d115      	bne.n	800657c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
      break;
 8006554:	e012      	b.n	800657c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
      break;
 800655a:	e00f      	b.n	800657c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800655c:	bf00      	nop
 800655e:	e00e      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006560:	bf00      	nop
 8006562:	e00c      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006564:	bf00      	nop
 8006566:	e00a      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006568:	bf00      	nop
 800656a:	e008      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 800656c:	bf00      	nop
 800656e:	e006      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006570:	bf00      	nop
 8006572:	e004      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006574:	bf00      	nop
 8006576:	e002      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006578:	bf00      	nop
 800657a:	e000      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 800657c:	bf00      	nop
  }
  return Status;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f804 	bl	80065ca <USBH_HandleSof>
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b0b      	cmp	r3, #11
 80065da:	d10a      	bne.n	80065f2 <USBH_HandleSof+0x28>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
  }
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800660a:	bf00      	nop
}
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006626:	bf00      	nop
}
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 f844 	bl	800770e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	791b      	ldrb	r3, [r3, #4]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fe91 	bl	80073b4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	795b      	ldrb	r3, [r3, #5]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fe8b 	bl	80073b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066c6:	2100      	movs	r1, #0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f864 	bl	8006796 <USBH_GetDescriptor>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f203 3026 	addw	r0, r3, #806	; 0x326
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066e4:	78fa      	ldrb	r2, [r7, #3]
 80066e6:	b292      	uxth	r2, r2
 80066e8:	4619      	mov	r1, r3
 80066ea:	f000 f918 	bl	800691e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	331c      	adds	r3, #28
 8006708:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800670a:	887b      	ldrh	r3, [r7, #2]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006714:	2100      	movs	r1, #0
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f83d 	bl	8006796 <USBH_GetDescriptor>
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d107      	bne.n	8006736 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006726:	887b      	ldrh	r3, [r7, #2]
 8006728:	461a      	mov	r2, r3
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f987 	bl	8006a40 <USBH_ParseCfgDesc>
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	461a      	mov	r2, r3
 800674c:	460b      	mov	r3, r1
 800674e:	72fb      	strb	r3, [r7, #11]
 8006750:	4613      	mov	r3, r2
 8006752:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800675c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006764:	893b      	ldrh	r3, [r7, #8]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	460b      	mov	r3, r1
 800676a:	2100      	movs	r1, #0
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f812 	bl	8006796 <USBH_GetDescriptor>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d107      	bne.n	800678c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006782:	893a      	ldrh	r2, [r7, #8]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fb24 	bl	8006dd4 <USBH_ParseStringDesc>
  }

  return status;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	607b      	str	r3, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	72fb      	strb	r3, [r7, #11]
 80067a4:	4613      	mov	r3, r2
 80067a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	789b      	ldrb	r3, [r3, #2]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d11c      	bne.n	80067ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80067b0:	7afb      	ldrb	r3, [r7, #11]
 80067b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2206      	movs	r2, #6
 80067c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	893a      	ldrh	r2, [r7, #8]
 80067c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80067c8:	893b      	ldrh	r3, [r7, #8]
 80067ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d2:	d104      	bne.n	80067de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f240 4209 	movw	r2, #1033	; 0x409
 80067da:	829a      	strh	r2, [r3, #20]
 80067dc:	e002      	b.n	80067e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8b3a      	ldrh	r2, [r7, #24]
 80067e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80067ea:	8b3b      	ldrh	r3, [r7, #24]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fb3d 	bl	8006e70 <USBH_CtlReq>
 80067f6:	4603      	mov	r3, r0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10f      	bne.n	8006834 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2205      	movs	r2, #5
 800681e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	b29a      	uxth	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006834:	2200      	movs	r2, #0
 8006836:	2100      	movs	r1, #0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fb19 	bl	8006e70 <USBH_CtlReq>
 800683e:	4603      	mov	r3, r0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	789b      	ldrb	r3, [r3, #2]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d10e      	bne.n	800687a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2209      	movs	r2, #9
 8006866:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	887a      	ldrh	r2, [r7, #2]
 800686c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800687a:	2200      	movs	r2, #0
 800687c:	2100      	movs	r1, #0
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 faf6 	bl	8006e70 <USBH_CtlReq>
 8006884:	4603      	mov	r3, r0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	789b      	ldrb	r3, [r3, #2]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d10f      	bne.n	80068c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2203      	movs	r2, #3
 80068ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068c2:	2200      	movs	r2, #0
 80068c4:	2100      	movs	r1, #0
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fad2 	bl	8006e70 <USBH_CtlReq>
 80068cc:	4603      	mov	r3, r0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	789b      	ldrb	r3, [r3, #2]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d10f      	bne.n	800690a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	b29a      	uxth	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800690a:	2200      	movs	r2, #0
 800690c:	2100      	movs	r1, #0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 faae 	bl	8006e70 <USBH_CtlReq>
 8006914:	4603      	mov	r3, r0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	4613      	mov	r3, r2
 800692a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	785a      	ldrb	r2, [r3, #1]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	3302      	adds	r3, #2
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b29a      	uxth	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	3303      	adds	r3, #3
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	b29b      	uxth	r3, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	791a      	ldrb	r2, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	795a      	ldrb	r2, [r3, #5]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	799a      	ldrb	r2, [r3, #6]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	79da      	ldrb	r2, [r3, #7]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	79db      	ldrb	r3, [r3, #7]
 800697c:	2b20      	cmp	r3, #32
 800697e:	dc11      	bgt.n	80069a4 <USBH_ParseDevDesc+0x86>
 8006980:	2b08      	cmp	r3, #8
 8006982:	db16      	blt.n	80069b2 <USBH_ParseDevDesc+0x94>
 8006984:	3b08      	subs	r3, #8
 8006986:	2201      	movs	r2, #1
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf14      	ite	ne
 8006998:	2301      	movne	r3, #1
 800699a:	2300      	moveq	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d102      	bne.n	80069a8 <USBH_ParseDevDesc+0x8a>
 80069a2:	e006      	b.n	80069b2 <USBH_ParseDevDesc+0x94>
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d104      	bne.n	80069b2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	79da      	ldrb	r2, [r3, #7]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	71da      	strb	r2, [r3, #7]
      break;
 80069b0:	e003      	b.n	80069ba <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2240      	movs	r2, #64	; 0x40
 80069b6:	71da      	strb	r2, [r3, #7]
      break;
 80069b8:	bf00      	nop
  }

  if (length > 8U)
 80069ba:	88fb      	ldrh	r3, [r7, #6]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d939      	bls.n	8006a34 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3308      	adds	r3, #8
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	3309      	adds	r3, #9
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4313      	orrs	r3, r2
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	330a      	adds	r3, #10
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	330b      	adds	r3, #11
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	4313      	orrs	r3, r2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	330c      	adds	r3, #12
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	330d      	adds	r3, #13
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	7b9a      	ldrb	r2, [r3, #14]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	7bda      	ldrb	r2, [r3, #15]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	7c1a      	ldrb	r2, [r3, #16]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	7c5a      	ldrb	r2, [r3, #17]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	745a      	strb	r2, [r3, #17]
  }
}
 8006a34:	bf00      	nop
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08c      	sub	sp, #48	; 0x30
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a54:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	785a      	ldrb	r2, [r3, #1]
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	3302      	adds	r3, #2
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	3303      	adds	r3, #3
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	4313      	orrs	r3, r2
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9c:	bf28      	it	cs
 8006a9e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	791a      	ldrb	r2, [r3, #4]
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	795a      	ldrb	r2, [r3, #5]
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	799a      	ldrb	r2, [r3, #6]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	79da      	ldrb	r2, [r3, #7]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	7a1a      	ldrb	r2, [r3, #8]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d002      	beq.n	8006ade <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2209      	movs	r2, #9
 8006adc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	2b09      	cmp	r3, #9
 8006ae2:	f240 809d 	bls.w	8006c20 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006ae6:	2309      	movs	r3, #9
 8006ae8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006aee:	e081      	b.n	8006bf4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006af0:	f107 0316 	add.w	r3, r7, #22
 8006af4:	4619      	mov	r1, r3
 8006af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af8:	f000 f99f 	bl	8006e3a <USBH_GetNextDesc>
 8006afc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d176      	bne.n	8006bf4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b09      	cmp	r3, #9
 8006b0c:	d002      	beq.n	8006b14 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	2209      	movs	r2, #9
 8006b12:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b18:	221a      	movs	r2, #26
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	3308      	adds	r3, #8
 8006b20:	6a3a      	ldr	r2, [r7, #32]
 8006b22:	4413      	add	r3, r2
 8006b24:	3302      	adds	r3, #2
 8006b26:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b2a:	69f8      	ldr	r0, [r7, #28]
 8006b2c:	f000 f87e 	bl	8006c2c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b3a:	e043      	b.n	8006bc4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b3c:	f107 0316 	add.w	r3, r7, #22
 8006b40:	4619      	mov	r1, r3
 8006b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b44:	f000 f979 	bl	8006e3a <USBH_GetNextDesc>
 8006b48:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	2b05      	cmp	r3, #5
 8006b50:	d138      	bne.n	8006bc4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	795b      	ldrb	r3, [r3, #5]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d10f      	bne.n	8006b7a <USBH_ParseCfgDesc+0x13a>
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	799b      	ldrb	r3, [r3, #6]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d10b      	bne.n	8006b7a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	79db      	ldrb	r3, [r3, #7]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10f      	bne.n	8006b8a <USBH_ParseCfgDesc+0x14a>
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b09      	cmp	r3, #9
 8006b70:	d00b      	beq.n	8006b8a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	2209      	movs	r2, #9
 8006b76:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b78:	e007      	b.n	8006b8a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b07      	cmp	r3, #7
 8006b80:	d004      	beq.n	8006b8c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	2207      	movs	r2, #7
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e000      	b.n	8006b8c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b8a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b90:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b94:	3201      	adds	r2, #1
 8006b96:	00d2      	lsls	r2, r2, #3
 8006b98:	211a      	movs	r1, #26
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bac:	69b9      	ldr	r1, [r7, #24]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f86b 	bl	8006c8a <USBH_ParseEPDesc>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006bba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	791b      	ldrb	r3, [r3, #4]
 8006bc8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d204      	bcs.n	8006bda <USBH_ParseCfgDesc+0x19a>
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	885a      	ldrh	r2, [r3, #2]
 8006bd4:	8afb      	ldrh	r3, [r7, #22]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d8b0      	bhi.n	8006b3c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	791b      	ldrb	r3, [r3, #4]
 8006bde:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d201      	bcs.n	8006bea <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e01c      	b.n	8006c24 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bee:	3301      	adds	r3, #1
 8006bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d805      	bhi.n	8006c08 <USBH_ParseCfgDesc+0x1c8>
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	885a      	ldrh	r2, [r3, #2]
 8006c00:	8afb      	ldrh	r3, [r7, #22]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	f63f af74 	bhi.w	8006af0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	791b      	ldrb	r3, [r3, #4]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	bf28      	it	cs
 8006c10:	2302      	movcs	r3, #2
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d201      	bcs.n	8006c20 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e001      	b.n	8006c24 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006c20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3730      	adds	r7, #48	; 0x30
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	785a      	ldrb	r2, [r3, #1]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	789a      	ldrb	r2, [r3, #2]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	78da      	ldrb	r2, [r3, #3]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	791a      	ldrb	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	795a      	ldrb	r2, [r3, #5]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	799a      	ldrb	r2, [r3, #6]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	79da      	ldrb	r2, [r3, #7]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	7a1a      	ldrb	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	721a      	strb	r2, [r3, #8]
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b087      	sub	sp, #28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	781a      	ldrb	r2, [r3, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	785a      	ldrb	r2, [r3, #1]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	789a      	ldrb	r2, [r3, #2]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	78da      	ldrb	r2, [r3, #3]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3305      	adds	r3, #5
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	799a      	ldrb	r2, [r3, #6]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	889b      	ldrh	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	75fb      	strb	r3, [r7, #23]
 8006cea:	e033      	b.n	8006d54 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	889b      	ldrh	r3, [r3, #4]
 8006cf0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cf4:	f023 0307 	bic.w	r3, r3, #7
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	889b      	ldrh	r3, [r3, #4]
 8006d02:	b21a      	sxth	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3304      	adds	r3, #4
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	b299      	uxth	r1, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3305      	adds	r3, #5
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d110      	bne.n	8006d46 <USBH_ParseEPDesc+0xbc>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3304      	adds	r3, #4
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b299      	uxth	r1, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3305      	adds	r3, #5
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b21b      	sxth	r3, r3
 8006d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d42:	b21b      	sxth	r3, r3
 8006d44:	e001      	b.n	8006d4a <USBH_ParseEPDesc+0xc0>
 8006d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	b21b      	sxth	r3, r3
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d116      	bne.n	8006d8c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	78db      	ldrb	r3, [r3, #3]
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d005      	beq.n	8006d76 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	78db      	ldrb	r3, [r3, #3]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d127      	bne.n	8006dc6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	799b      	ldrb	r3, [r3, #6]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <USBH_ParseEPDesc+0xfc>
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	799b      	ldrb	r3, [r3, #6]
 8006d82:	2b10      	cmp	r3, #16
 8006d84:	d91f      	bls.n	8006dc6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006d86:	2303      	movs	r3, #3
 8006d88:	75fb      	strb	r3, [r7, #23]
 8006d8a:	e01c      	b.n	8006dc6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	78db      	ldrb	r3, [r3, #3]
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d10a      	bne.n	8006dae <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	799b      	ldrb	r3, [r3, #6]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <USBH_ParseEPDesc+0x11e>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	799b      	ldrb	r3, [r3, #6]
 8006da4:	2b10      	cmp	r3, #16
 8006da6:	d90e      	bls.n	8006dc6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006da8:	2303      	movs	r3, #3
 8006daa:	75fb      	strb	r3, [r7, #23]
 8006dac:	e00b      	b.n	8006dc6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	78db      	ldrb	r3, [r3, #3]
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d105      	bne.n	8006dc6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	799b      	ldrb	r3, [r3, #6]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d120      	bne.n	8006e2e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	1e9a      	subs	r2, r3, #2
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	bf28      	it	cs
 8006df8:	4613      	movcs	r3, r2
 8006dfa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3302      	adds	r3, #2
 8006e00:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e02:	2300      	movs	r3, #0
 8006e04:	82fb      	strh	r3, [r7, #22]
 8006e06:	e00b      	b.n	8006e20 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e08:	8afb      	ldrh	r3, [r7, #22]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e1a:	8afb      	ldrh	r3, [r7, #22]
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	82fb      	strh	r3, [r7, #22]
 8006e20:	8afa      	ldrh	r2, [r7, #22]
 8006e22:	8abb      	ldrh	r3, [r7, #20]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d3ef      	bcc.n	8006e08 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
  }
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	881a      	ldrh	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4413      	add	r3, r2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4413      	add	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e62:	68fb      	ldr	r3, [r7, #12]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	789b      	ldrb	r3, [r3, #2]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d002      	beq.n	8006e90 <USBH_CtlReq+0x20>
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d00f      	beq.n	8006eae <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006e8e:	e027      	b.n	8006ee0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	88fa      	ldrh	r2, [r7, #6]
 8006e9a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006eac:	e018      	b.n	8006ee0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f81c 	bl	8006eec <USBH_HandleControl>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <USBH_CtlReq+0x54>
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d106      	bne.n	8006ed2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	761a      	strb	r2, [r3, #24]
      break;
 8006ed0:	e005      	b.n	8006ede <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d102      	bne.n	8006ede <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	709a      	strb	r2, [r3, #2]
      break;
 8006ede:	bf00      	nop
  }
  return status;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	7e1b      	ldrb	r3, [r3, #24]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	2b0a      	cmp	r3, #10
 8006f04:	f200 8156 	bhi.w	80071b4 <USBH_HandleControl+0x2c8>
 8006f08:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <USBH_HandleControl+0x24>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	08006f57 	.word	0x08006f57
 8006f18:	08006fc1 	.word	0x08006fc1
 8006f1c:	08006fe7 	.word	0x08006fe7
 8006f20:	0800701f 	.word	0x0800701f
 8006f24:	08007049 	.word	0x08007049
 8006f28:	0800709b 	.word	0x0800709b
 8006f2c:	080070bd 	.word	0x080070bd
 8006f30:	080070f9 	.word	0x080070f9
 8006f34:	0800711f 	.word	0x0800711f
 8006f38:	0800715d 	.word	0x0800715d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f103 0110 	add.w	r1, r3, #16
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	795b      	ldrb	r3, [r3, #5]
 8006f46:	461a      	mov	r2, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f943 	bl	80071d4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2202      	movs	r2, #2
 8006f52:	761a      	strb	r2, [r3, #24]
      break;
 8006f54:	e139      	b.n	80071ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	795b      	ldrb	r3, [r3, #5]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fcc5 	bl	80078ec <USBH_LL_GetURBState>
 8006f62:	4603      	mov	r3, r0
 8006f64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d11e      	bne.n	8006faa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7c1b      	ldrb	r3, [r3, #16]
 8006f70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	8adb      	ldrh	r3, [r3, #22]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006f7e:	7b7b      	ldrb	r3, [r7, #13]
 8006f80:	2b80      	cmp	r3, #128	; 0x80
 8006f82:	d103      	bne.n	8006f8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2203      	movs	r2, #3
 8006f88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006f8a:	e115      	b.n	80071b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2205      	movs	r2, #5
 8006f90:	761a      	strb	r2, [r3, #24]
      break;
 8006f92:	e111      	b.n	80071b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006f94:	7b7b      	ldrb	r3, [r7, #13]
 8006f96:	2b80      	cmp	r3, #128	; 0x80
 8006f98:	d103      	bne.n	8006fa2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2209      	movs	r2, #9
 8006f9e:	761a      	strb	r2, [r3, #24]
      break;
 8006fa0:	e10a      	b.n	80071b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2207      	movs	r2, #7
 8006fa6:	761a      	strb	r2, [r3, #24]
      break;
 8006fa8:	e106      	b.n	80071b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d003      	beq.n	8006fb8 <USBH_HandleControl+0xcc>
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	f040 8100 	bne.w	80071b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	220b      	movs	r2, #11
 8006fbc:	761a      	strb	r2, [r3, #24]
      break;
 8006fbe:	e0fb      	b.n	80071b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6899      	ldr	r1, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	899a      	ldrh	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	791b      	ldrb	r3, [r3, #4]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f93a 	bl	8007252 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	761a      	strb	r2, [r3, #24]
      break;
 8006fe4:	e0f1      	b.n	80071ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	791b      	ldrb	r3, [r3, #4]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fc7d 	bl	80078ec <USBH_LL_GetURBState>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d102      	bne.n	8007002 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2209      	movs	r2, #9
 8007000:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	2b05      	cmp	r3, #5
 8007006:	d102      	bne.n	800700e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007008:	2303      	movs	r3, #3
 800700a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800700c:	e0d6      	b.n	80071bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	2b04      	cmp	r3, #4
 8007012:	f040 80d3 	bne.w	80071bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	220b      	movs	r2, #11
 800701a:	761a      	strb	r2, [r3, #24]
      break;
 800701c:	e0ce      	b.n	80071bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6899      	ldr	r1, [r3, #8]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	899a      	ldrh	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	795b      	ldrb	r3, [r3, #5]
 800702a:	2001      	movs	r0, #1
 800702c:	9000      	str	r0, [sp, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f8ea 	bl	8007208 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800703a:	b29a      	uxth	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2206      	movs	r2, #6
 8007044:	761a      	strb	r2, [r3, #24]
      break;
 8007046:	e0c0      	b.n	80071ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	795b      	ldrb	r3, [r3, #5]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fc4c 	bl	80078ec <USBH_LL_GetURBState>
 8007054:	4603      	mov	r3, r0
 8007056:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d103      	bne.n	8007066 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2207      	movs	r2, #7
 8007062:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007064:	e0ac      	b.n	80071c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b05      	cmp	r3, #5
 800706a:	d105      	bne.n	8007078 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	220c      	movs	r2, #12
 8007070:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007072:	2303      	movs	r3, #3
 8007074:	73fb      	strb	r3, [r7, #15]
      break;
 8007076:	e0a3      	b.n	80071c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d103      	bne.n	8007086 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2205      	movs	r2, #5
 8007082:	761a      	strb	r2, [r3, #24]
      break;
 8007084:	e09c      	b.n	80071c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	2b04      	cmp	r3, #4
 800708a:	f040 8099 	bne.w	80071c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	220b      	movs	r2, #11
 8007092:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007094:	2302      	movs	r3, #2
 8007096:	73fb      	strb	r3, [r7, #15]
      break;
 8007098:	e092      	b.n	80071c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	791b      	ldrb	r3, [r3, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f8d5 	bl	8007252 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2208      	movs	r2, #8
 80070b8:	761a      	strb	r2, [r3, #24]

      break;
 80070ba:	e086      	b.n	80071ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	791b      	ldrb	r3, [r3, #4]
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fc12 	bl	80078ec <USBH_LL_GetURBState>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d105      	bne.n	80070de <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	220d      	movs	r2, #13
 80070d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070dc:	e072      	b.n	80071c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d103      	bne.n	80070ec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	220b      	movs	r2, #11
 80070e8:	761a      	strb	r2, [r3, #24]
      break;
 80070ea:	e06b      	b.n	80071c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	d168      	bne.n	80071c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80070f2:	2303      	movs	r3, #3
 80070f4:	73fb      	strb	r3, [r7, #15]
      break;
 80070f6:	e065      	b.n	80071c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	795b      	ldrb	r3, [r3, #5]
 80070fc:	2201      	movs	r2, #1
 80070fe:	9200      	str	r2, [sp, #0]
 8007100:	2200      	movs	r2, #0
 8007102:	2100      	movs	r1, #0
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f87f 	bl	8007208 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007110:	b29a      	uxth	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	220a      	movs	r2, #10
 800711a:	761a      	strb	r2, [r3, #24]
      break;
 800711c:	e055      	b.n	80071ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	795b      	ldrb	r3, [r3, #5]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fbe1 	bl	80078ec <USBH_LL_GetURBState>
 800712a:	4603      	mov	r3, r0
 800712c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d105      	bne.n	8007140 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	220d      	movs	r2, #13
 800713c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800713e:	e043      	b.n	80071c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d103      	bne.n	800714e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2209      	movs	r2, #9
 800714a:	761a      	strb	r2, [r3, #24]
      break;
 800714c:	e03c      	b.n	80071c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d139      	bne.n	80071c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	220b      	movs	r2, #11
 8007158:	761a      	strb	r2, [r3, #24]
      break;
 800715a:	e035      	b.n	80071c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	7e5b      	ldrb	r3, [r3, #25]
 8007160:	3301      	adds	r3, #1
 8007162:	b2da      	uxtb	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	765a      	strb	r2, [r3, #25]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	7e5b      	ldrb	r3, [r3, #25]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d806      	bhi.n	800717e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800717c:	e025      	b.n	80071ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007184:	2106      	movs	r1, #6
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	795b      	ldrb	r3, [r3, #5]
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f90c 	bl	80073b4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	791b      	ldrb	r3, [r3, #4]
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f906 	bl	80073b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80071ae:	2302      	movs	r3, #2
 80071b0:	73fb      	strb	r3, [r7, #15]
      break;
 80071b2:	e00a      	b.n	80071ca <USBH_HandleControl+0x2de>

    default:
      break;
 80071b4:	bf00      	nop
 80071b6:	e008      	b.n	80071ca <USBH_HandleControl+0x2de>
      break;
 80071b8:	bf00      	nop
 80071ba:	e006      	b.n	80071ca <USBH_HandleControl+0x2de>
      break;
 80071bc:	bf00      	nop
 80071be:	e004      	b.n	80071ca <USBH_HandleControl+0x2de>
      break;
 80071c0:	bf00      	nop
 80071c2:	e002      	b.n	80071ca <USBH_HandleControl+0x2de>
      break;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <USBH_HandleControl+0x2de>
      break;
 80071c8:	bf00      	nop
  }

  return status;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af04      	add	r7, sp, #16
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	4613      	mov	r3, r2
 80071e0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80071e2:	79f9      	ldrb	r1, [r7, #7]
 80071e4:	2300      	movs	r3, #0
 80071e6:	9303      	str	r3, [sp, #12]
 80071e8:	2308      	movs	r3, #8
 80071ea:	9302      	str	r3, [sp, #8]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	2300      	movs	r3, #0
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	2200      	movs	r2, #0
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fb46 	bl	800788a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af04      	add	r7, sp, #16
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4611      	mov	r1, r2
 8007214:	461a      	mov	r2, r3
 8007216:	460b      	mov	r3, r1
 8007218:	80fb      	strh	r3, [r7, #6]
 800721a:	4613      	mov	r3, r2
 800721c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800722c:	7979      	ldrb	r1, [r7, #5]
 800722e:	7e3b      	ldrb	r3, [r7, #24]
 8007230:	9303      	str	r3, [sp, #12]
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	9302      	str	r3, [sp, #8]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	2301      	movs	r3, #1
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2300      	movs	r3, #0
 8007240:	2200      	movs	r2, #0
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fb21 	bl	800788a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b088      	sub	sp, #32
 8007256:	af04      	add	r7, sp, #16
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	4611      	mov	r1, r2
 800725e:	461a      	mov	r2, r3
 8007260:	460b      	mov	r3, r1
 8007262:	80fb      	strh	r3, [r7, #6]
 8007264:	4613      	mov	r3, r2
 8007266:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007268:	7979      	ldrb	r1, [r7, #5]
 800726a:	2300      	movs	r3, #0
 800726c:	9303      	str	r3, [sp, #12]
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	9302      	str	r3, [sp, #8]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	9301      	str	r3, [sp, #4]
 8007276:	2301      	movs	r3, #1
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	2300      	movs	r3, #0
 800727c:	2201      	movs	r2, #1
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 fb03 	bl	800788a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007284:	2300      	movs	r3, #0

}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b088      	sub	sp, #32
 8007292:	af04      	add	r7, sp, #16
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	4611      	mov	r1, r2
 800729a:	461a      	mov	r2, r3
 800729c:	460b      	mov	r3, r1
 800729e:	80fb      	strh	r3, [r7, #6]
 80072a0:	4613      	mov	r3, r2
 80072a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072b2:	7979      	ldrb	r1, [r7, #5]
 80072b4:	7e3b      	ldrb	r3, [r7, #24]
 80072b6:	9303      	str	r3, [sp, #12]
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	9302      	str	r3, [sp, #8]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	2301      	movs	r3, #1
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	2302      	movs	r3, #2
 80072c6:	2200      	movs	r2, #0
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 fade 	bl	800788a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af04      	add	r7, sp, #16
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4611      	mov	r1, r2
 80072e4:	461a      	mov	r2, r3
 80072e6:	460b      	mov	r3, r1
 80072e8:	80fb      	strh	r3, [r7, #6]
 80072ea:	4613      	mov	r3, r2
 80072ec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072ee:	7979      	ldrb	r1, [r7, #5]
 80072f0:	2300      	movs	r3, #0
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	88fb      	ldrh	r3, [r7, #6]
 80072f6:	9302      	str	r3, [sp, #8]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	2301      	movs	r3, #1
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	2302      	movs	r3, #2
 8007302:	2201      	movs	r2, #1
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fac0 	bl	800788a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af04      	add	r7, sp, #16
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	4608      	mov	r0, r1
 800731e:	4611      	mov	r1, r2
 8007320:	461a      	mov	r2, r3
 8007322:	4603      	mov	r3, r0
 8007324:	70fb      	strb	r3, [r7, #3]
 8007326:	460b      	mov	r3, r1
 8007328:	70bb      	strb	r3, [r7, #2]
 800732a:	4613      	mov	r3, r2
 800732c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800732e:	7878      	ldrb	r0, [r7, #1]
 8007330:	78ba      	ldrb	r2, [r7, #2]
 8007332:	78f9      	ldrb	r1, [r7, #3]
 8007334:	8b3b      	ldrh	r3, [r7, #24]
 8007336:	9302      	str	r3, [sp, #8]
 8007338:	7d3b      	ldrb	r3, [r7, #20]
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	7c3b      	ldrb	r3, [r7, #16]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	4603      	mov	r3, r0
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa53 	bl	80077ee <USBH_LL_OpenPipe>

  return USBH_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa72 	bl	800784c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f836 	bl	80073f0 <USBH_GetFreePipe>
 8007384:	4603      	mov	r3, r0
 8007386:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007388:	89fb      	ldrh	r3, [r7, #14]
 800738a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800738e:	4293      	cmp	r3, r2
 8007390:	d00a      	beq.n	80073a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007392:	78fa      	ldrb	r2, [r7, #3]
 8007394:	89fb      	ldrh	r3, [r7, #14]
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	33e0      	adds	r3, #224	; 0xe0
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80073a8:	89fb      	ldrh	r3, [r7, #14]
 80073aa:	b2db      	uxtb	r3, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	2b0f      	cmp	r3, #15
 80073c4:	d80d      	bhi.n	80073e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	33e0      	adds	r3, #224	; 0xe0
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	33e0      	adds	r3, #224	; 0xe0
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
 8007400:	e00f      	b.n	8007422 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	33e0      	adds	r3, #224	; 0xe0
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d102      	bne.n	800741c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	b29b      	uxth	r3, r3
 800741a:	e007      	b.n	800742c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	3301      	adds	r3, #1
 8007420:	73fb      	strb	r3, [r7, #15]
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	2b0f      	cmp	r3, #15
 8007426:	d9ec      	bls.n	8007402 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007428:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800743c:	2201      	movs	r2, #1
 800743e:	490e      	ldr	r1, [pc, #56]	; (8007478 <MX_USB_HOST_Init+0x40>)
 8007440:	480e      	ldr	r0, [pc, #56]	; (800747c <MX_USB_HOST_Init+0x44>)
 8007442:	f7fe fba7 	bl	8005b94 <USBH_Init>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800744c:	f7f9 fafc 	bl	8000a48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007450:	490b      	ldr	r1, [pc, #44]	; (8007480 <MX_USB_HOST_Init+0x48>)
 8007452:	480a      	ldr	r0, [pc, #40]	; (800747c <MX_USB_HOST_Init+0x44>)
 8007454:	f7fe fc2c 	bl	8005cb0 <USBH_RegisterClass>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800745e:	f7f9 faf3 	bl	8000a48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007462:	4806      	ldr	r0, [pc, #24]	; (800747c <MX_USB_HOST_Init+0x44>)
 8007464:	f7fe fcb0 	bl	8005dc8 <USBH_Start>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800746e:	f7f9 faeb 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007472:	bf00      	nop
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	08007499 	.word	0x08007499
 800747c:	200001a8 	.word	0x200001a8
 8007480:	2000000c 	.word	0x2000000c

08007484 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007488:	4802      	ldr	r0, [pc, #8]	; (8007494 <MX_USB_HOST_Process+0x10>)
 800748a:	f7fe fcad 	bl	8005de8 <USBH_Process>
}
 800748e:	bf00      	nop
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200001a8 	.word	0x200001a8

08007498 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d819      	bhi.n	80074e0 <USBH_UserProcess+0x48>
 80074ac:	a201      	add	r2, pc, #4	; (adr r2, 80074b4 <USBH_UserProcess+0x1c>)
 80074ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b2:	bf00      	nop
 80074b4:	080074e1 	.word	0x080074e1
 80074b8:	080074d1 	.word	0x080074d1
 80074bc:	080074e1 	.word	0x080074e1
 80074c0:	080074d9 	.word	0x080074d9
 80074c4:	080074c9 	.word	0x080074c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80074c8:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <USBH_UserProcess+0x58>)
 80074ca:	2203      	movs	r2, #3
 80074cc:	701a      	strb	r2, [r3, #0]
  break;
 80074ce:	e008      	b.n	80074e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <USBH_UserProcess+0x58>)
 80074d2:	2202      	movs	r2, #2
 80074d4:	701a      	strb	r2, [r3, #0]
  break;
 80074d6:	e004      	b.n	80074e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <USBH_UserProcess+0x58>)
 80074da:	2201      	movs	r2, #1
 80074dc:	701a      	strb	r2, [r3, #0]
  break;
 80074de:	e000      	b.n	80074e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80074e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	20000580 	.word	0x20000580

080074f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074fc:	f107 0314 	add.w	r3, r7, #20
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	605a      	str	r2, [r3, #4]
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	60da      	str	r2, [r3, #12]
 800750a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007514:	d147      	bne.n	80075a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007516:	2300      	movs	r3, #0
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	4b25      	ldr	r3, [pc, #148]	; (80075b0 <HAL_HCD_MspInit+0xbc>)
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	4a24      	ldr	r2, [pc, #144]	; (80075b0 <HAL_HCD_MspInit+0xbc>)
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	6313      	str	r3, [r2, #48]	; 0x30
 8007526:	4b22      	ldr	r3, [pc, #136]	; (80075b0 <HAL_HCD_MspInit+0xbc>)
 8007528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007538:	2300      	movs	r3, #0
 800753a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800753c:	2300      	movs	r3, #0
 800753e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007540:	f107 0314 	add.w	r3, r7, #20
 8007544:	4619      	mov	r1, r3
 8007546:	481b      	ldr	r0, [pc, #108]	; (80075b4 <HAL_HCD_MspInit+0xc0>)
 8007548:	f7f9 fd80 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800754c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007552:	2302      	movs	r3, #2
 8007554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800755a:	2300      	movs	r3, #0
 800755c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800755e:	230a      	movs	r3, #10
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007562:	f107 0314 	add.w	r3, r7, #20
 8007566:	4619      	mov	r1, r3
 8007568:	4812      	ldr	r0, [pc, #72]	; (80075b4 <HAL_HCD_MspInit+0xc0>)
 800756a:	f7f9 fd6f 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800756e:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <HAL_HCD_MspInit+0xbc>)
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	4a0f      	ldr	r2, [pc, #60]	; (80075b0 <HAL_HCD_MspInit+0xbc>)
 8007574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007578:	6353      	str	r3, [r2, #52]	; 0x34
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <HAL_HCD_MspInit+0xbc>)
 8007580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007582:	4a0b      	ldr	r2, [pc, #44]	; (80075b0 <HAL_HCD_MspInit+0xbc>)
 8007584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007588:	6453      	str	r3, [r2, #68]	; 0x44
 800758a:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <HAL_HCD_MspInit+0xbc>)
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007596:	2200      	movs	r2, #0
 8007598:	2100      	movs	r1, #0
 800759a:	2043      	movs	r0, #67	; 0x43
 800759c:	f7f9 fd1f 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075a0:	2043      	movs	r0, #67	; 0x43
 80075a2:	f7f9 fd38 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075a6:	bf00      	nop
 80075a8:	3728      	adds	r7, #40	; 0x28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	40023800 	.word	0x40023800
 80075b4:	40020000 	.word	0x40020000

080075b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe ffed 	bl	80065a6 <USBH_LL_IncTimer>
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff f825 	bl	8006632 <USBH_LL_Connect>
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff f82e 	bl	8006660 <USBH_LL_Disconnect>
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
 8007618:	4613      	mov	r3, r2
 800761a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe ffdf 	bl	80065fa <USBH_LL_PortEnabled>
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe ffdf 	bl	8006616 <USBH_LL_PortDisabled>
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800766e:	2b01      	cmp	r3, #1
 8007670:	d12a      	bne.n	80076c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007672:	4a18      	ldr	r2, [pc, #96]	; (80076d4 <USBH_LL_Init+0x74>)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a15      	ldr	r2, [pc, #84]	; (80076d4 <USBH_LL_Init+0x74>)
 800767e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <USBH_LL_Init+0x74>)
 8007684:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007688:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <USBH_LL_Init+0x74>)
 800768c:	2208      	movs	r2, #8
 800768e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007690:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <USBH_LL_Init+0x74>)
 8007692:	2201      	movs	r2, #1
 8007694:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007696:	4b0f      	ldr	r3, [pc, #60]	; (80076d4 <USBH_LL_Init+0x74>)
 8007698:	2200      	movs	r2, #0
 800769a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800769c:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <USBH_LL_Init+0x74>)
 800769e:	2202      	movs	r2, #2
 80076a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076a2:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <USBH_LL_Init+0x74>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80076a8:	480a      	ldr	r0, [pc, #40]	; (80076d4 <USBH_LL_Init+0x74>)
 80076aa:	f7f9 feb7 	bl	800141c <HAL_HCD_Init>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80076b4:	f7f9 f9c8 	bl	8000a48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80076b8:	4806      	ldr	r0, [pc, #24]	; (80076d4 <USBH_LL_Init+0x74>)
 80076ba:	f7fa fa9a 	bl	8001bf2 <HAL_HCD_GetCurrentFrame>
 80076be:	4603      	mov	r3, r0
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fe ff60 	bl	8006588 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000584 	.word	0x20000584

080076d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fa fa09 	bl	8001b06 <HAL_HCD_Start>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f95c 	bl	80079b8 <USBH_Get_USB_Status>
 8007700:	4603      	mov	r3, r0
 8007702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007704:	7bbb      	ldrb	r3, [r7, #14]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007724:	4618      	mov	r0, r3
 8007726:	f7fa fa11 	bl	8001b4c <HAL_HCD_Stop>
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f941 	bl	80079b8 <USBH_Get_USB_Status>
 8007736:	4603      	mov	r3, r0
 8007738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800773a:	7bbb      	ldrb	r3, [r7, #14]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007756:	4618      	mov	r0, r3
 8007758:	f7fa fa59 	bl	8001c0e <HAL_HCD_GetCurrentSpeed>
 800775c:	4603      	mov	r3, r0
 800775e:	2b02      	cmp	r3, #2
 8007760:	d00c      	beq.n	800777c <USBH_LL_GetSpeed+0x38>
 8007762:	2b02      	cmp	r3, #2
 8007764:	d80d      	bhi.n	8007782 <USBH_LL_GetSpeed+0x3e>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <USBH_LL_GetSpeed+0x2c>
 800776a:	2b01      	cmp	r3, #1
 800776c:	d003      	beq.n	8007776 <USBH_LL_GetSpeed+0x32>
 800776e:	e008      	b.n	8007782 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
    break;
 8007774:	e008      	b.n	8007788 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007776:	2301      	movs	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]
    break;
 800777a:	e005      	b.n	8007788 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800777c:	2302      	movs	r3, #2
 800777e:	73fb      	strb	r3, [r7, #15]
    break;
 8007780:	e002      	b.n	8007788 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007782:	2301      	movs	r3, #1
 8007784:	73fb      	strb	r3, [r7, #15]
    break;
 8007786:	bf00      	nop
  }
  return  speed;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fa f9ec 	bl	8001b86 <HAL_HCD_ResetPort>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 f8ff 	bl	80079b8 <USBH_Get_USB_Status>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077be:	7bbb      	ldrb	r3, [r7, #14]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	4611      	mov	r1, r2
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fa f9f3 	bl	8001bca <HAL_HCD_HC_GetXferCount>
 80077e4:	4603      	mov	r3, r0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80077ee:	b590      	push	{r4, r7, lr}
 80077f0:	b089      	sub	sp, #36	; 0x24
 80077f2:	af04      	add	r7, sp, #16
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	4608      	mov	r0, r1
 80077f8:	4611      	mov	r1, r2
 80077fa:	461a      	mov	r2, r3
 80077fc:	4603      	mov	r3, r0
 80077fe:	70fb      	strb	r3, [r7, #3]
 8007800:	460b      	mov	r3, r1
 8007802:	70bb      	strb	r3, [r7, #2]
 8007804:	4613      	mov	r3, r2
 8007806:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007816:	787c      	ldrb	r4, [r7, #1]
 8007818:	78ba      	ldrb	r2, [r7, #2]
 800781a:	78f9      	ldrb	r1, [r7, #3]
 800781c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800781e:	9302      	str	r3, [sp, #8]
 8007820:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	f897 3020 	ldrb.w	r3, [r7, #32]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	4623      	mov	r3, r4
 800782e:	f7f9 fe57 	bl	80014e0 <HAL_HCD_HC_Init>
 8007832:	4603      	mov	r3, r0
 8007834:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	4618      	mov	r0, r3
 800783a:	f000 f8bd 	bl	80079b8 <USBH_Get_USB_Status>
 800783e:	4603      	mov	r3, r0
 8007840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007842:	7bbb      	ldrb	r3, [r7, #14]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	bd90      	pop	{r4, r7, pc}

0800784c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	4611      	mov	r1, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f7f9 fec7 	bl	80015fe <HAL_HCD_HC_Halt>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f89e 	bl	80079b8 <USBH_Get_USB_Status>
 800787c:	4603      	mov	r3, r0
 800787e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007880:	7bbb      	ldrb	r3, [r7, #14]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800788a:	b590      	push	{r4, r7, lr}
 800788c:	b089      	sub	sp, #36	; 0x24
 800788e:	af04      	add	r7, sp, #16
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	4608      	mov	r0, r1
 8007894:	4611      	mov	r1, r2
 8007896:	461a      	mov	r2, r3
 8007898:	4603      	mov	r3, r0
 800789a:	70fb      	strb	r3, [r7, #3]
 800789c:	460b      	mov	r3, r1
 800789e:	70bb      	strb	r3, [r7, #2]
 80078a0:	4613      	mov	r3, r2
 80078a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078b2:	787c      	ldrb	r4, [r7, #1]
 80078b4:	78ba      	ldrb	r2, [r7, #2]
 80078b6:	78f9      	ldrb	r1, [r7, #3]
 80078b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078bc:	9303      	str	r3, [sp, #12]
 80078be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078c0:	9302      	str	r3, [sp, #8]
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4623      	mov	r3, r4
 80078ce:	f7f9 feb9 	bl	8001644 <HAL_HCD_HC_SubmitRequest>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 f86d 	bl	80079b8 <USBH_Get_USB_Status>
 80078de:	4603      	mov	r3, r0
 80078e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd90      	pop	{r4, r7, pc}

080078ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078fe:	78fa      	ldrb	r2, [r7, #3]
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f7fa f94d 	bl	8001ba2 <HAL_HCD_HC_GetURBState>
 8007908:	4603      	mov	r3, r0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007924:	2b01      	cmp	r3, #1
 8007926:	d103      	bne.n	8007930 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f870 	bl	8007a10 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007930:	20c8      	movs	r0, #200	; 0xc8
 8007932:	f7f9 fa55 	bl	8000de0 <HAL_Delay>
  return USBH_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
 800794c:	4613      	mov	r3, r2
 800794e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007956:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	212c      	movs	r1, #44	; 0x2c
 800795e:	fb01 f303 	mul.w	r3, r1, r3
 8007962:	4413      	add	r3, r2
 8007964:	333b      	adds	r3, #59	; 0x3b
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d009      	beq.n	8007980 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	212c      	movs	r1, #44	; 0x2c
 8007972:	fb01 f303 	mul.w	r3, r1, r3
 8007976:	4413      	add	r3, r2
 8007978:	3354      	adds	r3, #84	; 0x54
 800797a:	78ba      	ldrb	r2, [r7, #2]
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	e008      	b.n	8007992 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	212c      	movs	r1, #44	; 0x2c
 8007986:	fb01 f303 	mul.w	r3, r1, r3
 800798a:	4413      	add	r3, r2
 800798c:	3355      	adds	r3, #85	; 0x55
 800798e:	78ba      	ldrb	r2, [r7, #2]
 8007990:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7f9 fa19 	bl	8000de0 <HAL_Delay>
}
 80079ae:	bf00      	nop
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d817      	bhi.n	80079fc <USBH_Get_USB_Status+0x44>
 80079cc:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <USBH_Get_USB_Status+0x1c>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	080079e5 	.word	0x080079e5
 80079d8:	080079eb 	.word	0x080079eb
 80079dc:	080079f1 	.word	0x080079f1
 80079e0:	080079f7 	.word	0x080079f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73fb      	strb	r3, [r7, #15]
    break;
 80079e8:	e00b      	b.n	8007a02 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80079ea:	2302      	movs	r3, #2
 80079ec:	73fb      	strb	r3, [r7, #15]
    break;
 80079ee:	e008      	b.n	8007a02 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
    break;
 80079f4:	e005      	b.n	8007a02 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80079f6:	2302      	movs	r3, #2
 80079f8:	73fb      	strb	r3, [r7, #15]
    break;
 80079fa:	e002      	b.n	8007a02 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80079fc:	2302      	movs	r3, #2
 80079fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007a00:	bf00      	nop
  }
  return usb_status;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <MX_DriverVbusFS>:
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	71fb      	strb	r3, [r7, #7]
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	73fb      	strb	r3, [r7, #15]
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d102      	bne.n	8007a2a <MX_DriverVbusFS+0x1a>
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]
 8007a28:	e001      	b.n	8007a2e <MX_DriverVbusFS+0x1e>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	461a      	mov	r2, r3
 8007a32:	2101      	movs	r1, #1
 8007a34:	4803      	ldr	r0, [pc, #12]	; (8007a44 <MX_DriverVbusFS+0x34>)
 8007a36:	f7f9 fca5 	bl	8001384 <HAL_GPIO_WritePin>
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	40020800 	.word	0x40020800

08007a48 <__errno>:
 8007a48:	4b01      	ldr	r3, [pc, #4]	; (8007a50 <__errno+0x8>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	2000002c 	.word	0x2000002c

08007a54 <__libc_init_array>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4d0d      	ldr	r5, [pc, #52]	; (8007a8c <__libc_init_array+0x38>)
 8007a58:	4c0d      	ldr	r4, [pc, #52]	; (8007a90 <__libc_init_array+0x3c>)
 8007a5a:	1b64      	subs	r4, r4, r5
 8007a5c:	10a4      	asrs	r4, r4, #2
 8007a5e:	2600      	movs	r6, #0
 8007a60:	42a6      	cmp	r6, r4
 8007a62:	d109      	bne.n	8007a78 <__libc_init_array+0x24>
 8007a64:	4d0b      	ldr	r5, [pc, #44]	; (8007a94 <__libc_init_array+0x40>)
 8007a66:	4c0c      	ldr	r4, [pc, #48]	; (8007a98 <__libc_init_array+0x44>)
 8007a68:	f000 f92e 	bl	8007cc8 <_init>
 8007a6c:	1b64      	subs	r4, r4, r5
 8007a6e:	10a4      	asrs	r4, r4, #2
 8007a70:	2600      	movs	r6, #0
 8007a72:	42a6      	cmp	r6, r4
 8007a74:	d105      	bne.n	8007a82 <__libc_init_array+0x2e>
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7c:	4798      	blx	r3
 8007a7e:	3601      	adds	r6, #1
 8007a80:	e7ee      	b.n	8007a60 <__libc_init_array+0xc>
 8007a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a86:	4798      	blx	r3
 8007a88:	3601      	adds	r6, #1
 8007a8a:	e7f2      	b.n	8007a72 <__libc_init_array+0x1e>
 8007a8c:	08007d04 	.word	0x08007d04
 8007a90:	08007d04 	.word	0x08007d04
 8007a94:	08007d04 	.word	0x08007d04
 8007a98:	08007d08 	.word	0x08007d08

08007a9c <malloc>:
 8007a9c:	4b02      	ldr	r3, [pc, #8]	; (8007aa8 <malloc+0xc>)
 8007a9e:	4601      	mov	r1, r0
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	f000 b87f 	b.w	8007ba4 <_malloc_r>
 8007aa6:	bf00      	nop
 8007aa8:	2000002c 	.word	0x2000002c

08007aac <free>:
 8007aac:	4b02      	ldr	r3, [pc, #8]	; (8007ab8 <free+0xc>)
 8007aae:	4601      	mov	r1, r0
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	f000 b80b 	b.w	8007acc <_free_r>
 8007ab6:	bf00      	nop
 8007ab8:	2000002c 	.word	0x2000002c

08007abc <memset>:
 8007abc:	4402      	add	r2, r0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d100      	bne.n	8007ac6 <memset+0xa>
 8007ac4:	4770      	bx	lr
 8007ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aca:	e7f9      	b.n	8007ac0 <memset+0x4>

08007acc <_free_r>:
 8007acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	d044      	beq.n	8007b5c <_free_r+0x90>
 8007ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad6:	9001      	str	r0, [sp, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f1a1 0404 	sub.w	r4, r1, #4
 8007ade:	bfb8      	it	lt
 8007ae0:	18e4      	addlt	r4, r4, r3
 8007ae2:	f000 f8e3 	bl	8007cac <__malloc_lock>
 8007ae6:	4a1e      	ldr	r2, [pc, #120]	; (8007b60 <_free_r+0x94>)
 8007ae8:	9801      	ldr	r0, [sp, #4]
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	b933      	cbnz	r3, 8007afc <_free_r+0x30>
 8007aee:	6063      	str	r3, [r4, #4]
 8007af0:	6014      	str	r4, [r2, #0]
 8007af2:	b003      	add	sp, #12
 8007af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af8:	f000 b8de 	b.w	8007cb8 <__malloc_unlock>
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	d908      	bls.n	8007b12 <_free_r+0x46>
 8007b00:	6825      	ldr	r5, [r4, #0]
 8007b02:	1961      	adds	r1, r4, r5
 8007b04:	428b      	cmp	r3, r1
 8007b06:	bf01      	itttt	eq
 8007b08:	6819      	ldreq	r1, [r3, #0]
 8007b0a:	685b      	ldreq	r3, [r3, #4]
 8007b0c:	1949      	addeq	r1, r1, r5
 8007b0e:	6021      	streq	r1, [r4, #0]
 8007b10:	e7ed      	b.n	8007aee <_free_r+0x22>
 8007b12:	461a      	mov	r2, r3
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	b10b      	cbz	r3, 8007b1c <_free_r+0x50>
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	d9fa      	bls.n	8007b12 <_free_r+0x46>
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	1855      	adds	r5, r2, r1
 8007b20:	42a5      	cmp	r5, r4
 8007b22:	d10b      	bne.n	8007b3c <_free_r+0x70>
 8007b24:	6824      	ldr	r4, [r4, #0]
 8007b26:	4421      	add	r1, r4
 8007b28:	1854      	adds	r4, r2, r1
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	d1e0      	bne.n	8007af2 <_free_r+0x26>
 8007b30:	681c      	ldr	r4, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	6053      	str	r3, [r2, #4]
 8007b36:	4421      	add	r1, r4
 8007b38:	6011      	str	r1, [r2, #0]
 8007b3a:	e7da      	b.n	8007af2 <_free_r+0x26>
 8007b3c:	d902      	bls.n	8007b44 <_free_r+0x78>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	e7d6      	b.n	8007af2 <_free_r+0x26>
 8007b44:	6825      	ldr	r5, [r4, #0]
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf04      	itt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	bf04      	itt	eq
 8007b54:	1949      	addeq	r1, r1, r5
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	6054      	str	r4, [r2, #4]
 8007b5a:	e7ca      	b.n	8007af2 <_free_r+0x26>
 8007b5c:	b003      	add	sp, #12
 8007b5e:	bd30      	pop	{r4, r5, pc}
 8007b60:	20000888 	.word	0x20000888

08007b64 <sbrk_aligned>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4e0e      	ldr	r6, [pc, #56]	; (8007ba0 <sbrk_aligned+0x3c>)
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6831      	ldr	r1, [r6, #0]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	b911      	cbnz	r1, 8007b76 <sbrk_aligned+0x12>
 8007b70:	f000 f88c 	bl	8007c8c <_sbrk_r>
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 f887 	bl	8007c8c <_sbrk_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d00a      	beq.n	8007b98 <sbrk_aligned+0x34>
 8007b82:	1cc4      	adds	r4, r0, #3
 8007b84:	f024 0403 	bic.w	r4, r4, #3
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d007      	beq.n	8007b9c <sbrk_aligned+0x38>
 8007b8c:	1a21      	subs	r1, r4, r0
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 f87c 	bl	8007c8c <_sbrk_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d101      	bne.n	8007b9c <sbrk_aligned+0x38>
 8007b98:	f04f 34ff 	mov.w	r4, #4294967295
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	2000088c 	.word	0x2000088c

08007ba4 <_malloc_r>:
 8007ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba8:	1ccd      	adds	r5, r1, #3
 8007baa:	f025 0503 	bic.w	r5, r5, #3
 8007bae:	3508      	adds	r5, #8
 8007bb0:	2d0c      	cmp	r5, #12
 8007bb2:	bf38      	it	cc
 8007bb4:	250c      	movcc	r5, #12
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	4607      	mov	r7, r0
 8007bba:	db01      	blt.n	8007bc0 <_malloc_r+0x1c>
 8007bbc:	42a9      	cmp	r1, r5
 8007bbe:	d905      	bls.n	8007bcc <_malloc_r+0x28>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bcc:	4e2e      	ldr	r6, [pc, #184]	; (8007c88 <_malloc_r+0xe4>)
 8007bce:	f000 f86d 	bl	8007cac <__malloc_lock>
 8007bd2:	6833      	ldr	r3, [r6, #0]
 8007bd4:	461c      	mov	r4, r3
 8007bd6:	bb34      	cbnz	r4, 8007c26 <_malloc_r+0x82>
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4638      	mov	r0, r7
 8007bdc:	f7ff ffc2 	bl	8007b64 <sbrk_aligned>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	4604      	mov	r4, r0
 8007be4:	d14d      	bne.n	8007c82 <_malloc_r+0xde>
 8007be6:	6834      	ldr	r4, [r6, #0]
 8007be8:	4626      	mov	r6, r4
 8007bea:	2e00      	cmp	r6, #0
 8007bec:	d140      	bne.n	8007c70 <_malloc_r+0xcc>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	eb04 0803 	add.w	r8, r4, r3
 8007bf8:	f000 f848 	bl	8007c8c <_sbrk_r>
 8007bfc:	4580      	cmp	r8, r0
 8007bfe:	d13a      	bne.n	8007c76 <_malloc_r+0xd2>
 8007c00:	6821      	ldr	r1, [r4, #0]
 8007c02:	3503      	adds	r5, #3
 8007c04:	1a6d      	subs	r5, r5, r1
 8007c06:	f025 0503 	bic.w	r5, r5, #3
 8007c0a:	3508      	adds	r5, #8
 8007c0c:	2d0c      	cmp	r5, #12
 8007c0e:	bf38      	it	cc
 8007c10:	250c      	movcc	r5, #12
 8007c12:	4629      	mov	r1, r5
 8007c14:	4638      	mov	r0, r7
 8007c16:	f7ff ffa5 	bl	8007b64 <sbrk_aligned>
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d02b      	beq.n	8007c76 <_malloc_r+0xd2>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	442b      	add	r3, r5
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	e00e      	b.n	8007c44 <_malloc_r+0xa0>
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	1b52      	subs	r2, r2, r5
 8007c2a:	d41e      	bmi.n	8007c6a <_malloc_r+0xc6>
 8007c2c:	2a0b      	cmp	r2, #11
 8007c2e:	d916      	bls.n	8007c5e <_malloc_r+0xba>
 8007c30:	1961      	adds	r1, r4, r5
 8007c32:	42a3      	cmp	r3, r4
 8007c34:	6025      	str	r5, [r4, #0]
 8007c36:	bf18      	it	ne
 8007c38:	6059      	strne	r1, [r3, #4]
 8007c3a:	6863      	ldr	r3, [r4, #4]
 8007c3c:	bf08      	it	eq
 8007c3e:	6031      	streq	r1, [r6, #0]
 8007c40:	5162      	str	r2, [r4, r5]
 8007c42:	604b      	str	r3, [r1, #4]
 8007c44:	4638      	mov	r0, r7
 8007c46:	f104 060b 	add.w	r6, r4, #11
 8007c4a:	f000 f835 	bl	8007cb8 <__malloc_unlock>
 8007c4e:	f026 0607 	bic.w	r6, r6, #7
 8007c52:	1d23      	adds	r3, r4, #4
 8007c54:	1af2      	subs	r2, r6, r3
 8007c56:	d0b6      	beq.n	8007bc6 <_malloc_r+0x22>
 8007c58:	1b9b      	subs	r3, r3, r6
 8007c5a:	50a3      	str	r3, [r4, r2]
 8007c5c:	e7b3      	b.n	8007bc6 <_malloc_r+0x22>
 8007c5e:	6862      	ldr	r2, [r4, #4]
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	bf0c      	ite	eq
 8007c64:	6032      	streq	r2, [r6, #0]
 8007c66:	605a      	strne	r2, [r3, #4]
 8007c68:	e7ec      	b.n	8007c44 <_malloc_r+0xa0>
 8007c6a:	4623      	mov	r3, r4
 8007c6c:	6864      	ldr	r4, [r4, #4]
 8007c6e:	e7b2      	b.n	8007bd6 <_malloc_r+0x32>
 8007c70:	4634      	mov	r4, r6
 8007c72:	6876      	ldr	r6, [r6, #4]
 8007c74:	e7b9      	b.n	8007bea <_malloc_r+0x46>
 8007c76:	230c      	movs	r3, #12
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f000 f81c 	bl	8007cb8 <__malloc_unlock>
 8007c80:	e7a1      	b.n	8007bc6 <_malloc_r+0x22>
 8007c82:	6025      	str	r5, [r4, #0]
 8007c84:	e7de      	b.n	8007c44 <_malloc_r+0xa0>
 8007c86:	bf00      	nop
 8007c88:	20000888 	.word	0x20000888

08007c8c <_sbrk_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4d06      	ldr	r5, [pc, #24]	; (8007ca8 <_sbrk_r+0x1c>)
 8007c90:	2300      	movs	r3, #0
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	602b      	str	r3, [r5, #0]
 8007c98:	f7f8 ffbe 	bl	8000c18 <_sbrk>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	d102      	bne.n	8007ca6 <_sbrk_r+0x1a>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	b103      	cbz	r3, 8007ca6 <_sbrk_r+0x1a>
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	20000890 	.word	0x20000890

08007cac <__malloc_lock>:
 8007cac:	4801      	ldr	r0, [pc, #4]	; (8007cb4 <__malloc_lock+0x8>)
 8007cae:	f000 b809 	b.w	8007cc4 <__retarget_lock_acquire_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	20000894 	.word	0x20000894

08007cb8 <__malloc_unlock>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	; (8007cc0 <__malloc_unlock+0x8>)
 8007cba:	f000 b804 	b.w	8007cc6 <__retarget_lock_release_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	20000894 	.word	0x20000894

08007cc4 <__retarget_lock_acquire_recursive>:
 8007cc4:	4770      	bx	lr

08007cc6 <__retarget_lock_release_recursive>:
 8007cc6:	4770      	bx	lr

08007cc8 <_init>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	bf00      	nop
 8007ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cce:	bc08      	pop	{r3}
 8007cd0:	469e      	mov	lr, r3
 8007cd2:	4770      	bx	lr

08007cd4 <_fini>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr

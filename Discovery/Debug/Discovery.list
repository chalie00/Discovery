
Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c18  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008da0  08008da0  00018da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dbc  08008dbc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008dbc  08008dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dc4  08008dc4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dc8  08008dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000898  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000092c  2000092c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d59d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000406b  00000000  00000000  0003d661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001738  00000000  00000000  000416d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015a8  00000000  00000000  00042e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024bb2  00000000  00000000  000443b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e336  00000000  00000000  00068f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4650  00000000  00000000  00087298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b8e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063f8  00000000  00000000  0015b938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d88 	.word	0x08008d88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008d88 	.word	0x08008d88

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
     PB10   ------> I2S2_CK
     PC7   ------> I2S3_MCK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b86      	ldr	r3, [pc, #536]	; (8000700 <MX_GPIO_Init+0x234>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <MX_GPIO_Init+0x234>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b83      	ldr	r3, [pc, #524]	; (8000700 <MX_GPIO_Init+0x234>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b7f      	ldr	r3, [pc, #508]	; (8000700 <MX_GPIO_Init+0x234>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a7e      	ldr	r2, [pc, #504]	; (8000700 <MX_GPIO_Init+0x234>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b7c      	ldr	r3, [pc, #496]	; (8000700 <MX_GPIO_Init+0x234>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b78      	ldr	r3, [pc, #480]	; (8000700 <MX_GPIO_Init+0x234>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a77      	ldr	r2, [pc, #476]	; (8000700 <MX_GPIO_Init+0x234>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b75      	ldr	r3, [pc, #468]	; (8000700 <MX_GPIO_Init+0x234>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b71      	ldr	r3, [pc, #452]	; (8000700 <MX_GPIO_Init+0x234>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a70      	ldr	r2, [pc, #448]	; (8000700 <MX_GPIO_Init+0x234>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b6e      	ldr	r3, [pc, #440]	; (8000700 <MX_GPIO_Init+0x234>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <MX_GPIO_Init+0x234>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a69      	ldr	r2, [pc, #420]	; (8000700 <MX_GPIO_Init+0x234>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b67      	ldr	r3, [pc, #412]	; (8000700 <MX_GPIO_Init+0x234>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b63      	ldr	r3, [pc, #396]	; (8000700 <MX_GPIO_Init+0x234>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a62      	ldr	r2, [pc, #392]	; (8000700 <MX_GPIO_Init+0x234>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b60      	ldr	r3, [pc, #384]	; (8000700 <MX_GPIO_Init+0x234>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	485d      	ldr	r0, [pc, #372]	; (8000704 <MX_GPIO_Init+0x238>)
 8000590:	f001 f884 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	485b      	ldr	r0, [pc, #364]	; (8000708 <MX_GPIO_Init+0x23c>)
 800059a:	f001 f87f 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f247 0110 	movw	r1, #28688	; 0x7010
 80005a4:	4859      	ldr	r0, [pc, #356]	; (800070c <MX_GPIO_Init+0x240>)
 80005a6:	f001 f879 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	4850      	ldr	r0, [pc, #320]	; (8000704 <MX_GPIO_Init+0x238>)
 80005c2:	f000 fecf 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	484a      	ldr	r0, [pc, #296]	; (8000708 <MX_GPIO_Init+0x23c>)
 80005de:	f000 fec1 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4842      	ldr	r0, [pc, #264]	; (8000708 <MX_GPIO_Init+0x23c>)
 80005fe:	f000 feb1 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000606:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	483e      	ldr	r0, [pc, #248]	; (8000710 <MX_GPIO_Init+0x244>)
 8000618:	f000 fea4 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800061c:	2310      	movs	r3, #16
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800062c:	2306      	movs	r3, #6
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4836      	ldr	r0, [pc, #216]	; (8000710 <MX_GPIO_Init+0x244>)
 8000638:	f000 fe94 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800063c:	2304      	movs	r3, #4
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4831      	ldr	r0, [pc, #196]	; (8000714 <MX_GPIO_Init+0x248>)
 8000650:	f000 fe88 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000666:	2305      	movs	r3, #5
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	4828      	ldr	r0, [pc, #160]	; (8000714 <MX_GPIO_Init+0x248>)
 8000672:	f000 fe77 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 8000676:	f247 0310 	movw	r3, #28688	; 0x7010
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	481f      	ldr	r0, [pc, #124]	; (800070c <MX_GPIO_Init+0x240>)
 8000690:	f000 fe68 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SD_Pin;
 8000694:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006a6:	2306      	movs	r3, #6
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4815      	ldr	r0, [pc, #84]	; (8000708 <MX_GPIO_Init+0x23c>)
 80006b2:	f000 fe57 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006b6:	2320      	movs	r3, #32
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4810      	ldr	r0, [pc, #64]	; (800070c <MX_GPIO_Init+0x240>)
 80006ca:	f000 fe4b 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <MX_GPIO_Init+0x238>)
 80006e4:	f000 fe3e 	bl	8001364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2006      	movs	r0, #6
 80006ee:	f000 fe02 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006f2:	2006      	movs	r0, #6
 80006f4:	f000 fe1b 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 80006f8:	bf00      	nop
 80006fa:	3730      	adds	r7, #48	; 0x30
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40021000 	.word	0x40021000
 8000708:	40020800 	.word	0x40020800
 800070c:	40020c00 	.word	0x40020c00
 8000710:	40020000 	.word	0x40020000
 8000714:	40020400 	.word	0x40020400

08000718 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C1_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <MX_I2C1_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C1_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_I2C1_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_I2C1_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C1_Init+0x50>)
 8000756:	f002 fbf7 	bl	8002f48 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f934 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000b0 	.word	0x200000b0
 800076c:	40005400 	.word	0x40005400
 8000770:	000186a0 	.word	0x000186a0

08000774 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <HAL_I2C_MspInit+0x84>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d12c      	bne.n	80007f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_I2C_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b8:	2312      	movs	r3, #18
 80007ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c4:	2304      	movs	r3, #4
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <HAL_I2C_MspInit+0x8c>)
 80007d0:	f000 fdc8 	bl	8001364 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_I2C_MspInit+0x88>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40005400 	.word	0x40005400
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020400 	.word	0x40020400

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fc04 	bl	8001014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f84c 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f7ff fe5c 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000814:	f7ff ff80 	bl	8000718 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000818:	f000 f8de 	bl	80009d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800081c:	f007 fe6c 	bl	80084f8 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000820:	f000 fa66 	bl	8000cf0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000824:	f000 fa16 	bl	8000c54 <MX_TIM2_Init>
  MX_UART4_Init();
 8000828:	f000 fb58 	bl	8000edc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800082c:	210c      	movs	r1, #12
 800082e:	4818      	ldr	r0, [pc, #96]	; (8000890 <main+0x8c>)
 8000830:	f003 fb08 	bl	8003e44 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000834:	4817      	ldr	r0, [pc, #92]	; (8000894 <main+0x90>)
 8000836:	f003 fa3b 	bl	8003cb0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //매크�?? ?��?���?? 2개로 ?��?��
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, ccr);
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <main+0x94>)
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <main+0x8c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	641a      	str	r2, [r3, #64]	; 0x40
	  //TIM4 -> CCR4 = ccr; //?��?�� 매크�?? ???�� ?��?���?? ?��?��?��?�� ?��
	  ccr += 1000;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <main+0x94>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <main+0x94>)
 8000850:	801a      	strh	r2, [r3, #0]
	  if(ccr > TIM4->ARR) ccr = 0;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <main+0x94>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <main+0x98>)
 800085a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085c:	429a      	cmp	r2, r3
 800085e:	d902      	bls.n	8000866 <main+0x62>
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <main+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(50);
 8000866:	2032      	movs	r0, #50	; 0x32
 8000868:	f000 fc46 	bl	80010f8 <HAL_Delay>

	  //UART Polling
	  //HAL_OK는 수신이 완료되었느냐를 판단 수신이 &a에 완료되면 if로 이동
	  if(HAL_UART_Receive(&huart4, &a, 1, 10) == HAL_OK) {
 800086c:	230a      	movs	r3, #10
 800086e:	2201      	movs	r2, #1
 8000870:	490b      	ldr	r1, [pc, #44]	; (80008a0 <main+0x9c>)
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <main+0xa0>)
 8000874:	f004 fae7 	bl	8004e46 <HAL_UART_Receive>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d105      	bne.n	800088a <main+0x86>
		  //받은 &a Data를 전송
		  HAL_UART_Transmit(&huart4, &a, 1, 10);
 800087e:	230a      	movs	r3, #10
 8000880:	2201      	movs	r2, #1
 8000882:	4907      	ldr	r1, [pc, #28]	; (80008a0 <main+0x9c>)
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <main+0xa0>)
 8000886:	f004 fa4c 	bl	8004d22 <HAL_UART_Transmit>
	  }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800088a:	f007 fe5b 	bl	8008544 <MX_USB_HOST_Process>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, ccr);
 800088e:	e7d4      	b.n	800083a <main+0x36>
 8000890:	200001ac 	.word	0x200001ac
 8000894:	20000164 	.word	0x20000164
 8000898:	20000104 	.word	0x20000104
 800089c:	40000800 	.word	0x40000800
 80008a0:	20000000 	.word	0x20000000
 80008a4:	200001f4 	.word	0x200001f4

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	; 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	2230      	movs	r2, #48	; 0x30
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f008 f960 	bl	8008b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <SystemClock_Config+0xcc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a27      	ldr	r2, [pc, #156]	; (8000974 <SystemClock_Config+0xcc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <SystemClock_Config+0xcc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <SystemClock_Config+0xd0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a21      	ldr	r2, [pc, #132]	; (8000978 <SystemClock_Config+0xd0>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <SystemClock_Config+0xd0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000918:	2308      	movs	r3, #8
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800091c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000926:	2307      	movs	r3, #7
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fc4e 	bl	80031d0 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800093a:	f000 f847 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2302      	movs	r3, #2
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800094a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800094e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2105      	movs	r1, #5
 800095c:	4618      	mov	r0, r3
 800095e:	f002 feaf 	bl	80036c0 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000968:	f000 f830 	bl	80009cc <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3750      	adds	r7, #80	; 0x50
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//Interrupt Switch
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d104      	bne.n	8000996 <HAL_GPIO_EXTI_Callback+0x1a>
		Blue_LED_Toggle;
 800098c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000992:	f000 fe9c 	bl	80016ce <HAL_GPIO_TogglePin>
	}
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40020c00 	.word	0x40020c00

080009a4 <HAL_TIM_PeriodElapsedCallback>:

//Timer Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b4:	d104      	bne.n	80009c0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		Green_LED_Toggle;
 80009b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ba:	4803      	ldr	r0, [pc, #12]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80009bc:	f000 fe87 	bl	80016ce <HAL_GPIO_TogglePin>
	}
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40020c00 	.word	0x40020c00

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_SPI1_Init+0x64>)
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <MX_SPI1_Init+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SPI1_Init+0x64>)
 80009e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SPI1_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_SPI1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SPI1_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_SPI1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SPI1_Init+0x64>)
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SPI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_SPI1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SPI1_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_SPI1_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SPI1_Init+0x64>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_SPI1_Init+0x64>)
 8000a2a:	f003 f869 	bl	8003b00 <HAL_SPI_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a34:	f7ff ffca 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000108 	.word	0x20000108
 8000a40:	40013000 	.word	0x40013000

08000a44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_SPI_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12b      	bne.n	8000abe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a9e:	23e0      	movs	r3, #224	; 0xe0
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_SPI_MspInit+0x8c>)
 8000aba:	f000 fc53 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40013000 	.word	0x40013000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fbe4 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 faa2 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 fdc1 	bl	8001704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM2_IRQHandler+0x10>)
 8000b8e:	f003 fa21 	bl	8003fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000164 	.word	0x20000164

08000b9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM4_IRQHandler+0x10>)
 8000ba2:	f003 fa17 	bl	8003fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001ac 	.word	0x200001ac

08000bb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <OTG_FS_IRQHandler+0x10>)
 8000bb6:	f001 f827 	bl	8001c08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000618 	.word	0x20000618

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f007 ff88 	bl	8008b08 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20020000 	.word	0x20020000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000160 	.word	0x20000160
 8000c2c:	20000930 	.word	0x20000930

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c7a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c88:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c9c:	f002 ffb9 	bl	8003c12 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ca6:	f7ff fe91 	bl	80009cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_TIM2_Init+0x98>)
 8000cb8:	f003 fb56 	bl	8004368 <HAL_TIM_ConfigClockSource>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cc2:	f7ff fe83 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_TIM2_Init+0x98>)
 8000cd4:	f003 ff48 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cde:	f7ff fe75 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000164 	.word	0x20000164

08000cf0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	; 0x38
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	f107 0320 	add.w	r3, r7, #32
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d22:	4a2e      	ldr	r2, [pc, #184]	; (8000ddc <MX_TIM4_Init+0xec>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d28:	2213      	movs	r2, #19
 8000d2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000-1;
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d34:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000d38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d46:	4824      	ldr	r0, [pc, #144]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d48:	f002 ff63 	bl	8003c12 <HAL_TIM_Base_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d52:	f7ff fe3b 	bl	80009cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d60:	4619      	mov	r1, r3
 8000d62:	481d      	ldr	r0, [pc, #116]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d64:	f003 fb00 	bl	8004368 <HAL_TIM_ConfigClockSource>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d6e:	f7ff fe2d 	bl	80009cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d72:	4819      	ldr	r0, [pc, #100]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d74:	f003 f80c 	bl	8003d90 <HAL_TIM_PWM_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d7e:	f7ff fe25 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000d92:	f003 fee9 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d9c:	f7ff fe16 	bl	80009cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da0:	2360      	movs	r3, #96	; 0x60
 8000da2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21000-1;
 8000da4:	f245 2307 	movw	r3, #20999	; 0x5207
 8000da8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	220c      	movs	r2, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000dba:	f003 fa13 	bl	80041e4 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000dc4:	f7ff fe02 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM4_Init+0xe8>)
 8000dca:	f000 f84d 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 8000dce:	bf00      	nop
 8000dd0:	3738      	adds	r7, #56	; 0x38
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001ac 	.word	0x200001ac
 8000ddc:	40000800 	.word	0x40000800

08000de0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df0:	d116      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_TIM_Base_MspInit+0x80>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <HAL_TIM_Base_MspInit+0x80>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_TIM_Base_MspInit+0x80>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	201c      	movs	r0, #28
 8000e14:	f000 fa6f 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e18:	201c      	movs	r0, #28
 8000e1a:	f000 fa88 	bl	800132e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e1e:	e01a      	b.n	8000e56 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_TIM_Base_MspInit+0x84>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d115      	bne.n	8000e56 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_TIM_Base_MspInit+0x80>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_TIM_Base_MspInit+0x80>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_TIM_Base_MspInit+0x80>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	201e      	movs	r0, #30
 8000e4c:	f000 fa53 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e50:	201e      	movs	r0, #30
 8000e52:	f000 fa6c 	bl	800132e <HAL_NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40000800 	.word	0x40000800

08000e68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <HAL_TIM_MspPostInit+0x68>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d11e      	bne.n	8000ec8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_TIM_MspPostInit+0x6c>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_TIM_MspPostInit+0x6c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_TIM_MspPostInit+0x70>)
 8000ec4:	f000 fa4e 	bl	8001364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40000800 	.word	0x40000800
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020c00 	.word	0x40020c00

08000edc <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_UART4_Init+0x4c>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <MX_UART4_Init+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_UART4_Init+0x4c>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_UART4_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_UART4_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_UART4_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_UART4_Init+0x4c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_UART4_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_UART4_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_UART4_Init+0x4c>)
 8000f14:	f003 feb8 	bl	8004c88 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f1e:	f7ff fd55 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001f4 	.word	0x200001f4
 8000f2c:	40004c00 	.word	0x40004c00

08000f30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d12c      	bne.n	8000fac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_UART_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_UART_MspInit+0x8c>)
 8000fa8:	f000 f9dc 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40004c00 	.word	0x40004c00
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <Reset_Handler>:
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopFillZerobss+0x12>
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <LoopFillZerobss+0x16>)
 8000fc6:	490e      	ldr	r1, [pc, #56]	; (8001000 <LoopFillZerobss+0x1a>)
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <LoopFillZerobss+0x1e>)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:
 8000fce:	58d4      	ldr	r4, [r2, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:
 8000fd4:	18c4      	adds	r4, r0, r3
 8000fd6:	428c      	cmp	r4, r1
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <LoopFillZerobss+0x22>)
 8000fdc:	4c0b      	ldr	r4, [pc, #44]	; (800100c <LoopFillZerobss+0x26>)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:
 8000fe6:	42a2      	cmp	r2, r4
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>
 8000fea:	f7ff fe21 	bl	8000c30 <SystemInit>
 8000fee:	f007 fd91 	bl	8008b14 <__libc_init_array>
 8000ff2:	f7ff fc07 	bl	8000804 <main>
 8000ff6:	4770      	bx	lr
 8000ff8:	20020000 	.word	0x20020000
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000094 	.word	0x20000094
 8001004:	08008dcc 	.word	0x08008dcc
 8001008:	20000094 	.word	0x20000094
 800100c:	2000092c 	.word	0x2000092c

08001010 <ADC_IRQHandler>:
 8001010:	e7fe      	b.n	8001010 <ADC_IRQHandler>
	...

08001014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <HAL_Init+0x40>)
 800101e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_Init+0x40>)
 800102a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_Init+0x40>)
 8001036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f94f 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f808 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff fd44 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023c00 	.word	0x40023c00

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x54>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x58>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f967 	bl	800134a <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f92f 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_InitTick+0x5c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000008 	.word	0x20000008

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000000c 	.word	0x2000000c
 80010dc:	20000238 	.word	0x20000238

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000238 	.word	0x20000238

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000000c 	.word	0x2000000c

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff3e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff8e 	bl	8001234 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff31 	bl	80011a4 <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e16b      	b.n	8001658 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 815a 	bne.w	8001652 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80b4 	beq.w	8001652 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b60      	ldr	r3, [pc, #384]	; (8001670 <HAL_GPIO_Init+0x30c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <HAL_GPIO_Init+0x30c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b5d      	ldr	r3, [pc, #372]	; (8001670 <HAL_GPIO_Init+0x30c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001506:	4a5b      	ldr	r2, [pc, #364]	; (8001674 <HAL_GPIO_Init+0x310>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_GPIO_Init+0x314>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02b      	beq.n	800158a <HAL_GPIO_Init+0x226>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a51      	ldr	r2, [pc, #324]	; (800167c <HAL_GPIO_Init+0x318>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x222>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a50      	ldr	r2, [pc, #320]	; (8001680 <HAL_GPIO_Init+0x31c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x21e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4f      	ldr	r2, [pc, #316]	; (8001684 <HAL_GPIO_Init+0x320>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x21a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4e      	ldr	r2, [pc, #312]	; (8001688 <HAL_GPIO_Init+0x324>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x216>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4d      	ldr	r2, [pc, #308]	; (800168c <HAL_GPIO_Init+0x328>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x212>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4c      	ldr	r2, [pc, #304]	; (8001690 <HAL_GPIO_Init+0x32c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4b      	ldr	r2, [pc, #300]	; (8001694 <HAL_GPIO_Init+0x330>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x20a>
 800156a:	2307      	movs	r3, #7
 800156c:	e00e      	b.n	800158c <HAL_GPIO_Init+0x228>
 800156e:	2308      	movs	r3, #8
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001572:	2306      	movs	r3, #6
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x228>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x228>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x228>
 800158a:	2300      	movs	r3, #0
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <HAL_GPIO_Init+0x310>)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_GPIO_Init+0x334>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ce:	4a32      	ldr	r2, [pc, #200]	; (8001698 <HAL_GPIO_Init+0x334>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_GPIO_Init+0x334>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f8:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_GPIO_Init+0x334>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_GPIO_Init+0x334>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_GPIO_Init+0x334>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_GPIO_Init+0x334>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800164c:	4a12      	ldr	r2, [pc, #72]	; (8001698 <HAL_GPIO_Init+0x334>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	f67f ae90 	bls.w	8001380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40013800 	.word	0x40013800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40021400 	.word	0x40021400
 8001690:	40021800 	.word	0x40021800
 8001694:	40021c00 	.word	0x40021c00
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e0:	887a      	ldrh	r2, [r7, #2]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	041a      	lsls	r2, r3, #16
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	400b      	ands	r3, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f92a 	bl	800097c <HAL_GPIO_EXTI_Callback>
  }
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40013c00 	.word	0x40013c00

08001734 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001736:	b08f      	sub	sp, #60	; 0x3c
 8001738:	af0a      	add	r7, sp, #40	; 0x28
 800173a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e054      	b.n	80017f0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d106      	bne.n	8001766 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f006 ff27 	bl	80085b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f003 ff55 	bl	8005634 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	687e      	ldr	r6, [r7, #4]
 8001792:	466d      	mov	r5, sp
 8001794:	f106 0410 	add.w	r4, r6, #16
 8001798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80017a8:	1d33      	adds	r3, r6, #4
 80017aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ac:	6838      	ldr	r0, [r7, #0]
 80017ae:	f003 fecf 	bl	8005550 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2101      	movs	r1, #1
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 ff4c 	bl	8005656 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	687e      	ldr	r6, [r7, #4]
 80017c6:	466d      	mov	r5, sp
 80017c8:	f106 0410 	add.w	r4, r6, #16
 80017cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80017dc:	1d33      	adds	r3, r6, #4
 80017de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f004 f8d5 	bl	8005990 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017f8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af04      	add	r7, sp, #16
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4603      	mov	r3, r0
 8001808:	70fb      	strb	r3, [r7, #3]
 800180a:	460b      	mov	r3, r1
 800180c:	70bb      	strb	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <HAL_HCD_HC_Init+0x28>
 800181c:	2302      	movs	r3, #2
 800181e:	e076      	b.n	800190e <HAL_HCD_HC_Init+0x116>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	333d      	adds	r3, #61	; 0x3d
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	212c      	movs	r1, #44	; 0x2c
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	3338      	adds	r3, #56	; 0x38
 8001848:	787a      	ldrb	r2, [r7, #1]
 800184a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3340      	adds	r3, #64	; 0x40
 800185a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800185c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	3339      	adds	r3, #57	; 0x39
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	333f      	adds	r3, #63	; 0x3f
 800187e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001882:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	78ba      	ldrb	r2, [r7, #2]
 8001888:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800188c:	b2d0      	uxtb	r0, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	333a      	adds	r3, #58	; 0x3a
 800189a:	4602      	mov	r2, r0
 800189c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800189e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da09      	bge.n	80018ba <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	333b      	adds	r3, #59	; 0x3b
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	e008      	b.n	80018cc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	212c      	movs	r1, #44	; 0x2c
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	333b      	adds	r3, #59	; 0x3b
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	212c      	movs	r1, #44	; 0x2c
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	333c      	adds	r3, #60	; 0x3c
 80018da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018de:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	787c      	ldrb	r4, [r7, #1]
 80018e6:	78ba      	ldrb	r2, [r7, #2]
 80018e8:	78f9      	ldrb	r1, [r7, #3]
 80018ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	4623      	mov	r3, r4
 80018fc:	f004 f9ce 	bl	8005c9c <USB_HC_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}

08001916 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_HCD_HC_Halt+0x1e>
 8001930:	2302      	movs	r3, #2
 8001932:	e00f      	b.n	8001954 <HAL_HCD_HC_Halt+0x3e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f004 fc1e 	bl	8006186 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	4608      	mov	r0, r1
 8001966:	4611      	mov	r1, r2
 8001968:	461a      	mov	r2, r3
 800196a:	4603      	mov	r3, r0
 800196c:	70fb      	strb	r3, [r7, #3]
 800196e:	460b      	mov	r3, r1
 8001970:	70bb      	strb	r3, [r7, #2]
 8001972:	4613      	mov	r3, r2
 8001974:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	333b      	adds	r3, #59	; 0x3b
 8001984:	78ba      	ldrb	r2, [r7, #2]
 8001986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	212c      	movs	r1, #44	; 0x2c
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	333f      	adds	r3, #63	; 0x3f
 8001996:	787a      	ldrb	r2, [r7, #1]
 8001998:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800199a:	7c3b      	ldrb	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d112      	bne.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3342      	adds	r3, #66	; 0x42
 80019ae:	2203      	movs	r2, #3
 80019b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	333d      	adds	r3, #61	; 0x3d
 80019c0:	7f3a      	ldrb	r2, [r7, #28]
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e008      	b.n	80019d8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3342      	adds	r3, #66	; 0x42
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	f200 80c6 	bhi.w	8001b6c <HAL_HCD_HC_SubmitRequest+0x210>
 80019e0:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e6:	bf00      	nop
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	08001b59 	.word	0x08001b59
 80019f0:	08001a5d 	.word	0x08001a5d
 80019f4:	08001adb 	.word	0x08001adb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019f8:	7c3b      	ldrb	r3, [r7, #16]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	f040 80b8 	bne.w	8001b70 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a00:	78bb      	ldrb	r3, [r7, #2]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 80b4 	bne.w	8001b70 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a08:	8b3b      	ldrh	r3, [r7, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3355      	adds	r3, #85	; 0x55
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3355      	adds	r3, #85	; 0x55
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	3342      	adds	r3, #66	; 0x42
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a46:	e093      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	3342      	adds	r3, #66	; 0x42
 8001a56:	2202      	movs	r2, #2
 8001a58:	701a      	strb	r2, [r3, #0]
      break;
 8001a5a:	e089      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a5c:	78bb      	ldrb	r3, [r7, #2]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d11d      	bne.n	8001a9e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	212c      	movs	r1, #44	; 0x2c
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3355      	adds	r3, #85	; 0x55
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	212c      	movs	r1, #44	; 0x2c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	3342      	adds	r3, #66	; 0x42
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a88:	e073      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	212c      	movs	r1, #44	; 0x2c
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	3342      	adds	r3, #66	; 0x42
 8001a98:	2202      	movs	r2, #2
 8001a9a:	701a      	strb	r2, [r3, #0]
      break;
 8001a9c:	e069      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	212c      	movs	r1, #44	; 0x2c
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3354      	adds	r3, #84	; 0x54
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3342      	adds	r3, #66	; 0x42
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
      break;
 8001ac4:	e055      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	212c      	movs	r1, #44	; 0x2c
 8001acc:	fb01 f303 	mul.w	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3342      	adds	r3, #66	; 0x42
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	701a      	strb	r2, [r3, #0]
      break;
 8001ad8:	e04b      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ada:	78bb      	ldrb	r3, [r7, #2]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11d      	bne.n	8001b1c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	212c      	movs	r1, #44	; 0x2c
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	3355      	adds	r3, #85	; 0x55
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	212c      	movs	r1, #44	; 0x2c
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	3342      	adds	r3, #66	; 0x42
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b06:	e034      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	212c      	movs	r1, #44	; 0x2c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	3342      	adds	r3, #66	; 0x42
 8001b16:	2202      	movs	r2, #2
 8001b18:	701a      	strb	r2, [r3, #0]
      break;
 8001b1a:	e02a      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	212c      	movs	r1, #44	; 0x2c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	3354      	adds	r3, #84	; 0x54
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d109      	bne.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3342      	adds	r3, #66	; 0x42
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
      break;
 8001b42:	e016      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3342      	adds	r3, #66	; 0x42
 8001b52:	2202      	movs	r2, #2
 8001b54:	701a      	strb	r2, [r3, #0]
      break;
 8001b56:	e00c      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3342      	adds	r3, #66	; 0x42
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b6c:	bf00      	nop
 8001b6e:	e000      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b70:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3344      	adds	r3, #68	; 0x44
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	8b3a      	ldrh	r2, [r7, #24]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	202c      	movs	r0, #44	; 0x2c
 8001b8c:	fb00 f303 	mul.w	r3, r0, r3
 8001b90:	440b      	add	r3, r1
 8001b92:	334c      	adds	r3, #76	; 0x4c
 8001b94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3360      	adds	r3, #96	; 0x60
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3350      	adds	r3, #80	; 0x50
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3339      	adds	r3, #57	; 0x39
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3361      	adds	r3, #97	; 0x61
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	222c      	movs	r2, #44	; 0x2c
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	3338      	adds	r3, #56	; 0x38
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	18d1      	adds	r1, r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f004 f972 	bl	8005ee0 <USB_HC_StartXfer>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop

08001c08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fe73 	bl	800590a <USB_GetMode>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	f040 80f6 	bne.w	8001e18 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 fe57 	bl	80058e4 <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80ec 	beq.w	8001e16 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fe4e 	bl	80058e4 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c52:	d104      	bne.n	8001c5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fe3e 	bl	80058e4 <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c72:	d104      	bne.n	8001c7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fe2e 	bl	80058e4 <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c92:	d104      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fe1e 	bl	80058e4 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d103      	bne.n	8001cba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fe10 	bl	80058e4 <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cce:	d11c      	bne.n	8001d0a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cd8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cea:	2110      	movs	r1, #16
 8001cec:	6938      	ldr	r0, [r7, #16]
 8001cee:	f003 fcff 	bl	80056f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cf2:	6938      	ldr	r0, [r7, #16]
 8001cf4:	f003 fd30 	bl	8005758 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 ff06 	bl	8005b10 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f006 fcd3 	bl	80086b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fde8 	bl	80058e4 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1e:	d102      	bne.n	8001d26 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f001 f89e 	bl	8002e62 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fdda 	bl	80058e4 <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d106      	bne.n	8001d48 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f006 fc9c 	bl	8008678 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2208      	movs	r2, #8
 8001d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fdc9 	bl	80058e4 <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d101      	bne.n	8001d60 <HAL_HCD_IRQHandler+0x158>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_HCD_IRQHandler+0x15a>
 8001d60:	2300      	movs	r3, #0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d012      	beq.n	8001d8c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0210 	bic.w	r2, r2, #16
 8001d74:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 ffa1 	bl	8002cbe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0210 	orr.w	r2, r2, #16
 8001d8a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fda7 	bl	80058e4 <USB_ReadInterrupts>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001da0:	d13a      	bne.n	8001e18 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 f9dc 	bl	8006164 <USB_HC_ReadInterrupt>
 8001dac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e025      	b.n	8001e00 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d018      	beq.n	8001dfa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dde:	d106      	bne.n	8001dee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8ab 	bl	8001f42 <HCD_HC_IN_IRQHandler>
 8001dec:	e005      	b.n	8001dfa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fbf9 	bl	80025ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3d4      	bcc.n	8001db4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e12:	615a      	str	r2, [r3, #20]
 8001e14:	e000      	b.n	8001e18 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e16:	bf00      	nop
    }
  }
}
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_HCD_Start+0x16>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e013      	b.n	8001e5c <HAL_HCD_Start+0x3e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fec8 	bl	8005bd8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 fbe0 	bl	8005612 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_HCD_Stop+0x16>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e00d      	b.n	8001e96 <HAL_HCD_Stop+0x32>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 fab6 	bl	80063f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fe6a 	bl	8005b84 <USB_ResetPort>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3360      	adds	r3, #96	; 0x60
 8001ed4:	781b      	ldrb	r3, [r3, #0]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3350      	adds	r3, #80	; 0x50
 8001efc:	681b      	ldr	r3, [r3, #0]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 feae 	bl	8005c78 <USB_GetCurrentFrame>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 fe89 	bl	8005c4a <USB_GetHostSpeed>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d11a      	bne.n	8001fa8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2304      	movs	r3, #4
 8001f82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3361      	adds	r3, #97	; 0x61
 8001f92:	2206      	movs	r2, #6
 8001f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 f8f0 	bl	8006186 <USB_HC_Halt>
 8001fa6:	e0af      	b.n	8002108 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fbe:	d11b      	bne.n	8001ff8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3361      	adds	r3, #97	; 0x61
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 f8c8 	bl	8006186 <USB_HC_Halt>
 8001ff6:	e087      	b.n	8002108 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b20      	cmp	r3, #32
 800200c:	d109      	bne.n	8002022 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	461a      	mov	r2, r3
 800201c:	2320      	movs	r3, #32
 800201e:	6093      	str	r3, [r2, #8]
 8002020:	e072      	b.n	8002108 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b08      	cmp	r3, #8
 8002036:	d11a      	bne.n	800206e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	461a      	mov	r2, r3
 8002046:	2308      	movs	r3, #8
 8002048:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3361      	adds	r3, #97	; 0x61
 8002058:	2205      	movs	r2, #5
 800205a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f004 f88d 	bl	8006186 <USB_HC_Halt>
 800206c:	e04c      	b.n	8002108 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002084:	d11b      	bne.n	80020be <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	461a      	mov	r2, r3
 8002094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002098:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3361      	adds	r3, #97	; 0x61
 80020a8:	2208      	movs	r2, #8
 80020aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f865 	bl	8006186 <USB_HC_Halt>
 80020bc:	e024      	b.n	8002108 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d119      	bne.n	8002108 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	461a      	mov	r2, r3
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	3361      	adds	r3, #97	; 0x61
 80020f4:	2206      	movs	r2, #6
 80020f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f004 f83f 	bl	8006186 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800211e:	d112      	bne.n	8002146 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f004 f82b 	bl	8006186 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	461a      	mov	r2, r3
 800213e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002142:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002144:	e24e      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	f040 80df 	bne.w	800231c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d019      	beq.n	800219a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3348      	adds	r3, #72	; 0x48
 8002174:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	0159      	lsls	r1, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	440b      	add	r3, r1
 800217e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	202c      	movs	r0, #44	; 0x2c
 8002190:	fb00 f303 	mul.w	r3, r0, r3
 8002194:	440b      	add	r3, r1
 8002196:	3350      	adds	r3, #80	; 0x50
 8002198:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3361      	adds	r3, #97	; 0x61
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	335c      	adds	r3, #92	; 0x5c
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	461a      	mov	r2, r3
 80021cc:	2301      	movs	r3, #1
 80021ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	333f      	adds	r3, #63	; 0x3f
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	333f      	adds	r3, #63	; 0x3f
 80021f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d111      	bne.n	800221c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f003 ffbf 	bl	8006186 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	461a      	mov	r2, r3
 8002216:	2310      	movs	r3, #16
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	e03a      	b.n	8002292 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	333f      	adds	r3, #63	; 0x3f
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d009      	beq.n	8002244 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	333f      	adds	r3, #63	; 0x3f
 800223e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002240:	2b01      	cmp	r3, #1
 8002242:	d126      	bne.n	8002292 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	0151      	lsls	r1, r2, #5
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	440a      	add	r2, r1
 800225a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800225e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002262:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3360      	adds	r3, #96	; 0x60
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	b2d9      	uxtb	r1, r3
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	202c      	movs	r0, #44	; 0x2c
 8002280:	fb00 f303 	mul.w	r3, r0, r3
 8002284:	4413      	add	r3, r2
 8002286:	3360      	adds	r3, #96	; 0x60
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f006 fa1d 	bl	80086cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d12b      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3348      	adds	r3, #72	; 0x48
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	202c      	movs	r0, #44	; 0x2c
 80022b0:	fb00 f202 	mul.w	r2, r0, r2
 80022b4:	440a      	add	r2, r1
 80022b6:	3240      	adds	r2, #64	; 0x40
 80022b8:	8812      	ldrh	r2, [r2, #0]
 80022ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 818e 	beq.w	80025e4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	3354      	adds	r3, #84	; 0x54
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	f083 0301 	eor.w	r3, r3, #1
 80022dc:	b2d8      	uxtb	r0, r3
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3354      	adds	r3, #84	; 0x54
 80022ec:	4602      	mov	r2, r0
 80022ee:	701a      	strb	r2, [r3, #0]
}
 80022f0:	e178      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3354      	adds	r3, #84	; 0x54
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	f083 0301 	eor.w	r3, r3, #1
 8002306:	b2d8      	uxtb	r0, r3
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3354      	adds	r3, #84	; 0x54
 8002316:	4602      	mov	r2, r0
 8002318:	701a      	strb	r2, [r3, #0]
}
 800231a:	e163      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b02      	cmp	r3, #2
 8002330:	f040 80f6 	bne.w	8002520 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3361      	adds	r3, #97	; 0x61
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d109      	bne.n	800235c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	3360      	adds	r3, #96	; 0x60
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e0c9      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3361      	adds	r3, #97	; 0x61
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b05      	cmp	r3, #5
 800236e:	d109      	bne.n	8002384 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	3360      	adds	r3, #96	; 0x60
 800237e:	2205      	movs	r2, #5
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e0b5      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3361      	adds	r3, #97	; 0x61
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b06      	cmp	r3, #6
 8002396:	d009      	beq.n	80023ac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	3361      	adds	r3, #97	; 0x61
 80023a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d150      	bne.n	800244e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	335c      	adds	r3, #92	; 0x5c
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	202c      	movs	r0, #44	; 0x2c
 80023c4:	fb00 f303 	mul.w	r3, r0, r3
 80023c8:	440b      	add	r3, r1
 80023ca:	335c      	adds	r3, #92	; 0x5c
 80023cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	335c      	adds	r3, #92	; 0x5c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d912      	bls.n	8002408 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	335c      	adds	r3, #92	; 0x5c
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3360      	adds	r3, #96	; 0x60
 8002402:	2204      	movs	r2, #4
 8002404:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002406:	e073      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3360      	adds	r3, #96	; 0x60
 8002416:	2202      	movs	r2, #2
 8002418:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002430:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002438:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	461a      	mov	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800244c:	e050      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3361      	adds	r3, #97	; 0x61
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d122      	bne.n	80024a8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3360      	adds	r3, #96	; 0x60
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800248a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002492:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e023      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3361      	adds	r3, #97	; 0x61
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b07      	cmp	r3, #7
 80024ba:	d119      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	335c      	adds	r3, #92	; 0x5c
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	202c      	movs	r0, #44	; 0x2c
 80024d4:	fb00 f303 	mul.w	r3, r0, r3
 80024d8:	440b      	add	r3, r1
 80024da:	335c      	adds	r3, #92	; 0x5c
 80024dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	3360      	adds	r3, #96	; 0x60
 80024ec:	2204      	movs	r2, #4
 80024ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	461a      	mov	r2, r3
 80024fe:	2302      	movs	r3, #2
 8002500:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	b2d9      	uxtb	r1, r3
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	202c      	movs	r0, #44	; 0x2c
 800250c:	fb00 f303 	mul.w	r3, r0, r3
 8002510:	4413      	add	r3, r2
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f006 f8d7 	bl	80086cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800251e:	e061      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b10      	cmp	r3, #16
 8002534:	d156      	bne.n	80025e4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	333f      	adds	r3, #63	; 0x3f
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d111      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	335c      	adds	r3, #92	; 0x5c
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fe0d 	bl	8006186 <USB_HC_Halt>
 800256c:	e031      	b.n	80025d2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	333f      	adds	r3, #63	; 0x3f
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	333f      	adds	r3, #63	; 0x3f
 8002590:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002592:	2b02      	cmp	r3, #2
 8002594:	d11d      	bne.n	80025d2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	335c      	adds	r3, #92	; 0x5c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d110      	bne.n	80025d2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3361      	adds	r3, #97	; 0x61
 80025be:	2203      	movs	r2, #3
 80025c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fdda 	bl	8006186 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	461a      	mov	r2, r3
 80025e0:	2310      	movs	r3, #16
 80025e2:	6093      	str	r3, [r2, #8]
}
 80025e4:	bf00      	nop
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b04      	cmp	r3, #4
 800261a:	d11a      	bne.n	8002652 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	461a      	mov	r2, r3
 800262a:	2304      	movs	r3, #4
 800262c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3361      	adds	r3, #97	; 0x61
 800263c:	2206      	movs	r2, #6
 800263e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fd9b 	bl	8006186 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002650:	e331      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b20      	cmp	r3, #32
 8002666:	d12e      	bne.n	80026c6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2320      	movs	r3, #32
 8002678:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	333d      	adds	r3, #61	; 0x3d
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	f040 8313 	bne.w	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	333d      	adds	r3, #61	; 0x3d
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3360      	adds	r3, #96	; 0x60
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fd61 	bl	8006186 <USB_HC_Halt>
}
 80026c4:	e2f7      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026dc:	d112      	bne.n	8002704 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	461a      	mov	r2, r3
 80026ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 fd42 	bl	8006186 <USB_HC_Halt>
}
 8002702:	e2d8      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d140      	bne.n	800279c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	335c      	adds	r3, #92	; 0x5c
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d111      	bne.n	8002766 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	333d      	adds	r3, #61	; 0x3d
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	2340      	movs	r3, #64	; 0x40
 8002764:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2301      	movs	r3, #1
 8002776:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3361      	adds	r3, #97	; 0x61
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f003 fcf6 	bl	8006186 <USB_HC_Halt>
}
 800279a:	e28c      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ae:	2b40      	cmp	r3, #64	; 0x40
 80027b0:	d12c      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3361      	adds	r3, #97	; 0x61
 80027c0:	2204      	movs	r2, #4
 80027c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	333d      	adds	r3, #61	; 0x3d
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	335c      	adds	r3, #92	; 0x5c
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fcc7 	bl	8006186 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	6093      	str	r3, [r2, #8]
}
 800280a:	e254      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b08      	cmp	r3, #8
 8002820:	d11a      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	461a      	mov	r2, r3
 8002830:	2308      	movs	r3, #8
 8002832:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3361      	adds	r3, #97	; 0x61
 8002842:	2205      	movs	r2, #5
 8002844:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f003 fc98 	bl	8006186 <USB_HC_Halt>
}
 8002856:	e22e      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b10      	cmp	r3, #16
 800286c:	d140      	bne.n	80028f0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	335c      	adds	r3, #92	; 0x5c
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3361      	adds	r3, #97	; 0x61
 800288e:	2203      	movs	r2, #3
 8002890:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	333d      	adds	r3, #61	; 0x3d
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d112      	bne.n	80028cc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	333c      	adds	r3, #60	; 0x3c
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d108      	bne.n	80028cc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	333d      	adds	r3, #61	; 0x3d
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fc55 	bl	8006186 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2310      	movs	r3, #16
 80028ec:	6093      	str	r3, [r2, #8]
}
 80028ee:	e1e2      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d164      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d111      	bne.n	8002932 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	3361      	adds	r3, #97	; 0x61
 800291c:	2206      	movs	r2, #6
 800291e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f003 fc2b 	bl	8006186 <USB_HC_Halt>
 8002930:	e044      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	335c      	adds	r3, #92	; 0x5c
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	440b      	add	r3, r1
 8002950:	335c      	adds	r3, #92	; 0x5c
 8002952:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	335c      	adds	r3, #92	; 0x5c
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d920      	bls.n	80029aa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	335c      	adds	r3, #92	; 0x5c
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3360      	adds	r3, #96	; 0x60
 8002988:	2204      	movs	r2, #4
 800298a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	b2d9      	uxtb	r1, r3
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	202c      	movs	r0, #44	; 0x2c
 8002996:	fb00 f303 	mul.w	r3, r0, r3
 800299a:	4413      	add	r3, r2
 800299c:	3360      	adds	r3, #96	; 0x60
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f005 fe92 	bl	80086cc <HAL_HCD_HC_NotifyURBChange_Callback>
 80029a8:	e008      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	3360      	adds	r3, #96	; 0x60
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	461a      	mov	r2, r3
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	6093      	str	r3, [r2, #8]
}
 80029ce:	e172      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e6:	d11b      	bne.n	8002a20 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3361      	adds	r3, #97	; 0x61
 80029f6:	2208      	movs	r2, #8
 80029f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 fbbe 	bl	8006186 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	461a      	mov	r2, r3
 8002a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1c:	6093      	str	r3, [r2, #8]
}
 8002a1e:	e14a      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	f040 813f 	bne.w	8002cb6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3361      	adds	r3, #97	; 0x61
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d17d      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3360      	adds	r3, #96	; 0x60
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	333f      	adds	r3, #63	; 0x3f
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d00a      	beq.n	8002a88 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	333f      	adds	r3, #63	; 0x3f
 8002a80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	f040 8100 	bne.w	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d113      	bne.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3355      	adds	r3, #85	; 0x55
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	f083 0301 	eor.w	r3, r3, #1
 8002aa4:	b2d8      	uxtb	r0, r3
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3355      	adds	r3, #85	; 0x55
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f040 80e3 	bne.w	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	334c      	adds	r3, #76	; 0x4c
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80d8 	beq.w	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	334c      	adds	r3, #76	; 0x4c
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	202c      	movs	r0, #44	; 0x2c
 8002aee:	fb00 f202 	mul.w	r2, r0, r2
 8002af2:	440a      	add	r2, r1
 8002af4:	3240      	adds	r2, #64	; 0x40
 8002af6:	8812      	ldrh	r2, [r2, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	202c      	movs	r0, #44	; 0x2c
 8002b02:	fb00 f202 	mul.w	r2, r0, r2
 8002b06:	440a      	add	r2, r1
 8002b08:	3240      	adds	r2, #64	; 0x40
 8002b0a:	8812      	ldrh	r2, [r2, #0]
 8002b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80b5 	beq.w	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3355      	adds	r3, #85	; 0x55
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	f083 0301 	eor.w	r3, r3, #1
 8002b32:	b2d8      	uxtb	r0, r3
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3355      	adds	r3, #85	; 0x55
 8002b42:	4602      	mov	r2, r0
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e09f      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3361      	adds	r3, #97	; 0x61
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d109      	bne.n	8002b70 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3360      	adds	r3, #96	; 0x60
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e08b      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3361      	adds	r3, #97	; 0x61
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d109      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e077      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3361      	adds	r3, #97	; 0x61
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d109      	bne.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3360      	adds	r3, #96	; 0x60
 8002bba:	2205      	movs	r2, #5
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e063      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3361      	adds	r3, #97	; 0x61
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d009      	beq.n	8002be8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3361      	adds	r3, #97	; 0x61
 8002be2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d14f      	bne.n	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	335c      	adds	r3, #92	; 0x5c
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	202c      	movs	r0, #44	; 0x2c
 8002c00:	fb00 f303 	mul.w	r3, r0, r3
 8002c04:	440b      	add	r3, r1
 8002c06:	335c      	adds	r3, #92	; 0x5c
 8002c08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	335c      	adds	r3, #92	; 0x5c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d912      	bls.n	8002c44 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3360      	adds	r3, #96	; 0x60
 8002c3e:	2204      	movs	r2, #4
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e021      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3360      	adds	r3, #96	; 0x60
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c6c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c74:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	461a      	mov	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2302      	movs	r3, #2
 8002c98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	b2d9      	uxtb	r1, r3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	202c      	movs	r0, #44	; 0x2c
 8002ca4:	fb00 f303 	mul.w	r3, r0, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3360      	adds	r3, #96	; 0x60
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f005 fd0b 	bl	80086cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cb6:	bf00      	nop
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b08a      	sub	sp, #40	; 0x28
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	0c5b      	lsrs	r3, r3, #17
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cf2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d004      	beq.n	8002d04 <HCD_RXQLVL_IRQHandler+0x46>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	f000 80a9 	beq.w	8002e54 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d02:	e0aa      	b.n	8002e5a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80a6 	beq.w	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3344      	adds	r3, #68	; 0x44
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 809b 	beq.w	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3350      	adds	r3, #80	; 0x50
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	441a      	add	r2, r3
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	202c      	movs	r0, #44	; 0x2c
 8002d3c:	fb00 f303 	mul.w	r3, r0, r3
 8002d40:	440b      	add	r3, r1
 8002d42:	334c      	adds	r3, #76	; 0x4c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d87a      	bhi.n	8002e40 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3344      	adds	r3, #68	; 0x44
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	b292      	uxth	r2, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f002 fd66 	bl	8005834 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3344      	adds	r3, #68	; 0x44
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	202c      	movs	r0, #44	; 0x2c
 8002d82:	fb00 f303 	mul.w	r3, r0, r3
 8002d86:	440b      	add	r3, r1
 8002d88:	3344      	adds	r3, #68	; 0x44
 8002d8a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3350      	adds	r3, #80	; 0x50
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	441a      	add	r2, r3
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	202c      	movs	r0, #44	; 0x2c
 8002da6:	fb00 f303 	mul.w	r3, r0, r3
 8002daa:	440b      	add	r3, r1
 8002dac:	3350      	adds	r3, #80	; 0x50
 8002dae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	0cdb      	lsrs	r3, r3, #19
 8002dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3340      	adds	r3, #64	; 0x40
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d13c      	bne.n	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d039      	beq.n	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dfa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e02:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3354      	adds	r3, #84	; 0x54
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f083 0301 	eor.w	r3, r3, #1
 8002e2a:	b2d8      	uxtb	r0, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3354      	adds	r3, #84	; 0x54
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	701a      	strb	r2, [r3, #0]
      break;
 8002e3e:	e00b      	b.n	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3360      	adds	r3, #96	; 0x60
 8002e4e:	2204      	movs	r2, #4
 8002e50:	701a      	strb	r2, [r3, #0]
      break;
 8002e52:	e001      	b.n	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e54:	bf00      	nop
 8002e56:	e000      	b.n	8002e5a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e58:	bf00      	nop
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	; 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e8e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d10b      	bne.n	8002eb2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f005 fbf5 	bl	8008694 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d132      	bne.n	8002f22 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f043 0308 	orr.w	r3, r3, #8
 8002ec2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d126      	bne.n	8002f1c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d113      	bne.n	8002efe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002edc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ee0:	d106      	bne.n	8002ef0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fe11 	bl	8005b10 <USB_InitFSLSPClkSel>
 8002eee:	e011      	b.n	8002f14 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 fe0a 	bl	8005b10 <USB_InitFSLSPClkSel>
 8002efc:	e00a      	b.n	8002f14 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f12:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f005 fbe7 	bl	80086e8 <HAL_HCD_PortEnabled_Callback>
 8002f1a:	e002      	b.n	8002f22 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f005 fbf1 	bl	8008704 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d103      	bne.n	8002f34 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f043 0320 	orr.w	r3, r3, #32
 8002f32:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6013      	str	r3, [r2, #0]
}
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e12b      	b.n	80031b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fc00 	bl	8000774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2224      	movs	r2, #36	; 0x24
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fac:	f000 fd80 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 8002fb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4a81      	ldr	r2, [pc, #516]	; (80031bc <HAL_I2C_Init+0x274>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d807      	bhi.n	8002fcc <HAL_I2C_Init+0x84>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a80      	ldr	r2, [pc, #512]	; (80031c0 <HAL_I2C_Init+0x278>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bf94      	ite	ls
 8002fc4:	2301      	movls	r3, #1
 8002fc6:	2300      	movhi	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e006      	b.n	8002fda <HAL_I2C_Init+0x92>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a7d      	ldr	r2, [pc, #500]	; (80031c4 <HAL_I2C_Init+0x27c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0e7      	b.n	80031b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a78      	ldr	r2, [pc, #480]	; (80031c8 <HAL_I2C_Init+0x280>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0c9b      	lsrs	r3, r3, #18
 8002fec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a6a      	ldr	r2, [pc, #424]	; (80031bc <HAL_I2C_Init+0x274>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d802      	bhi.n	800301c <HAL_I2C_Init+0xd4>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3301      	adds	r3, #1
 800301a:	e009      	b.n	8003030 <HAL_I2C_Init+0xe8>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	4a69      	ldr	r2, [pc, #420]	; (80031cc <HAL_I2C_Init+0x284>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	3301      	adds	r3, #1
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003042:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	495c      	ldr	r1, [pc, #368]	; (80031bc <HAL_I2C_Init+0x274>)
 800304c:	428b      	cmp	r3, r1
 800304e:	d819      	bhi.n	8003084 <HAL_I2C_Init+0x13c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e59      	subs	r1, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fbb1 f3f3 	udiv	r3, r1, r3
 800305e:	1c59      	adds	r1, r3, #1
 8003060:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003064:	400b      	ands	r3, r1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_I2C_Init+0x138>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1e59      	subs	r1, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fbb1 f3f3 	udiv	r3, r1, r3
 8003078:	3301      	adds	r3, #1
 800307a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307e:	e051      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003080:	2304      	movs	r3, #4
 8003082:	e04f      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d111      	bne.n	80030b0 <HAL_I2C_Init+0x168>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	440b      	add	r3, r1
 800309a:	fbb0 f3f3 	udiv	r3, r0, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e012      	b.n	80030d6 <HAL_I2C_Init+0x18e>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	0099      	lsls	r1, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Init+0x196>
 80030da:	2301      	movs	r3, #1
 80030dc:	e022      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10e      	bne.n	8003104 <HAL_I2C_Init+0x1bc>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1e58      	subs	r0, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6859      	ldr	r1, [r3, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	440b      	add	r3, r1
 80030f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003102:	e00f      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	0099      	lsls	r1, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	6809      	ldr	r1, [r1, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6911      	ldr	r1, [r2, #16]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	430b      	orrs	r3, r1
 8003166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	000186a0 	.word	0x000186a0
 80031c0:	001e847f 	.word	0x001e847f
 80031c4:	003d08ff 	.word	0x003d08ff
 80031c8:	431bde83 	.word	0x431bde83
 80031cc:	10624dd3 	.word	0x10624dd3

080031d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e267      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d075      	beq.n	80032da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ee:	4b88      	ldr	r3, [pc, #544]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00c      	beq.n	8003214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fa:	4b85      	ldr	r3, [pc, #532]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003202:	2b08      	cmp	r3, #8
 8003204:	d112      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003206:	4b82      	ldr	r3, [pc, #520]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003212:	d10b      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	4b7e      	ldr	r3, [pc, #504]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d05b      	beq.n	80032d8 <HAL_RCC_OscConfig+0x108>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d157      	bne.n	80032d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e242      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d106      	bne.n	8003244 <HAL_RCC_OscConfig+0x74>
 8003236:	4b76      	ldr	r3, [pc, #472]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a75      	ldr	r2, [pc, #468]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x98>
 800324e:	4b70      	ldr	r3, [pc, #448]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6f      	ldr	r2, [pc, #444]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b6d      	ldr	r3, [pc, #436]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6c      	ldr	r2, [pc, #432]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003268:	4b69      	ldr	r3, [pc, #420]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a68      	ldr	r2, [pc, #416]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a65      	ldr	r2, [pc, #404]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd ff2a 	bl	80010e0 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd ff26 	bl	80010e0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e207      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b5b      	ldr	r3, [pc, #364]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xc0>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fd ff16 	bl	80010e0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd ff12 	bl	80010e0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1f3      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	4b51      	ldr	r3, [pc, #324]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0xe8>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e6:	4b4a      	ldr	r3, [pc, #296]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fe:	4b44      	ldr	r3, [pc, #272]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1c7      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4937      	ldr	r1, [pc, #220]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	e03a      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_RCC_OscConfig+0x244>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd fecb 	bl	80010e0 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334e:	f7fd fec7 	bl	80010e0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1a8      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	4b28      	ldr	r3, [pc, #160]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4925      	ldr	r1, [pc, #148]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_OscConfig+0x244>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fd feaa 	bl	80010e0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003390:	f7fd fea6 	bl	80010e0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e187      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d036      	beq.n	8003428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_RCC_OscConfig+0x248>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fd fe8a 	bl	80010e0 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fd fe86 	bl	80010e0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e167      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80033e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x200>
 80033ee:	e01b      	b.n	8003428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_OscConfig+0x248>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7fd fe73 	bl	80010e0 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	e00e      	b.n	800341c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fe:	f7fd fe6f 	bl	80010e0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d907      	bls.n	800341c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e150      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
 8003410:	40023800 	.word	0x40023800
 8003414:	42470000 	.word	0x42470000
 8003418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800341e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ea      	bne.n	80033fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8097 	beq.w	8003564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343a:	4b81      	ldr	r3, [pc, #516]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10f      	bne.n	8003466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	4b7d      	ldr	r3, [pc, #500]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	4a7c      	ldr	r2, [pc, #496]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003454:	6413      	str	r3, [r2, #64]	; 0x40
 8003456:	4b7a      	ldr	r3, [pc, #488]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003466:	4b77      	ldr	r3, [pc, #476]	; (8003644 <HAL_RCC_OscConfig+0x474>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d118      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003472:	4b74      	ldr	r3, [pc, #464]	; (8003644 <HAL_RCC_OscConfig+0x474>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a73      	ldr	r2, [pc, #460]	; (8003644 <HAL_RCC_OscConfig+0x474>)
 8003478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347e:	f7fd fe2f 	bl	80010e0 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003486:	f7fd fe2b 	bl	80010e0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e10c      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <HAL_RCC_OscConfig+0x474>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d106      	bne.n	80034ba <HAL_RCC_OscConfig+0x2ea>
 80034ac:	4b64      	ldr	r3, [pc, #400]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	4a63      	ldr	r2, [pc, #396]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70
 80034b8:	e01c      	b.n	80034f4 <HAL_RCC_OscConfig+0x324>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b05      	cmp	r3, #5
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x30c>
 80034c2:	4b5f      	ldr	r3, [pc, #380]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	4a5e      	ldr	r2, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70
 80034ce:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	4a5b      	ldr	r2, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6713      	str	r3, [r2, #112]	; 0x70
 80034da:	e00b      	b.n	80034f4 <HAL_RCC_OscConfig+0x324>
 80034dc:	4b58      	ldr	r3, [pc, #352]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a57      	ldr	r2, [pc, #348]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
 80034e8:	4b55      	ldr	r3, [pc, #340]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a54      	ldr	r2, [pc, #336]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034ee:	f023 0304 	bic.w	r3, r3, #4
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d015      	beq.n	8003528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fd fdf0 	bl	80010e0 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fd fdec 	bl	80010e0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0cb      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351a:	4b49      	ldr	r3, [pc, #292]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ee      	beq.n	8003504 <HAL_RCC_OscConfig+0x334>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fd fdda 	bl	80010e0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fd fdd6 	bl	80010e0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0b5      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ee      	bne.n	8003530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	4a38      	ldr	r2, [pc, #224]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80a1 	beq.w	80036b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800356e:	4b34      	ldr	r3, [pc, #208]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b08      	cmp	r3, #8
 8003578:	d05c      	beq.n	8003634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d141      	bne.n	8003606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b31      	ldr	r3, [pc, #196]	; (8003648 <HAL_RCC_OscConfig+0x478>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fd fdaa 	bl	80010e0 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003590:	f7fd fda6 	bl	80010e0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e087      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b27      	ldr	r3, [pc, #156]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	3b01      	subs	r3, #1
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	061b      	lsls	r3, r3, #24
 80035d2:	491b      	ldr	r1, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x478>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fd fd7f 	bl	80010e0 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fd fd7b 	bl	80010e0 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e05c      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x416>
 8003604:	e054      	b.n	80036b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_RCC_OscConfig+0x478>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fd fd68 	bl	80010e0 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003614:	f7fd fd64 	bl	80010e0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e045      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x444>
 8003632:	e03d      	b.n	80036b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e038      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
 8003640:	40023800 	.word	0x40023800
 8003644:	40007000 	.word	0x40007000
 8003648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCC_OscConfig+0x4ec>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d028      	beq.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d121      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d11a      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003684:	4293      	cmp	r3, r2
 8003686:	d111      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	3b01      	subs	r3, #1
 8003696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d107      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800

080036c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0cc      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b68      	ldr	r3, [pc, #416]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d90c      	bls.n	80036fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b65      	ldr	r3, [pc, #404]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b63      	ldr	r3, [pc, #396]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0b8      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003714:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a58      	ldr	r2, [pc, #352]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800371e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800372c:	4b53      	ldr	r3, [pc, #332]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a52      	ldr	r2, [pc, #328]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003738:	4b50      	ldr	r3, [pc, #320]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	494d      	ldr	r1, [pc, #308]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d044      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d119      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e07f      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d003      	beq.n	800377e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377a:	2b03      	cmp	r3, #3
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	4b3f      	ldr	r3, [pc, #252]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06f      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378e:	4b3b      	ldr	r3, [pc, #236]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e067      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379e:	4b37      	ldr	r3, [pc, #220]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4934      	ldr	r1, [pc, #208]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b0:	f7fd fc96 	bl	80010e0 <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fd fc92 	bl	80010e0 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e04f      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 020c 	and.w	r2, r3, #12
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1eb      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d20c      	bcs.n	8003808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e032      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4916      	ldr	r1, [pc, #88]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	490e      	ldr	r1, [pc, #56]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003846:	f000 f821 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800384a:	4602      	mov	r2, r0
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	490a      	ldr	r1, [pc, #40]	; (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	5ccb      	ldrb	r3, [r1, r3]
 800385a:	fa22 f303 	lsr.w	r3, r2, r3
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fbf6 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023c00 	.word	0x40023c00
 800387c:	40023800 	.word	0x40023800
 8003880:	08008da4 	.word	0x08008da4
 8003884:	20000004 	.word	0x20000004
 8003888:	20000008 	.word	0x20000008

0800388c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003890:	b094      	sub	sp, #80	; 0x50
 8003892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	647b      	str	r3, [r7, #68]	; 0x44
 8003898:	2300      	movs	r3, #0
 800389a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800389c:	2300      	movs	r3, #0
 800389e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a4:	4b79      	ldr	r3, [pc, #484]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d00d      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x40>
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	f200 80e1 	bhi.w	8003a78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038be:	e0db      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b73      	ldr	r3, [pc, #460]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x204>)
 80038c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038c4:	e0db      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038c6:	4b73      	ldr	r3, [pc, #460]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x208>)
 80038c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ca:	e0d8      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038cc:	4b6f      	ldr	r3, [pc, #444]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d6:	4b6d      	ldr	r3, [pc, #436]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d063      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e2:	4b6a      	ldr	r3, [pc, #424]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	099b      	lsrs	r3, r3, #6
 80038e8:	2200      	movs	r2, #0
 80038ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
 80038f6:	2300      	movs	r3, #0
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
 80038fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038fe:	4622      	mov	r2, r4
 8003900:	462b      	mov	r3, r5
 8003902:	f04f 0000 	mov.w	r0, #0
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	0159      	lsls	r1, r3, #5
 800390c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003910:	0150      	lsls	r0, r2, #5
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4621      	mov	r1, r4
 8003918:	1a51      	subs	r1, r2, r1
 800391a:	6139      	str	r1, [r7, #16]
 800391c:	4629      	mov	r1, r5
 800391e:	eb63 0301 	sbc.w	r3, r3, r1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003930:	4659      	mov	r1, fp
 8003932:	018b      	lsls	r3, r1, #6
 8003934:	4651      	mov	r1, sl
 8003936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800393a:	4651      	mov	r1, sl
 800393c:	018a      	lsls	r2, r1, #6
 800393e:	4651      	mov	r1, sl
 8003940:	ebb2 0801 	subs.w	r8, r2, r1
 8003944:	4659      	mov	r1, fp
 8003946:	eb63 0901 	sbc.w	r9, r3, r1
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800395a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800395e:	4690      	mov	r8, r2
 8003960:	4699      	mov	r9, r3
 8003962:	4623      	mov	r3, r4
 8003964:	eb18 0303 	adds.w	r3, r8, r3
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	462b      	mov	r3, r5
 800396c:	eb49 0303 	adc.w	r3, r9, r3
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800397e:	4629      	mov	r1, r5
 8003980:	024b      	lsls	r3, r1, #9
 8003982:	4621      	mov	r1, r4
 8003984:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003988:	4621      	mov	r1, r4
 800398a:	024a      	lsls	r2, r1, #9
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
 8003990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003992:	2200      	movs	r2, #0
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
 8003996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003998:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800399c:	f7fc fc14 	bl	80001c8 <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4613      	mov	r3, r2
 80039a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a8:	e058      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	2200      	movs	r2, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	4611      	mov	r1, r2
 80039b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ba:	623b      	str	r3, [r7, #32]
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039c4:	4642      	mov	r2, r8
 80039c6:	464b      	mov	r3, r9
 80039c8:	f04f 0000 	mov.w	r0, #0
 80039cc:	f04f 0100 	mov.w	r1, #0
 80039d0:	0159      	lsls	r1, r3, #5
 80039d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d6:	0150      	lsls	r0, r2, #5
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4641      	mov	r1, r8
 80039de:	ebb2 0a01 	subs.w	sl, r2, r1
 80039e2:	4649      	mov	r1, r9
 80039e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003a00:	eb63 050b 	sbc.w	r5, r3, fp
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	00eb      	lsls	r3, r5, #3
 8003a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a12:	00e2      	lsls	r2, r4, #3
 8003a14:	4614      	mov	r4, r2
 8003a16:	461d      	mov	r5, r3
 8003a18:	4643      	mov	r3, r8
 8003a1a:	18e3      	adds	r3, r4, r3
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	464b      	mov	r3, r9
 8003a20:	eb45 0303 	adc.w	r3, r5, r3
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a32:	4629      	mov	r1, r5
 8003a34:	028b      	lsls	r3, r1, #10
 8003a36:	4621      	mov	r1, r4
 8003a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	028a      	lsls	r2, r1, #10
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a46:	2200      	movs	r2, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	61fa      	str	r2, [r7, #28]
 8003a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a50:	f7fc fbba 	bl	80001c8 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4613      	mov	r3, r2
 8003a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	3301      	adds	r3, #1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a76:	e002      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3750      	adds	r7, #80	; 0x50
 8003a84:	46bd      	mov	sp, r7
 8003a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	00f42400 	.word	0x00f42400
 8003a94:	007a1200 	.word	0x007a1200

08003a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000004 	.word	0x20000004

08003ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ab4:	f7ff fff0 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0a9b      	lsrs	r3, r3, #10
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4903      	ldr	r1, [pc, #12]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	08008db4 	.word	0x08008db4

08003ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003adc:	f7ff ffdc 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0b5b      	lsrs	r3, r3, #13
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	08008db4 	.word	0x08008db4

08003b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07b      	b.n	8003c0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d009      	beq.n	8003b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
 8003b2a:	e005      	b.n	8003b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fc ff76 	bl	8000a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	ea42 0103 	orr.w	r1, r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	f003 0104 	and.w	r1, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f003 0210 	and.w	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e041      	b.n	8003ca8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fd f8d1 	bl	8000de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 fc79 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d001      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e04e      	b.n	8003d66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d022      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d01d      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d018      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00e      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d111      	bne.n	8003d54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d010      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d52:	e007      	b.n	8003d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40010400 	.word	0x40010400
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40001800 	.word	0x40001800

08003d90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e041      	b.n	8003e26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f839 	bl	8003e2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f000 fbba 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_TIM_PWM_Start+0x24>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e022      	b.n	8003eae <HAL_TIM_PWM_Start+0x6a>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d109      	bne.n	8003e82 <HAL_TIM_PWM_Start+0x3e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	bf14      	ite	ne
 8003e7a:	2301      	movne	r3, #1
 8003e7c:	2300      	moveq	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	e015      	b.n	8003eae <HAL_TIM_PWM_Start+0x6a>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d109      	bne.n	8003e9c <HAL_TIM_PWM_Start+0x58>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	e008      	b.n	8003eae <HAL_TIM_PWM_Start+0x6a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	bf14      	ite	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	2300      	moveq	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e07c      	b.n	8003fb0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <HAL_TIM_PWM_Start+0x82>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec4:	e013      	b.n	8003eee <HAL_TIM_PWM_Start+0xaa>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d104      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0x92>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed4:	e00b      	b.n	8003eee <HAL_TIM_PWM_Start+0xaa>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xa2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee4:	e003      	b.n	8003eee <HAL_TIM_PWM_Start+0xaa>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fe10 	bl	8004b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <HAL_TIM_PWM_Start+0x174>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_TIM_PWM_Start+0xcc>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <HAL_TIM_PWM_Start+0x178>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIM_PWM_Start+0xd0>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_TIM_PWM_Start+0xd2>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <HAL_TIM_PWM_Start+0x174>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d022      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x136>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d01d      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x136>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_TIM_PWM_Start+0x17c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x136>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_TIM_PWM_Start+0x180>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x136>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <HAL_TIM_PWM_Start+0x184>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x136>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <HAL_TIM_PWM_Start+0x178>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x136>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <HAL_TIM_PWM_Start+0x188>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x136>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <HAL_TIM_PWM_Start+0x18c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d111      	bne.n	8003f9e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d010      	beq.n	8003fae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	e007      	b.n	8003fae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40010400 	.word	0x40010400
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40001800 	.word	0x40001800

08003fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d122      	bne.n	8004030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d11b      	bne.n	8004030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0202 	mvn.w	r2, #2
 8004000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa77 	bl	800450a <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa69 	bl	80044f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fa7a 	bl	800451e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0204 	mvn.w	r2, #4
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa4d 	bl	800450a <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa3f 	bl	80044f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa50 	bl	800451e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b08      	cmp	r3, #8
 8004090:	d122      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b08      	cmp	r3, #8
 800409e:	d11b      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0208 	mvn.w	r2, #8
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2204      	movs	r2, #4
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa23 	bl	800450a <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa15 	bl	80044f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fa26 	bl	800451e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0210 	mvn.w	r2, #16
 80040fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2208      	movs	r2, #8
 8004102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f9f9 	bl	800450a <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f9eb 	bl	80044f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f9fc 	bl	800451e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0201 	mvn.w	r2, #1
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fc fc26 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	2b80      	cmp	r3, #128	; 0x80
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fd78 	bl	8004c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d107      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f9c1 	bl	8004532 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0220 	mvn.w	r2, #32
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fd42 	bl	8004c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041fe:	2302      	movs	r3, #2
 8004200:	e0ae      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	f200 809f 	bhi.w	8004350 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	0800424d 	.word	0x0800424d
 800421c:	08004351 	.word	0x08004351
 8004220:	08004351 	.word	0x08004351
 8004224:	08004351 	.word	0x08004351
 8004228:	0800428d 	.word	0x0800428d
 800422c:	08004351 	.word	0x08004351
 8004230:	08004351 	.word	0x08004351
 8004234:	08004351 	.word	0x08004351
 8004238:	080042cf 	.word	0x080042cf
 800423c:	08004351 	.word	0x08004351
 8004240:	08004351 	.word	0x08004351
 8004244:	08004351 	.word	0x08004351
 8004248:	0800430f 	.word	0x0800430f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fa18 	bl	8004688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0208 	orr.w	r2, r2, #8
 8004266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0204 	bic.w	r2, r2, #4
 8004276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6999      	ldr	r1, [r3, #24]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	619a      	str	r2, [r3, #24]
      break;
 800428a:	e064      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fa68 	bl	8004768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6999      	ldr	r1, [r3, #24]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	619a      	str	r2, [r3, #24]
      break;
 80042cc:	e043      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fabd 	bl	8004854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0208 	orr.w	r2, r2, #8
 80042e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0204 	bic.w	r2, r2, #4
 80042f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69d9      	ldr	r1, [r3, #28]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	61da      	str	r2, [r3, #28]
      break;
 800430c:	e023      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fb11 	bl	800493c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69d9      	ldr	r1, [r3, #28]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	021a      	lsls	r2, r3, #8
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	61da      	str	r2, [r3, #28]
      break;
 800434e:	e002      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	75fb      	strb	r3, [r7, #23]
      break;
 8004354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_TIM_ConfigClockSource+0x1c>
 8004380:	2302      	movs	r3, #2
 8004382:	e0b4      	b.n	80044ee <HAL_TIM_ConfigClockSource+0x186>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043bc:	d03e      	beq.n	800443c <HAL_TIM_ConfigClockSource+0xd4>
 80043be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c2:	f200 8087 	bhi.w	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ca:	f000 8086 	beq.w	80044da <HAL_TIM_ConfigClockSource+0x172>
 80043ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d2:	d87f      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043d4:	2b70      	cmp	r3, #112	; 0x70
 80043d6:	d01a      	beq.n	800440e <HAL_TIM_ConfigClockSource+0xa6>
 80043d8:	2b70      	cmp	r3, #112	; 0x70
 80043da:	d87b      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043dc:	2b60      	cmp	r3, #96	; 0x60
 80043de:	d050      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x11a>
 80043e0:	2b60      	cmp	r3, #96	; 0x60
 80043e2:	d877      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043e4:	2b50      	cmp	r3, #80	; 0x50
 80043e6:	d03c      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0xfa>
 80043e8:	2b50      	cmp	r3, #80	; 0x50
 80043ea:	d873      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d058      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0x13a>
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d86f      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043f4:	2b30      	cmp	r3, #48	; 0x30
 80043f6:	d064      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x15a>
 80043f8:	2b30      	cmp	r3, #48	; 0x30
 80043fa:	d86b      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d060      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004400:	2b20      	cmp	r3, #32
 8004402:	d867      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d05c      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004408:	2b10      	cmp	r3, #16
 800440a:	d05a      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x15a>
 800440c:	e062      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6899      	ldr	r1, [r3, #8]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f000 fb5d 	bl	8004adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	609a      	str	r2, [r3, #8]
      break;
 800443a:	e04f      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f000 fb46 	bl	8004adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800445e:	609a      	str	r2, [r3, #8]
      break;
 8004460:	e03c      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6859      	ldr	r1, [r3, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	461a      	mov	r2, r3
 8004470:	f000 faba 	bl	80049e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2150      	movs	r1, #80	; 0x50
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fb13 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 8004480:	e02c      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6859      	ldr	r1, [r3, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	461a      	mov	r2, r3
 8004490:	f000 fad9 	bl	8004a46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2160      	movs	r1, #96	; 0x60
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fb03 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 80044a0:	e01c      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f000 fa9a 	bl	80049e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2140      	movs	r1, #64	; 0x40
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 faf3 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 80044c0:	e00c      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f000 faea 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 80044d2:	e003      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
      break;
 80044d8:	e000      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a40      	ldr	r2, [pc, #256]	; (800465c <TIM_Base_SetConfig+0x114>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d00f      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3d      	ldr	r2, [pc, #244]	; (8004660 <TIM_Base_SetConfig+0x118>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00b      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a3c      	ldr	r2, [pc, #240]	; (8004664 <TIM_Base_SetConfig+0x11c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d007      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a3b      	ldr	r2, [pc, #236]	; (8004668 <TIM_Base_SetConfig+0x120>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a3a      	ldr	r2, [pc, #232]	; (800466c <TIM_Base_SetConfig+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d108      	bne.n	800459a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2f      	ldr	r2, [pc, #188]	; (800465c <TIM_Base_SetConfig+0x114>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d02b      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a8:	d027      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <TIM_Base_SetConfig+0x118>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d023      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2b      	ldr	r2, [pc, #172]	; (8004664 <TIM_Base_SetConfig+0x11c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01f      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2a      	ldr	r2, [pc, #168]	; (8004668 <TIM_Base_SetConfig+0x120>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01b      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a29      	ldr	r2, [pc, #164]	; (800466c <TIM_Base_SetConfig+0x124>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d017      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a28      	ldr	r2, [pc, #160]	; (8004670 <TIM_Base_SetConfig+0x128>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a27      	ldr	r2, [pc, #156]	; (8004674 <TIM_Base_SetConfig+0x12c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00f      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a26      	ldr	r2, [pc, #152]	; (8004678 <TIM_Base_SetConfig+0x130>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a25      	ldr	r2, [pc, #148]	; (800467c <TIM_Base_SetConfig+0x134>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d007      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a24      	ldr	r2, [pc, #144]	; (8004680 <TIM_Base_SetConfig+0x138>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a23      	ldr	r2, [pc, #140]	; (8004684 <TIM_Base_SetConfig+0x13c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a0a      	ldr	r2, [pc, #40]	; (800465c <TIM_Base_SetConfig+0x114>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_Base_SetConfig+0xf8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a0c      	ldr	r2, [pc, #48]	; (800466c <TIM_Base_SetConfig+0x124>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d103      	bne.n	8004648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	615a      	str	r2, [r3, #20]
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000
 8004660:	40000400 	.word	0x40000400
 8004664:	40000800 	.word	0x40000800
 8004668:	40000c00 	.word	0x40000c00
 800466c:	40010400 	.word	0x40010400
 8004670:	40014000 	.word	0x40014000
 8004674:	40014400 	.word	0x40014400
 8004678:	40014800 	.word	0x40014800
 800467c:	40001800 	.word	0x40001800
 8004680:	40001c00 	.word	0x40001c00
 8004684:	40002000 	.word	0x40002000

08004688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f023 0302 	bic.w	r3, r3, #2
 80046d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a20      	ldr	r2, [pc, #128]	; (8004760 <TIM_OC1_SetConfig+0xd8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_OC1_SetConfig+0x64>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <TIM_OC1_SetConfig+0xdc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d10c      	bne.n	8004706 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f023 0308 	bic.w	r3, r3, #8
 80046f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f023 0304 	bic.w	r3, r3, #4
 8004704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a15      	ldr	r2, [pc, #84]	; (8004760 <TIM_OC1_SetConfig+0xd8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_OC1_SetConfig+0x8e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <TIM_OC1_SetConfig+0xdc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d111      	bne.n	800473a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800471c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	621a      	str	r2, [r3, #32]
}
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	40010000 	.word	0x40010000
 8004764:	40010400 	.word	0x40010400

08004768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f023 0210 	bic.w	r2, r3, #16
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0320 	bic.w	r3, r3, #32
 80047b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a22      	ldr	r2, [pc, #136]	; (800484c <TIM_OC2_SetConfig+0xe4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_OC2_SetConfig+0x68>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a21      	ldr	r2, [pc, #132]	; (8004850 <TIM_OC2_SetConfig+0xe8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10d      	bne.n	80047ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a17      	ldr	r2, [pc, #92]	; (800484c <TIM_OC2_SetConfig+0xe4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_OC2_SetConfig+0x94>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a16      	ldr	r2, [pc, #88]	; (8004850 <TIM_OC2_SetConfig+0xe8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d113      	bne.n	8004824 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40010400 	.word	0x40010400

08004854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800489c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a21      	ldr	r2, [pc, #132]	; (8004934 <TIM_OC3_SetConfig+0xe0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_OC3_SetConfig+0x66>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a20      	ldr	r2, [pc, #128]	; (8004938 <TIM_OC3_SetConfig+0xe4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d10d      	bne.n	80048d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a16      	ldr	r2, [pc, #88]	; (8004934 <TIM_OC3_SetConfig+0xe0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_OC3_SetConfig+0x92>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a15      	ldr	r2, [pc, #84]	; (8004938 <TIM_OC3_SetConfig+0xe4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d113      	bne.n	800490e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	621a      	str	r2, [r3, #32]
}
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	40010000 	.word	0x40010000
 8004938:	40010400 	.word	0x40010400

0800493c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	031b      	lsls	r3, r3, #12
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <TIM_OC4_SetConfig+0xa4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC4_SetConfig+0x68>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a11      	ldr	r2, [pc, #68]	; (80049e4 <TIM_OC4_SetConfig+0xa8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d109      	bne.n	80049b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40010400 	.word	0x40010400

080049e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 030a 	bic.w	r3, r3, #10
 8004a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b087      	sub	sp, #28
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0210 	bic.w	r2, r3, #16
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	031b      	lsls	r3, r3, #12
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f043 0307 	orr.w	r3, r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	609a      	str	r2, [r3, #8]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	021a      	lsls	r2, r3, #8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2201      	movs	r2, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1a      	ldr	r2, [r3, #32]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e05a      	b.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bcc:	d01d      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1d      	ldr	r2, [pc, #116]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1a      	ldr	r2, [pc, #104]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a17      	ldr	r2, [pc, #92]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10c      	bne.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40010000 	.word	0x40010000
 8004c48:	40000400 	.word	0x40000400
 8004c4c:	40000800 	.word	0x40000800
 8004c50:	40000c00 	.word	0x40000c00
 8004c54:	40010400 	.word	0x40010400
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40001800 	.word	0x40001800

08004c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e03f      	b.n	8004d1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc f93e 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2224      	movs	r2, #36	; 0x24
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f9cb 	bl	8005068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b08a      	sub	sp, #40	; 0x28
 8004d26:	af02      	add	r7, sp, #8
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d17c      	bne.n	8004e3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_UART_Transmit+0x2c>
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e075      	b.n	8004e3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_UART_Transmit+0x3e>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e06e      	b.n	8004e3e <HAL_UART_Transmit+0x11c>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2221      	movs	r2, #33	; 0x21
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d76:	f7fc f9b3 	bl	80010e0 <HAL_GetTick>
 8004d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	88fa      	ldrh	r2, [r7, #6]
 8004d86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d90:	d108      	bne.n	8004da4 <HAL_UART_Transmit+0x82>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e003      	b.n	8004dac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004db4:	e02a      	b.n	8004e0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f8e2 	bl	8004f8a <UART_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e036      	b.n	8004e3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3302      	adds	r3, #2
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	e007      	b.n	8004dfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1cf      	bne.n	8004db6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2140      	movs	r1, #64	; 0x40
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f8b2 	bl	8004f8a <UART_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e006      	b.n	8004e3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b08a      	sub	sp, #40	; 0x28
 8004e4a:	af02      	add	r7, sp, #8
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	4613      	mov	r3, r2
 8004e54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	f040 808c 	bne.w	8004f80 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_UART_Receive+0x2e>
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e084      	b.n	8004f82 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Receive+0x40>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e07d      	b.n	8004f82 <HAL_UART_Receive+0x13c>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2222      	movs	r2, #34	; 0x22
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ea2:	f7fc f91d 	bl	80010e0 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	88fa      	ldrh	r2, [r7, #6]
 8004eb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebc:	d108      	bne.n	8004ed0 <HAL_UART_Receive+0x8a>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	e003      	b.n	8004ed8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004ee0:	e043      	b.n	8004f6a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2120      	movs	r1, #32
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f84c 	bl	8004f8a <UART_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e042      	b.n	8004f82 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	3302      	adds	r3, #2
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	e01f      	b.n	8004f5c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f24:	d007      	beq.n	8004f36 <HAL_UART_Receive+0xf0>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <HAL_UART_Receive+0xfe>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	e008      	b.n	8004f56 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1b6      	bne.n	8004ee2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004f80:	2302      	movs	r3, #2
  }
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b090      	sub	sp, #64	; 0x40
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	603b      	str	r3, [r7, #0]
 8004f96:	4613      	mov	r3, r2
 8004f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9a:	e050      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d04c      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <UART_WaitOnFlagUntilTimeout+0x30>
 8004faa:	f7fc f899 	bl	80010e0 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d241      	bcs.n	800503e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fda:	637a      	str	r2, [r7, #52]	; 0x34
 8004fdc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e5      	bne.n	8004fba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3314      	adds	r3, #20
 8004ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800500e:	623a      	str	r2, [r7, #32]
 8005010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	69f9      	ldr	r1, [r7, #28]
 8005014:	6a3a      	ldr	r2, [r7, #32]
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	61bb      	str	r3, [r7, #24]
   return(result);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e5      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e00f      	b.n	800505e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4013      	ands	r3, r2
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	429a      	cmp	r2, r3
 800505a:	d09f      	beq.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3740      	adds	r7, #64	; 0x40
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800506c:	b0c0      	sub	sp, #256	; 0x100
 800506e:	af00      	add	r7, sp, #0
 8005070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	68d9      	ldr	r1, [r3, #12]
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	ea40 0301 	orr.w	r3, r0, r1
 8005090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	431a      	orrs	r2, r3
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050c0:	f021 010c 	bic.w	r1, r1, #12
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ce:	430b      	orrs	r3, r1
 80050d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e2:	6999      	ldr	r1, [r3, #24]
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	ea40 0301 	orr.w	r3, r0, r1
 80050ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b8f      	ldr	r3, [pc, #572]	; (8005334 <UART_SetConfig+0x2cc>)
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d005      	beq.n	8005108 <UART_SetConfig+0xa0>
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b8d      	ldr	r3, [pc, #564]	; (8005338 <UART_SetConfig+0x2d0>)
 8005104:	429a      	cmp	r2, r3
 8005106:	d104      	bne.n	8005112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005108:	f7fe fce6 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 800510c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005110:	e003      	b.n	800511a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005112:	f7fe fccd 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 8005116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005124:	f040 810c 	bne.w	8005340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512c:	2200      	movs	r2, #0
 800512e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800513a:	4622      	mov	r2, r4
 800513c:	462b      	mov	r3, r5
 800513e:	1891      	adds	r1, r2, r2
 8005140:	65b9      	str	r1, [r7, #88]	; 0x58
 8005142:	415b      	adcs	r3, r3
 8005144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800514a:	4621      	mov	r1, r4
 800514c:	eb12 0801 	adds.w	r8, r2, r1
 8005150:	4629      	mov	r1, r5
 8005152:	eb43 0901 	adc.w	r9, r3, r1
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516a:	4690      	mov	r8, r2
 800516c:	4699      	mov	r9, r3
 800516e:	4623      	mov	r3, r4
 8005170:	eb18 0303 	adds.w	r3, r8, r3
 8005174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005178:	462b      	mov	r3, r5
 800517a:	eb49 0303 	adc.w	r3, r9, r3
 800517e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800518e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005196:	460b      	mov	r3, r1
 8005198:	18db      	adds	r3, r3, r3
 800519a:	653b      	str	r3, [r7, #80]	; 0x50
 800519c:	4613      	mov	r3, r2
 800519e:	eb42 0303 	adc.w	r3, r2, r3
 80051a2:	657b      	str	r3, [r7, #84]	; 0x54
 80051a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051ac:	f7fb f80c 	bl	80001c8 <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4b61      	ldr	r3, [pc, #388]	; (800533c <UART_SetConfig+0x2d4>)
 80051b6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	011c      	lsls	r4, r3, #4
 80051be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051d0:	4642      	mov	r2, r8
 80051d2:	464b      	mov	r3, r9
 80051d4:	1891      	adds	r1, r2, r2
 80051d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80051d8:	415b      	adcs	r3, r3
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051e0:	4641      	mov	r1, r8
 80051e2:	eb12 0a01 	adds.w	sl, r2, r1
 80051e6:	4649      	mov	r1, r9
 80051e8:	eb43 0b01 	adc.w	fp, r3, r1
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005200:	4692      	mov	sl, r2
 8005202:	469b      	mov	fp, r3
 8005204:	4643      	mov	r3, r8
 8005206:	eb1a 0303 	adds.w	r3, sl, r3
 800520a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800520e:	464b      	mov	r3, r9
 8005210:	eb4b 0303 	adc.w	r3, fp, r3
 8005214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800522c:	460b      	mov	r3, r1
 800522e:	18db      	adds	r3, r3, r3
 8005230:	643b      	str	r3, [r7, #64]	; 0x40
 8005232:	4613      	mov	r3, r2
 8005234:	eb42 0303 	adc.w	r3, r2, r3
 8005238:	647b      	str	r3, [r7, #68]	; 0x44
 800523a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800523e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005242:	f7fa ffc1 	bl	80001c8 <__aeabi_uldivmod>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4611      	mov	r1, r2
 800524c:	4b3b      	ldr	r3, [pc, #236]	; (800533c <UART_SetConfig+0x2d4>)
 800524e:	fba3 2301 	umull	r2, r3, r3, r1
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	2264      	movs	r2, #100	; 0x64
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	1acb      	subs	r3, r1, r3
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005262:	4b36      	ldr	r3, [pc, #216]	; (800533c <UART_SetConfig+0x2d4>)
 8005264:	fba3 2302 	umull	r2, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005270:	441c      	add	r4, r3
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800527c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	1891      	adds	r1, r2, r2
 800528a:	63b9      	str	r1, [r7, #56]	; 0x38
 800528c:	415b      	adcs	r3, r3
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005294:	4641      	mov	r1, r8
 8005296:	1851      	adds	r1, r2, r1
 8005298:	6339      	str	r1, [r7, #48]	; 0x30
 800529a:	4649      	mov	r1, r9
 800529c:	414b      	adcs	r3, r1
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052ac:	4659      	mov	r1, fp
 80052ae:	00cb      	lsls	r3, r1, #3
 80052b0:	4651      	mov	r1, sl
 80052b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b6:	4651      	mov	r1, sl
 80052b8:	00ca      	lsls	r2, r1, #3
 80052ba:	4610      	mov	r0, r2
 80052bc:	4619      	mov	r1, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	4642      	mov	r2, r8
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052c8:	464b      	mov	r3, r9
 80052ca:	460a      	mov	r2, r1
 80052cc:	eb42 0303 	adc.w	r3, r2, r3
 80052d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052e8:	460b      	mov	r3, r1
 80052ea:	18db      	adds	r3, r3, r3
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ee:	4613      	mov	r3, r2
 80052f0:	eb42 0303 	adc.w	r3, r2, r3
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052fe:	f7fa ff63 	bl	80001c8 <__aeabi_uldivmod>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <UART_SetConfig+0x2d4>)
 8005308:	fba3 1302 	umull	r1, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2164      	movs	r1, #100	; 0x64
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <UART_SetConfig+0x2d4>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 0207 	and.w	r2, r3, #7
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4422      	add	r2, r4
 800532e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005330:	e105      	b.n	800553e <UART_SetConfig+0x4d6>
 8005332:	bf00      	nop
 8005334:	40011000 	.word	0x40011000
 8005338:	40011400 	.word	0x40011400
 800533c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005344:	2200      	movs	r2, #0
 8005346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800534a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800534e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005352:	4642      	mov	r2, r8
 8005354:	464b      	mov	r3, r9
 8005356:	1891      	adds	r1, r2, r2
 8005358:	6239      	str	r1, [r7, #32]
 800535a:	415b      	adcs	r3, r3
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
 800535e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005362:	4641      	mov	r1, r8
 8005364:	1854      	adds	r4, r2, r1
 8005366:	4649      	mov	r1, r9
 8005368:	eb43 0501 	adc.w	r5, r3, r1
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	00eb      	lsls	r3, r5, #3
 8005376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800537a:	00e2      	lsls	r2, r4, #3
 800537c:	4614      	mov	r4, r2
 800537e:	461d      	mov	r5, r3
 8005380:	4643      	mov	r3, r8
 8005382:	18e3      	adds	r3, r4, r3
 8005384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005388:	464b      	mov	r3, r9
 800538a:	eb45 0303 	adc.w	r3, r5, r3
 800538e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800539e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053ae:	4629      	mov	r1, r5
 80053b0:	008b      	lsls	r3, r1, #2
 80053b2:	4621      	mov	r1, r4
 80053b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b8:	4621      	mov	r1, r4
 80053ba:	008a      	lsls	r2, r1, #2
 80053bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053c0:	f7fa ff02 	bl	80001c8 <__aeabi_uldivmod>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4b60      	ldr	r3, [pc, #384]	; (800554c <UART_SetConfig+0x4e4>)
 80053ca:	fba3 2302 	umull	r2, r3, r3, r2
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	011c      	lsls	r4, r3, #4
 80053d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053e4:	4642      	mov	r2, r8
 80053e6:	464b      	mov	r3, r9
 80053e8:	1891      	adds	r1, r2, r2
 80053ea:	61b9      	str	r1, [r7, #24]
 80053ec:	415b      	adcs	r3, r3
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f4:	4641      	mov	r1, r8
 80053f6:	1851      	adds	r1, r2, r1
 80053f8:	6139      	str	r1, [r7, #16]
 80053fa:	4649      	mov	r1, r9
 80053fc:	414b      	adcs	r3, r1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800540c:	4659      	mov	r1, fp
 800540e:	00cb      	lsls	r3, r1, #3
 8005410:	4651      	mov	r1, sl
 8005412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005416:	4651      	mov	r1, sl
 8005418:	00ca      	lsls	r2, r1, #3
 800541a:	4610      	mov	r0, r2
 800541c:	4619      	mov	r1, r3
 800541e:	4603      	mov	r3, r0
 8005420:	4642      	mov	r2, r8
 8005422:	189b      	adds	r3, r3, r2
 8005424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005428:	464b      	mov	r3, r9
 800542a:	460a      	mov	r2, r1
 800542c:	eb42 0303 	adc.w	r3, r2, r3
 8005430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	67bb      	str	r3, [r7, #120]	; 0x78
 800543e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800544c:	4649      	mov	r1, r9
 800544e:	008b      	lsls	r3, r1, #2
 8005450:	4641      	mov	r1, r8
 8005452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005456:	4641      	mov	r1, r8
 8005458:	008a      	lsls	r2, r1, #2
 800545a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800545e:	f7fa feb3 	bl	80001c8 <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4b39      	ldr	r3, [pc, #228]	; (800554c <UART_SetConfig+0x4e4>)
 8005468:	fba3 1302 	umull	r1, r3, r3, r2
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	2164      	movs	r1, #100	; 0x64
 8005470:	fb01 f303 	mul.w	r3, r1, r3
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	3332      	adds	r3, #50	; 0x32
 800547a:	4a34      	ldr	r2, [pc, #208]	; (800554c <UART_SetConfig+0x4e4>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005486:	441c      	add	r4, r3
 8005488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548c:	2200      	movs	r2, #0
 800548e:	673b      	str	r3, [r7, #112]	; 0x70
 8005490:	677a      	str	r2, [r7, #116]	; 0x74
 8005492:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005496:	4642      	mov	r2, r8
 8005498:	464b      	mov	r3, r9
 800549a:	1891      	adds	r1, r2, r2
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	415b      	adcs	r3, r3
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a6:	4641      	mov	r1, r8
 80054a8:	1851      	adds	r1, r2, r1
 80054aa:	6039      	str	r1, [r7, #0]
 80054ac:	4649      	mov	r1, r9
 80054ae:	414b      	adcs	r3, r1
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054be:	4659      	mov	r1, fp
 80054c0:	00cb      	lsls	r3, r1, #3
 80054c2:	4651      	mov	r1, sl
 80054c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054c8:	4651      	mov	r1, sl
 80054ca:	00ca      	lsls	r2, r1, #3
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	4603      	mov	r3, r0
 80054d2:	4642      	mov	r2, r8
 80054d4:	189b      	adds	r3, r3, r2
 80054d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054d8:	464b      	mov	r3, r9
 80054da:	460a      	mov	r2, r1
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	663b      	str	r3, [r7, #96]	; 0x60
 80054ec:	667a      	str	r2, [r7, #100]	; 0x64
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054fa:	4649      	mov	r1, r9
 80054fc:	008b      	lsls	r3, r1, #2
 80054fe:	4641      	mov	r1, r8
 8005500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005504:	4641      	mov	r1, r8
 8005506:	008a      	lsls	r2, r1, #2
 8005508:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800550c:	f7fa fe5c 	bl	80001c8 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <UART_SetConfig+0x4e4>)
 8005516:	fba3 1302 	umull	r1, r3, r3, r2
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	2164      	movs	r1, #100	; 0x64
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	3332      	adds	r3, #50	; 0x32
 8005528:	4a08      	ldr	r2, [pc, #32]	; (800554c <UART_SetConfig+0x4e4>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	f003 020f 	and.w	r2, r3, #15
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4422      	add	r2, r4
 800553c:	609a      	str	r2, [r3, #8]
}
 800553e:	bf00      	nop
 8005540:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554a:	bf00      	nop
 800554c:	51eb851f 	.word	0x51eb851f

08005550 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005550:	b084      	sub	sp, #16
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	f107 001c 	add.w	r0, r7, #28
 800555e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2b01      	cmp	r3, #1
 8005566:	d122      	bne.n	80055ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800557c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9c0 	bl	8005928 <USB_CoreReset>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]
 80055ac:	e01a      	b.n	80055e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f9b4 	bl	8005928 <USB_CoreReset>
 80055c0:	4603      	mov	r3, r0
 80055c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
 80055d6:	e005      	b.n	80055e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d10b      	bne.n	8005602 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f043 0206 	orr.w	r2, r3, #6
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f043 0220 	orr.w	r2, r3, #32
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800560e:	b004      	add	sp, #16
 8005610:	4770      	bx	lr

08005612 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f043 0201 	orr.w	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f023 0201 	bic.w	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d115      	bne.n	80056a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005684:	2001      	movs	r0, #1
 8005686:	f7fb fd37 	bl	80010f8 <HAL_Delay>
      ms++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f93a 	bl	800590a <USB_GetMode>
 8005696:	4603      	mov	r3, r0
 8005698:	2b01      	cmp	r3, #1
 800569a:	d01e      	beq.n	80056da <USB_SetCurrentMode+0x84>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b31      	cmp	r3, #49	; 0x31
 80056a0:	d9f0      	bls.n	8005684 <USB_SetCurrentMode+0x2e>
 80056a2:	e01a      	b.n	80056da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d115      	bne.n	80056d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056b6:	2001      	movs	r0, #1
 80056b8:	f7fb fd1e 	bl	80010f8 <HAL_Delay>
      ms++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3301      	adds	r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f921 	bl	800590a <USB_GetMode>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <USB_SetCurrentMode+0x84>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b31      	cmp	r3, #49	; 0x31
 80056d2:	d9f0      	bls.n	80056b6 <USB_SetCurrentMode+0x60>
 80056d4:	e001      	b.n	80056da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e005      	b.n	80056e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b32      	cmp	r3, #50	; 0x32
 80056de:	d101      	bne.n	80056e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4a13      	ldr	r2, [pc, #76]	; (8005754 <USB_FlushTxFifo+0x64>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d901      	bls.n	8005710 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e01b      	b.n	8005748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	daf2      	bge.n	80056fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	019b      	lsls	r3, r3, #6
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4a08      	ldr	r2, [pc, #32]	; (8005754 <USB_FlushTxFifo+0x64>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e006      	b.n	8005748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b20      	cmp	r3, #32
 8005744:	d0f0      	beq.n	8005728 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	00030d40 	.word	0x00030d40

08005758 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <USB_FlushRxFifo+0x5c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e018      	b.n	80057a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	daf2      	bge.n	8005764 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2210      	movs	r2, #16
 8005786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <USB_FlushRxFifo+0x5c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e006      	b.n	80057a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d0f0      	beq.n	8005788 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	00030d40 	.word	0x00030d40

080057b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	; 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4611      	mov	r1, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	460b      	mov	r3, r1
 80057c8:	71fb      	strb	r3, [r7, #7]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d123      	bne.n	8005826 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057de:	88bb      	ldrh	r3, [r7, #4]
 80057e0:	3303      	adds	r3, #3
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e018      	b.n	800581e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	031a      	lsls	r2, r3, #12
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f8:	461a      	mov	r2, r3
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	3301      	adds	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	3301      	adds	r3, #1
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	429a      	cmp	r2, r3
 8005824:	d3e2      	bcc.n	80057ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3724      	adds	r7, #36	; 0x24
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005834:	b480      	push	{r7}
 8005836:	b08b      	sub	sp, #44	; 0x2c
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	b29b      	uxth	r3, r3
 8005850:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800585a:	2300      	movs	r3, #0
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	e014      	b.n	800588a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	601a      	str	r2, [r3, #0]
    pDest++;
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	3301      	adds	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	3301      	adds	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	3301      	adds	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	3301      	adds	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	3301      	adds	r3, #1
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	429a      	cmp	r2, r3
 8005890:	d3e6      	bcc.n	8005860 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005892:	8bfb      	ldrh	r3, [r7, #30]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01e      	beq.n	80058d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a2:	461a      	mov	r2, r3
 80058a4:	f107 0310 	add.w	r3, r7, #16
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	701a      	strb	r2, [r3, #0]
      i++;
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	3301      	adds	r3, #1
 80058c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058ca:	8bfb      	ldrh	r3, [r7, #30]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058d0:	8bfb      	ldrh	r3, [r7, #30]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1ea      	bne.n	80058ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058d8:	4618      	mov	r0, r3
 80058da:	372c      	adds	r7, #44	; 0x2c
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4013      	ands	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058fc:	68fb      	ldr	r3, [r7, #12]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0301 	and.w	r3, r3, #1
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a13      	ldr	r2, [pc, #76]	; (800598c <USB_CoreReset+0x64>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e01b      	b.n	800597e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	daf2      	bge.n	8005934 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a09      	ldr	r2, [pc, #36]	; (800598c <USB_CoreReset+0x64>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e006      	b.n	800597e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b01      	cmp	r3, #1
 800597a:	d0f0      	beq.n	800595e <USB_CoreReset+0x36>

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	00030d40 	.word	0x00030d40

08005990 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005990:	b084      	sub	sp, #16
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800599e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059b0:	461a      	mov	r2, r3
 80059b2:	2300      	movs	r3, #0
 80059b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d018      	beq.n	8005a18 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d10a      	bne.n	8005a02 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059fa:	f043 0304 	orr.w	r3, r3, #4
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	e014      	b.n	8005a2c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e009      	b.n	8005a2c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a26:	f023 0304 	bic.w	r3, r3, #4
 8005a2a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a2c:	2110      	movs	r1, #16
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fe5e 	bl	80056f0 <USB_FlushTxFifo>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff fe8a 	bl	8005758 <USB_FlushRxFifo>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	e015      	b.n	8005a80 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a60:	461a      	mov	r2, r3
 8005a62:	f04f 33ff 	mov.w	r3, #4294967295
 8005a66:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a74:	461a      	mov	r2, r3
 8005a76:	2300      	movs	r3, #0
 8005a78:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d3e5      	bcc.n	8005a54 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f04f 32ff 	mov.w	r2, #4294967295
 8005a94:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a13      	ldr	r2, [pc, #76]	; (8005afc <USB_HostInit+0x16c>)
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <USB_HostInit+0x170>)
 8005ab4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005ab8:	e009      	b.n	8005ace <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2280      	movs	r2, #128	; 0x80
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a10      	ldr	r2, [pc, #64]	; (8005b04 <USB_HostInit+0x174>)
 8005ac4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a0f      	ldr	r2, [pc, #60]	; (8005b08 <USB_HostInit+0x178>)
 8005aca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f043 0210 	orr.w	r2, r3, #16
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <USB_HostInit+0x17c>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005af8:	b004      	add	sp, #16
 8005afa:	4770      	bx	lr
 8005afc:	01000200 	.word	0x01000200
 8005b00:	00e00300 	.word	0x00e00300
 8005b04:	00600080 	.word	0x00600080
 8005b08:	004000e0 	.word	0x004000e0
 8005b0c:	a3200008 	.word	0xa3200008

08005b10 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d107      	bne.n	8005b62 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b5e:	6053      	str	r3, [r2, #4]
 8005b60:	e009      	b.n	8005b76 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d106      	bne.n	8005b76 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b74:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ba4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005bb4:	2064      	movs	r0, #100	; 0x64
 8005bb6:	f7fb fa9f 	bl	80010f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005bc8:	200a      	movs	r0, #10
 8005bca:	f7fb fa95 	bl	80010f8 <HAL_Delay>

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bfc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <USB_DriveVbus+0x44>
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d106      	bne.n	8005c1c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c1a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c26:	d109      	bne.n	8005c3c <USB_DriveVbus+0x64>
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c3a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	0c5b      	lsrs	r3, r3, #17
 8005c68:	f003 0303 	and.w	r3, r3, #3
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	b29b      	uxth	r3, r3
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4603      	mov	r3, r0
 8005cac:	70fb      	strb	r3, [r7, #3]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70bb      	strb	r3, [r7, #2]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005cd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d87e      	bhi.n	8005dd8 <USB_HC_Init+0x13c>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <USB_HC_Init+0x44>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cf1 	.word	0x08005cf1
 8005ce4:	08005d9b 	.word	0x08005d9b
 8005ce8:	08005cf1 	.word	0x08005cf1
 8005cec:	08005d5d 	.word	0x08005d5d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	da10      	bge.n	8005d2e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005d2c:	e057      	b.n	8005dde <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d051      	beq.n	8005dde <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	78fa      	ldrb	r2, [r7, #3]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d58:	60d3      	str	r3, [r2, #12]
      break;
 8005d5a:	e040      	b.n	8005dde <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	da34      	bge.n	8005de2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d96:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d98:	e023      	b.n	8005de2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da6:	461a      	mov	r2, r3
 8005da8:	f240 2325 	movw	r3, #549	; 0x225
 8005dac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005dae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	da17      	bge.n	8005de6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005dd4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005dd6:	e006      	b.n	8005de6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	77fb      	strb	r3, [r7, #31]
      break;
 8005ddc:	e004      	b.n	8005de8 <USB_HC_Init+0x14c>
      break;
 8005dde:	bf00      	nop
 8005de0:	e002      	b.n	8005de8 <USB_HC_Init+0x14c>
      break;
 8005de2:	bf00      	nop
 8005de4:	e000      	b.n	8005de8 <USB_HC_Init+0x14c>
      break;
 8005de6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e02:	f043 0302 	orr.w	r3, r3, #2
 8005e06:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	2101      	movs	r1, #1
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	6939      	ldr	r1, [r7, #16]
 8005e1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e22:	4313      	orrs	r3, r2
 8005e24:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da03      	bge.n	8005e42 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e001      	b.n	8005e46 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff feff 	bl	8005c4a <USB_GetHostSpeed>
 8005e4c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d106      	bne.n	8005e64 <USB_HC_Init+0x1c8>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d003      	beq.n	8005e64 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e001      	b.n	8005e68 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e68:	787b      	ldrb	r3, [r7, #1]
 8005e6a:	059b      	lsls	r3, r3, #22
 8005e6c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e70:	78bb      	ldrb	r3, [r7, #2]
 8005e72:	02db      	lsls	r3, r3, #11
 8005e74:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e78:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e7e:	049b      	lsls	r3, r3, #18
 8005e80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e84:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	0159      	lsls	r1, r3, #5
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	440b      	add	r3, r1
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ea4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d003      	beq.n	8005eb6 <USB_HC_Init+0x21a>
 8005eae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d10f      	bne.n	8005ed6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08c      	sub	sp, #48	; 0x30
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005efc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d02d      	beq.n	8005f66 <USB_HC_StartXfer+0x86>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	791b      	ldrb	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d129      	bne.n	8005f66 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d117      	bne.n	8005f48 <USB_HC_StartXfer+0x68>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	79db      	ldrb	r3, [r3, #7]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <USB_HC_StartXfer+0x48>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	79db      	ldrb	r3, [r3, #7]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d10f      	bne.n	8005f48 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	6a3a      	ldr	r2, [r7, #32]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <USB_HC_StartXfer+0x86>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	795b      	ldrb	r3, [r3, #5]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d107      	bne.n	8005f66 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fa0f 	bl	8006380 <USB_DoPing>
      return HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e0f8      	b.n	8006158 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d018      	beq.n	8005fa0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	8912      	ldrh	r2, [r2, #8]
 8005f76:	4413      	add	r3, r2
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	8912      	ldrh	r2, [r2, #8]
 8005f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f82:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005f84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f86:	8b7b      	ldrh	r3, [r7, #26]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d90b      	bls.n	8005fa4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005f8c:	8b7b      	ldrh	r3, [r7, #26]
 8005f8e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	8912      	ldrh	r2, [r2, #8]
 8005f96:	fb03 f202 	mul.w	r2, r3, r2
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	611a      	str	r2, [r3, #16]
 8005f9e:	e001      	b.n	8005fa4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	78db      	ldrb	r3, [r3, #3]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	8912      	ldrh	r2, [r2, #8]
 8005fb2:	fb03 f202 	mul.w	r2, r3, r2
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	611a      	str	r2, [r3, #16]
 8005fba:	e003      	b.n	8005fc4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fce:	04d9      	lsls	r1, r3, #19
 8005fd0:	4b63      	ldr	r3, [pc, #396]	; (8006160 <USB_HC_StartXfer+0x280>)
 8005fd2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fd4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	7a9b      	ldrb	r3, [r3, #10]
 8005fda:	075b      	lsls	r3, r3, #29
 8005fdc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fe0:	69f9      	ldr	r1, [r7, #28]
 8005fe2:	0148      	lsls	r0, r1, #5
 8005fe4:	6a39      	ldr	r1, [r7, #32]
 8005fe6:	4401      	add	r1, r0
 8005fe8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	68d9      	ldr	r1, [r3, #12]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	4413      	add	r3, r2
 8006002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006006:	460a      	mov	r2, r1
 8006008:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	440a      	add	r2, r1
 8006038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006040:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	7e7b      	ldrb	r3, [r7, #25]
 8006052:	075b      	lsls	r3, r3, #29
 8006054:	69f9      	ldr	r1, [r7, #28]
 8006056:	0148      	lsls	r0, r1, #5
 8006058:	6a39      	ldr	r1, [r7, #32]
 800605a:	4401      	add	r1, r0
 800605c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006060:	4313      	orrs	r3, r2
 8006062:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800607a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	78db      	ldrb	r3, [r3, #3]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d004      	beq.n	800608e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	e003      	b.n	8006096 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006094:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800609c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060aa:	461a      	mov	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e04e      	b.n	8006158 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	78db      	ldrb	r3, [r3, #3]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d149      	bne.n	8006156 <USB_HC_StartXfer+0x276>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d045      	beq.n	8006156 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	79db      	ldrb	r3, [r3, #7]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d830      	bhi.n	8006134 <USB_HC_StartXfer+0x254>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <USB_HC_StartXfer+0x1f8>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060e9 	.word	0x080060e9
 80060dc:	0800610d 	.word	0x0800610d
 80060e0:	080060e9 	.word	0x080060e9
 80060e4:	0800610d 	.word	0x0800610d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	3303      	adds	r3, #3
 80060ee:	089b      	lsrs	r3, r3, #2
 80060f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80060f2:	8afa      	ldrh	r2, [r7, #22]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d91c      	bls.n	8006138 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f043 0220 	orr.w	r2, r3, #32
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	619a      	str	r2, [r3, #24]
        }
        break;
 800610a:	e015      	b.n	8006138 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	3303      	adds	r3, #3
 8006112:	089b      	lsrs	r3, r3, #2
 8006114:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006116:	8afa      	ldrh	r2, [r7, #22]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	b29b      	uxth	r3, r3
 8006122:	429a      	cmp	r2, r3
 8006124:	d90a      	bls.n	800613c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	619a      	str	r2, [r3, #24]
        }
        break;
 8006132:	e003      	b.n	800613c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006134:	bf00      	nop
 8006136:	e002      	b.n	800613e <USB_HC_StartXfer+0x25e>
        break;
 8006138:	bf00      	nop
 800613a:	e000      	b.n	800613e <USB_HC_StartXfer+0x25e>
        break;
 800613c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	68d9      	ldr	r1, [r3, #12]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	785a      	ldrb	r2, [r3, #1]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	b29b      	uxth	r3, r3
 800614c:	2000      	movs	r0, #0
 800614e:	9000      	str	r0, [sp, #0]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff fb31 	bl	80057b8 <USB_WritePacket>
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3728      	adds	r7, #40	; 0x28
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	1ff80000 	.word	0x1ff80000

08006164 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	b29b      	uxth	r3, r3
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006186:	b480      	push	{r7}
 8006188:	b089      	sub	sp, #36	; 0x24
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	0c9b      	lsrs	r3, r3, #18
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	0fdb      	lsrs	r3, r3, #31
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d104      	bne.n	80061e0 <USB_HC_Halt+0x5a>
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	e0c8      	b.n	8006372 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <USB_HC_Halt+0x66>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d163      	bne.n	80062b4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	440a      	add	r2, r1
 8006202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800620a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 80ab 	bne.w	8006370 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d133      	bne.n	800628e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	440a      	add	r2, r1
 800623c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006244:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	440a      	add	r2, r1
 800625c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006264:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006272:	d81d      	bhi.n	80062b0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800628a:	d0ec      	beq.n	8006266 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800628c:	e070      	b.n	8006370 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062ae:	e05f      	b.n	8006370 <USB_HC_Halt+0x1ea>
            break;
 80062b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062b2:	e05d      	b.n	8006370 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d133      	bne.n	800634c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006302:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	4413      	add	r3, r2
 800630c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	440a      	add	r2, r1
 800631a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006322:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006330:	d81d      	bhi.n	800636e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006348:	d0ec      	beq.n	8006324 <USB_HC_Halt+0x19e>
 800634a:	e011      	b.n	8006370 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	4413      	add	r3, r2
 8006354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	440a      	add	r2, r1
 8006362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e000      	b.n	8006370 <USB_HC_Halt+0x1ea>
          break;
 800636e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3724      	adds	r7, #36	; 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006394:	2301      	movs	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	04da      	lsls	r2, r3, #19
 800639c:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <USB_DoPing+0x74>)
 800639e:	4013      	ands	r3, r2
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063de:	461a      	mov	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	1ff80000 	.word	0x1ff80000

080063f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff f911 	bl	8005634 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006412:	2110      	movs	r1, #16
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff f96b 	bl	80056f0 <USB_FlushTxFifo>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff f997 	bl	8005758 <USB_FlushRxFifo>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006434:	2300      	movs	r3, #0
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	e01f      	b.n	800647a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006450:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006458:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006460:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	4413      	add	r3, r2
 800646a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646e:	461a      	mov	r2, r3
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	3301      	adds	r3, #1
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b0f      	cmp	r3, #15
 800647e:	d9dc      	bls.n	800643a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006480:	2300      	movs	r3, #0
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	e034      	b.n	80064f0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800649c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	461a      	mov	r2, r3
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3301      	adds	r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064cc:	d80c      	bhi.n	80064e8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e4:	d0ec      	beq.n	80064c0 <USB_StopHost+0xc8>
 80064e6:	e000      	b.n	80064ea <USB_StopHost+0xf2>
        break;
 80064e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	3301      	adds	r3, #1
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b0f      	cmp	r3, #15
 80064f4:	d9c7      	bls.n	8006486 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064fc:	461a      	mov	r2, r3
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006502:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f04f 32ff 	mov.w	r2, #4294967295
 800650a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff f880 	bl	8005612 <USB_EnableGlobalInt>

  return ret;
 8006512:	7ffb      	ldrb	r3, [r7, #31]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800651c:	b590      	push	{r4, r7, lr}
 800651e:	b089      	sub	sp, #36	; 0x24
 8006520:	af04      	add	r7, sp, #16
 8006522:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006524:	2301      	movs	r3, #1
 8006526:	2202      	movs	r2, #2
 8006528:	2102      	movs	r1, #2
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fc66 	bl	8006dfc <USBH_FindInterface>
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2bff      	cmp	r3, #255	; 0xff
 8006538:	d002      	beq.n	8006540 <USBH_CDC_InterfaceInit+0x24>
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d901      	bls.n	8006544 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006540:	2302      	movs	r3, #2
 8006542:	e13d      	b.n	80067c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc3b 	bl	8006dc4 <USBH_SelectInterface>
 800654e:	4603      	mov	r3, r0
 8006550:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006558:	2302      	movs	r3, #2
 800655a:	e131      	b.n	80067c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006562:	2050      	movs	r0, #80	; 0x50
 8006564:	f002 fafa 	bl	8008b5c <malloc>
 8006568:	4603      	mov	r3, r0
 800656a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800657c:	2302      	movs	r3, #2
 800657e:	e11f      	b.n	80067c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006580:	2250      	movs	r2, #80	; 0x50
 8006582:	2100      	movs	r1, #0
 8006584:	68b8      	ldr	r0, [r7, #8]
 8006586:	f002 faf9 	bl	8008b7c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	211a      	movs	r1, #26
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	b25b      	sxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	da15      	bge.n	80065ce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	211a      	movs	r1, #26
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	4413      	add	r3, r2
 80065ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	211a      	movs	r1, #26
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065c8:	881a      	ldrh	r2, [r3, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 ff2c 	bl	8008432 <USBH_AllocPipe>
 80065da:	4603      	mov	r3, r0
 80065dc:	461a      	mov	r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	7819      	ldrb	r1, [r3, #0]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	7858      	ldrb	r0, [r3, #1]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	8952      	ldrh	r2, [r2, #10]
 80065fa:	9202      	str	r2, [sp, #8]
 80065fc:	2203      	movs	r2, #3
 80065fe:	9201      	str	r2, [sp, #4]
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	4623      	mov	r3, r4
 8006604:	4602      	mov	r2, r0
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fee4 	bl	80083d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2200      	movs	r2, #0
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f002 f9f3 	bl	8008a00 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800661a:	2300      	movs	r3, #0
 800661c:	2200      	movs	r2, #0
 800661e:	210a      	movs	r1, #10
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fbeb 	bl	8006dfc <USBH_FindInterface>
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2bff      	cmp	r3, #255	; 0xff
 800662e:	d002      	beq.n	8006636 <USBH_CDC_InterfaceInit+0x11a>
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d901      	bls.n	800663a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006636:	2302      	movs	r3, #2
 8006638:	e0c2      	b.n	80067c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	211a      	movs	r1, #26
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	b25b      	sxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	da16      	bge.n	8006680 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	211a      	movs	r1, #26
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	4413      	add	r3, r2
 800665e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	211a      	movs	r1, #26
 800666e:	fb01 f303 	mul.w	r3, r1, r3
 8006672:	4413      	add	r3, r2
 8006674:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006678:	881a      	ldrh	r2, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	835a      	strh	r2, [r3, #26]
 800667e:	e015      	b.n	80066ac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	211a      	movs	r1, #26
 8006686:	fb01 f303 	mul.w	r3, r1, r3
 800668a:	4413      	add	r3, r2
 800668c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006690:	781a      	ldrb	r2, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	211a      	movs	r1, #26
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066a6:	881a      	ldrh	r2, [r3, #0]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	211a      	movs	r1, #26
 80066b2:	fb01 f303 	mul.w	r3, r1, r3
 80066b6:	4413      	add	r3, r2
 80066b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	b25b      	sxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	da16      	bge.n	80066f2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	211a      	movs	r1, #26
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	211a      	movs	r1, #26
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80066ea:	881a      	ldrh	r2, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	835a      	strh	r2, [r3, #26]
 80066f0:	e015      	b.n	800671e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	211a      	movs	r1, #26
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	4413      	add	r3, r2
 80066fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	211a      	movs	r1, #26
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	4413      	add	r3, r2
 8006714:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006718:	881a      	ldrh	r2, [r3, #0]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	7b9b      	ldrb	r3, [r3, #14]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 fe84 	bl	8008432 <USBH_AllocPipe>
 800672a:	4603      	mov	r3, r0
 800672c:	461a      	mov	r2, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	7bdb      	ldrb	r3, [r3, #15]
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 fe7a 	bl	8008432 <USBH_AllocPipe>
 800673e:	4603      	mov	r3, r0
 8006740:	461a      	mov	r2, r3
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	7b59      	ldrb	r1, [r3, #13]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	7b98      	ldrb	r0, [r3, #14]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	8b12      	ldrh	r2, [r2, #24]
 800675e:	9202      	str	r2, [sp, #8]
 8006760:	2202      	movs	r2, #2
 8006762:	9201      	str	r2, [sp, #4]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	4623      	mov	r3, r4
 8006768:	4602      	mov	r2, r0
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 fe32 	bl	80083d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	7b19      	ldrb	r1, [r3, #12]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	7bd8      	ldrb	r0, [r3, #15]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	8b52      	ldrh	r2, [r2, #26]
 8006788:	9202      	str	r2, [sp, #8]
 800678a:	2202      	movs	r2, #2
 800678c:	9201      	str	r2, [sp, #4]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	4623      	mov	r3, r4
 8006792:	4602      	mov	r2, r0
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 fe1d 	bl	80083d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	7b5b      	ldrb	r3, [r3, #13]
 80067a6:	2200      	movs	r2, #0
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f002 f928 	bl	8008a00 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	7b1b      	ldrb	r3, [r3, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f002 f921 	bl	8008a00 <USBH_LL_SetToggle>

  return USBH_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd90      	pop	{r4, r7, pc}

080067c8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00e      	beq.n	8006800 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 fe12 	bl	8008412 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fe3d 	bl	8008474 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	7b1b      	ldrb	r3, [r3, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00e      	beq.n	8006826 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	7b1b      	ldrb	r3, [r3, #12]
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 fdff 	bl	8008412 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	7b1b      	ldrb	r3, [r3, #12]
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fe2a 	bl	8008474 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	7b5b      	ldrb	r3, [r3, #13]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00e      	beq.n	800684c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	7b5b      	ldrb	r3, [r3, #13]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fdec 	bl	8008412 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	7b5b      	ldrb	r3, [r3, #13]
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 fe17 	bl	8008474 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	4618      	mov	r0, r3
 8006862:	f002 f983 	bl	8008b6c <free>
    phost->pActiveClass->pData = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800686c:	2200      	movs	r2, #0
 800686e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3340      	adds	r3, #64	; 0x40
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f8b1 	bl	80069fa <GetLineCoding>
 8006898:	4603      	mov	r3, r0
 800689a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068a8:	2102      	movs	r1, #2
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80068ae:	7afb      	ldrb	r3, [r7, #11]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d877      	bhi.n	80069cc <USBH_CDC_Process+0x114>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <USBH_CDC_Process+0x2c>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	080068f9 	.word	0x080068f9
 80068e8:	080068ff 	.word	0x080068ff
 80068ec:	0800692f 	.word	0x0800692f
 80068f0:	080069a3 	.word	0x080069a3
 80068f4:	080069b1 	.word	0x080069b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	73fb      	strb	r3, [r7, #15]
      break;
 80068fc:	e06d      	b.n	80069da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f897 	bl	8006a38 <SetLineCoding>
 800690a:	4603      	mov	r3, r0
 800690c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800691c:	e058      	b.n	80069d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800691e:	7bbb      	ldrb	r3, [r7, #14]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d055      	beq.n	80069d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2204      	movs	r2, #4
 8006928:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800692c:	e050      	b.n	80069d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	3340      	adds	r3, #64	; 0x40
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f860 	bl	80069fa <GetLineCoding>
 800693a:	4603      	mov	r3, r0
 800693c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d126      	bne.n	8006992 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006956:	791b      	ldrb	r3, [r3, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	d13b      	bne.n	80069d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006966:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006968:	429a      	cmp	r2, r3
 800696a:	d133      	bne.n	80069d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006976:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006978:	429a      	cmp	r2, r3
 800697a:	d12b      	bne.n	80069d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006984:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006986:	429a      	cmp	r2, r3
 8006988:	d124      	bne.n	80069d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f958 	bl	8006c40 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006990:	e020      	b.n	80069d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d01d      	beq.n	80069d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2204      	movs	r2, #4
 800699c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069a0:	e018      	b.n	80069d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f867 	bl	8006a76 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8da 	bl	8006b62 <CDC_ProcessReception>
      break;
 80069ae:	e014      	b.n	80069da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80069b0:	2100      	movs	r1, #0
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 ffef 	bl	8007996 <USBH_ClrFeature>
 80069b8:	4603      	mov	r3, r0
 80069ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069bc:	7bbb      	ldrb	r3, [r7, #14]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80069ca:	e005      	b.n	80069d8 <USBH_CDC_Process+0x120>

    default:
      break;
 80069cc:	bf00      	nop
 80069ce:	e004      	b.n	80069da <USBH_CDC_Process+0x122>
      break;
 80069d0:	bf00      	nop
 80069d2:	e002      	b.n	80069da <USBH_CDC_Process+0x122>
      break;
 80069d4:	bf00      	nop
 80069d6:	e000      	b.n	80069da <USBH_CDC_Process+0x122>
      break;
 80069d8:	bf00      	nop

  }

  return status;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b082      	sub	sp, #8
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	22a1      	movs	r2, #161	; 0xa1
 8006a08:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2221      	movs	r2, #33	; 0x21
 8006a0e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2207      	movs	r2, #7
 8006a20:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2207      	movs	r2, #7
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fa81 	bl	8007f30 <USBH_CtlReq>
 8006a2e:	4603      	mov	r3, r0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2221      	movs	r2, #33	; 0x21
 8006a46:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2207      	movs	r2, #7
 8006a5e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2207      	movs	r2, #7
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fa62 	bl	8007f30 <USBH_CtlReq>
 8006a6c:	4603      	mov	r3, r0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b086      	sub	sp, #24
 8006a7a:	af02      	add	r7, sp, #8
 8006a7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d002      	beq.n	8006a9c <CDC_ProcessTransmission+0x26>
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d023      	beq.n	8006ae2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a9a:	e05e      	b.n	8006b5a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	8b12      	ldrh	r2, [r2, #24]
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d90b      	bls.n	8006ac0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	69d9      	ldr	r1, [r3, #28]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8b1a      	ldrh	r2, [r3, #24]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	7b5b      	ldrb	r3, [r3, #13]
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	9000      	str	r0, [sp, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fc48 	bl	800834e <USBH_BulkSendData>
 8006abe:	e00b      	b.n	8006ad8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	7b5b      	ldrb	r3, [r3, #13]
 8006ace:	2001      	movs	r0, #1
 8006ad0:	9000      	str	r0, [sp, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fc3b 	bl	800834e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ae0:	e03b      	b.n	8006b5a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	7b5b      	ldrb	r3, [r3, #13]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 ff5f 	bl	80089ac <USBH_LL_GetURBState>
 8006aee:	4603      	mov	r3, r0
 8006af0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006af2:	7afb      	ldrb	r3, [r7, #11]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d128      	bne.n	8006b4a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	8b12      	ldrh	r2, [r2, #24]
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d90e      	bls.n	8006b22 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	8b12      	ldrh	r2, [r2, #24]
 8006b0c:	1a9a      	subs	r2, r3, r2
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	8b12      	ldrh	r2, [r2, #24]
 8006b1a:	441a      	add	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	61da      	str	r2, [r3, #28]
 8006b20:	e002      	b.n	8006b28 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b38:	e00e      	b.n	8006b58 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f868 	bl	8006c18 <USBH_CDC_TransmitCallback>
      break;
 8006b48:	e006      	b.n	8006b58 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006b4a:	7afb      	ldrb	r3, [r7, #11]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d103      	bne.n	8006b58 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b58:	bf00      	nop
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d002      	beq.n	8006b88 <CDC_ProcessReception+0x26>
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d00e      	beq.n	8006ba4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006b86:	e043      	b.n	8006c10 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	6a19      	ldr	r1, [r3, #32]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	8b5a      	ldrh	r2, [r3, #26]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	7b1b      	ldrb	r3, [r3, #12]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fbff 	bl	8008398 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ba2:	e035      	b.n	8006c10 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	7b1b      	ldrb	r3, [r3, #12]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 fefe 	bl	80089ac <USBH_LL_GetURBState>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d129      	bne.n	8006c0e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	7b1b      	ldrb	r3, [r3, #12]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fe61 	bl	8008888 <USBH_LL_GetLastXferSize>
 8006bc6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d016      	beq.n	8006c00 <CDC_ProcessReception+0x9e>
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	8b5b      	ldrh	r3, [r3, #26]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d910      	bls.n	8006c00 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1ad2      	subs	r2, r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a1a      	ldr	r2, [r3, #32]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	441a      	add	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006bfe:	e006      	b.n	8006c0e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f80f 	bl	8006c2c <USBH_CDC_ReceiveCallback>
      break;
 8006c0e:	bf00      	nop
  }
}
 8006c10:	bf00      	nop
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e029      	b.n	8006cc0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	79fa      	ldrb	r2, [r7, #7]
 8006c70:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f81f 	bl	8006cc8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f001 fd31 	bl	8008720 <USBH_LL_Init>

  return USBH_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	e009      	b.n	8006cee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	33e0      	adds	r3, #224	; 0xe0
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3301      	adds	r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b0f      	cmp	r3, #15
 8006cf2:	d9f2      	bls.n	8006cda <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e009      	b.n	8006d0e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d14:	d3f1      	bcc.n	8006cfa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2240      	movs	r2, #64	; 0x40
 8006d3a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d016      	beq.n	8006db2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10e      	bne.n	8006dac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d94:	1c59      	adds	r1, r3, #1
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	33de      	adds	r3, #222	; 0xde
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]
 8006daa:	e004      	b.n	8006db6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006dac:	2302      	movs	r3, #2
 8006dae:	73fb      	strb	r3, [r7, #15]
 8006db0:	e001      	b.n	8006db6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006db2:	2302      	movs	r3, #2
 8006db4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006dda:	78fa      	ldrb	r2, [r7, #3]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d204      	bcs.n	8006dea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006de8:	e001      	b.n	8006dee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006dea:	2302      	movs	r3, #2
 8006dec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	70fb      	strb	r3, [r7, #3]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70bb      	strb	r3, [r7, #2]
 8006e12:	4613      	mov	r3, r2
 8006e14:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006e24:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e26:	e025      	b.n	8006e74 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	221a      	movs	r2, #26
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
 8006e30:	3308      	adds	r3, #8
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	3302      	adds	r3, #2
 8006e38:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	795b      	ldrb	r3, [r3, #5]
 8006e3e:	78fa      	ldrb	r2, [r7, #3]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d002      	beq.n	8006e4a <USBH_FindInterface+0x4e>
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	2bff      	cmp	r3, #255	; 0xff
 8006e48:	d111      	bne.n	8006e6e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e4e:	78ba      	ldrb	r2, [r7, #2]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d002      	beq.n	8006e5a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e54:	78bb      	ldrb	r3, [r7, #2]
 8006e56:	2bff      	cmp	r3, #255	; 0xff
 8006e58:	d109      	bne.n	8006e6e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e5e:	787a      	ldrb	r2, [r7, #1]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d002      	beq.n	8006e6a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e64:	787b      	ldrb	r3, [r7, #1]
 8006e66:	2bff      	cmp	r3, #255	; 0xff
 8006e68:	d101      	bne.n	8006e6e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	e006      	b.n	8006e7c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	3301      	adds	r3, #1
 8006e72:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d9d6      	bls.n	8006e28 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e7a:	23ff      	movs	r3, #255	; 0xff
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 fc81 	bl	8008798 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006e96:	2101      	movs	r1, #1
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fd9a 	bl	80089d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af04      	add	r7, sp, #16
 8006eae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d102      	bne.n	8006eca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b0b      	cmp	r3, #11
 8006ed2:	f200 81be 	bhi.w	8007252 <USBH_Process+0x3aa>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <USBH_Process+0x34>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006f0d 	.word	0x08006f0d
 8006ee0:	08006f3f 	.word	0x08006f3f
 8006ee4:	08006fa7 	.word	0x08006fa7
 8006ee8:	080071ed 	.word	0x080071ed
 8006eec:	08007253 	.word	0x08007253
 8006ef0:	0800704b 	.word	0x0800704b
 8006ef4:	08007193 	.word	0x08007193
 8006ef8:	08007081 	.word	0x08007081
 8006efc:	080070a1 	.word	0x080070a1
 8006f00:	080070c1 	.word	0x080070c1
 8006f04:	08007105 	.word	0x08007105
 8006f08:	080071d5 	.word	0x080071d5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 819e 	beq.w	8007256 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006f20:	20c8      	movs	r0, #200	; 0xc8
 8006f22:	f001 fd9d 	bl	8008a60 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fc93 	bl	8008852 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f3c:	e18b      	b.n	8007256 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d107      	bne.n	8006f58 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f56:	e18d      	b.n	8007274 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f62:	d914      	bls.n	8006f8e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d903      	bls.n	8006f86 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	220d      	movs	r2, #13
 8006f82:	701a      	strb	r2, [r3, #0]
      break;
 8006f84:	e176      	b.n	8007274 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	701a      	strb	r2, [r3, #0]
      break;
 8006f8c:	e172      	b.n	8007274 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f94:	f103 020a 	add.w	r2, r3, #10
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006f9e:	200a      	movs	r0, #10
 8006fa0:	f001 fd5e 	bl	8008a60 <USBH_Delay>
      break;
 8006fa4:	e166      	b.n	8007274 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fb6:	2104      	movs	r1, #4
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006fbc:	2064      	movs	r0, #100	; 0x64
 8006fbe:	f001 fd4f 	bl	8008a60 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 fc1e 	bl	8008804 <USBH_LL_GetSpeed>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2205      	movs	r2, #5
 8006fd6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006fd8:	2100      	movs	r1, #0
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 fa29 	bl	8008432 <USBH_AllocPipe>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006fe8:	2180      	movs	r1, #128	; 0x80
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fa21 	bl	8008432 <USBH_AllocPipe>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	7919      	ldrb	r1, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800700c:	b292      	uxth	r2, r2
 800700e:	9202      	str	r2, [sp, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	9201      	str	r2, [sp, #4]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4603      	mov	r3, r0
 8007018:	2280      	movs	r2, #128	; 0x80
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 f9da 	bl	80083d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	7959      	ldrb	r1, [r3, #5]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007034:	b292      	uxth	r2, r2
 8007036:	9202      	str	r2, [sp, #8]
 8007038:	2200      	movs	r2, #0
 800703a:	9201      	str	r2, [sp, #4]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4603      	mov	r3, r0
 8007040:	2200      	movs	r2, #0
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 f9c6 	bl	80083d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007048:	e114      	b.n	8007274 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f918 	bl	8007280 <USBH_HandleEnum>
 8007050:	4603      	mov	r3, r0
 8007052:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	f040 80fe 	bne.w	800725a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800706c:	2b01      	cmp	r3, #1
 800706e:	d103      	bne.n	8007078 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2208      	movs	r2, #8
 8007074:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007076:	e0f0      	b.n	800725a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2207      	movs	r2, #7
 800707c:	701a      	strb	r2, [r3, #0]
      break;
 800707e:	e0ec      	b.n	800725a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 80e9 	beq.w	800725e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007092:	2101      	movs	r1, #1
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2208      	movs	r2, #8
 800709c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800709e:	e0de      	b.n	800725e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fc2c 	bl	8007908 <USBH_SetCfg>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 80d5 	bne.w	8007262 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2209      	movs	r2, #9
 80070bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070be:	e0d0      	b.n	8007262 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d016      	beq.n	80070fc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80070ce:	2101      	movs	r1, #1
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc3c 	bl	800794e <USBH_SetFeature>
 80070d6:	4603      	mov	r3, r0
 80070d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d103      	bne.n	80070ea <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	220a      	movs	r2, #10
 80070e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070e8:	e0bd      	b.n	8007266 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	f040 80b9 	bne.w	8007266 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	220a      	movs	r2, #10
 80070f8:	701a      	strb	r2, [r3, #0]
      break;
 80070fa:	e0b4      	b.n	8007266 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	220a      	movs	r2, #10
 8007100:	701a      	strb	r2, [r3, #0]
      break;
 8007102:	e0b0      	b.n	8007266 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 80ad 	beq.w	800726a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]
 800711c:	e016      	b.n	800714c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800711e:	7bfa      	ldrb	r2, [r7, #15]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32de      	adds	r2, #222	; 0xde
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	791a      	ldrb	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007130:	429a      	cmp	r2, r3
 8007132:	d108      	bne.n	8007146 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007134:	7bfa      	ldrb	r2, [r7, #15]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	32de      	adds	r2, #222	; 0xde
 800713a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007144:	e005      	b.n	8007152 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	3301      	adds	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0e5      	beq.n	800711e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d016      	beq.n	800718a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	4798      	blx	r3
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2206      	movs	r2, #6
 8007172:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800717a:	2103      	movs	r1, #3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007180:	e073      	b.n	800726a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	220d      	movs	r2, #13
 8007186:	701a      	strb	r2, [r3, #0]
      break;
 8007188:	e06f      	b.n	800726a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	220d      	movs	r2, #13
 800718e:	701a      	strb	r2, [r3, #0]
      break;
 8007190:	e06b      	b.n	800726a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d017      	beq.n	80071cc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
 80071a8:	4603      	mov	r3, r0
 80071aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	220b      	movs	r2, #11
 80071b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071ba:	e058      	b.n	800726e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d154      	bne.n	800726e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	220d      	movs	r2, #13
 80071c8:	701a      	strb	r2, [r3, #0]
      break;
 80071ca:	e050      	b.n	800726e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	220d      	movs	r2, #13
 80071d0:	701a      	strb	r2, [r3, #0]
      break;
 80071d2:	e04c      	b.n	800726e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d049      	beq.n	8007272 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	4798      	blx	r3
      }
      break;
 80071ea:	e042      	b.n	8007272 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff fd67 	bl	8006cc8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007228:	2105      	movs	r1, #5
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b01      	cmp	r3, #1
 8007238:	d107      	bne.n	800724a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff fe20 	bl	8006e88 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007248:	e014      	b.n	8007274 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 faa4 	bl	8008798 <USBH_LL_Start>
      break;
 8007250:	e010      	b.n	8007274 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007252:	bf00      	nop
 8007254:	e00e      	b.n	8007274 <USBH_Process+0x3cc>
      break;
 8007256:	bf00      	nop
 8007258:	e00c      	b.n	8007274 <USBH_Process+0x3cc>
      break;
 800725a:	bf00      	nop
 800725c:	e00a      	b.n	8007274 <USBH_Process+0x3cc>
    break;
 800725e:	bf00      	nop
 8007260:	e008      	b.n	8007274 <USBH_Process+0x3cc>
      break;
 8007262:	bf00      	nop
 8007264:	e006      	b.n	8007274 <USBH_Process+0x3cc>
      break;
 8007266:	bf00      	nop
 8007268:	e004      	b.n	8007274 <USBH_Process+0x3cc>
      break;
 800726a:	bf00      	nop
 800726c:	e002      	b.n	8007274 <USBH_Process+0x3cc>
      break;
 800726e:	bf00      	nop
 8007270:	e000      	b.n	8007274 <USBH_Process+0x3cc>
      break;
 8007272:	bf00      	nop
  }
  return USBH_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop

08007280 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af04      	add	r7, sp, #16
 8007286:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007288:	2301      	movs	r3, #1
 800728a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800728c:	2301      	movs	r3, #1
 800728e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b07      	cmp	r3, #7
 8007296:	f200 81c1 	bhi.w	800761c <USBH_HandleEnum+0x39c>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <USBH_HandleEnum+0x20>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072c1 	.word	0x080072c1
 80072a4:	0800737f 	.word	0x0800737f
 80072a8:	080073e9 	.word	0x080073e9
 80072ac:	08007477 	.word	0x08007477
 80072b0:	080074e1 	.word	0x080074e1
 80072b4:	08007551 	.word	0x08007551
 80072b8:	08007597 	.word	0x08007597
 80072bc:	080075dd 	.word	0x080075dd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80072c0:	2108      	movs	r1, #8
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa50 	bl	8007768 <USBH_Get_DevDesc>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d130      	bne.n	8007334 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7919      	ldrb	r1, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072f6:	b292      	uxth	r2, r2
 80072f8:	9202      	str	r2, [sp, #8]
 80072fa:	2200      	movs	r2, #0
 80072fc:	9201      	str	r2, [sp, #4]
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	4603      	mov	r3, r0
 8007302:	2280      	movs	r2, #128	; 0x80
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 f865 	bl	80083d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	7959      	ldrb	r1, [r3, #5]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800731e:	b292      	uxth	r2, r2
 8007320:	9202      	str	r2, [sp, #8]
 8007322:	2200      	movs	r2, #0
 8007324:	9201      	str	r2, [sp, #4]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	4603      	mov	r3, r0
 800732a:	2200      	movs	r2, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f851 	bl	80083d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007332:	e175      	b.n	8007620 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	2b03      	cmp	r3, #3
 8007338:	f040 8172 	bne.w	8007620 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007342:	3301      	adds	r3, #1
 8007344:	b2da      	uxtb	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007352:	2b03      	cmp	r3, #3
 8007354:	d903      	bls.n	800735e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	220d      	movs	r2, #13
 800735a:	701a      	strb	r2, [r3, #0]
      break;
 800735c:	e160      	b.n	8007620 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	795b      	ldrb	r3, [r3, #5]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 f885 	bl	8008474 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	791b      	ldrb	r3, [r3, #4]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 f87f 	bl	8008474 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
      break;
 800737c:	e150      	b.n	8007620 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800737e:	2112      	movs	r1, #18
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f9f1 	bl	8007768 <USBH_Get_DevDesc>
 8007386:	4603      	mov	r3, r0
 8007388:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d103      	bne.n	8007398 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007396:	e145      	b.n	8007624 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b03      	cmp	r3, #3
 800739c:	f040 8142 	bne.w	8007624 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073a6:	3301      	adds	r3, #1
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d903      	bls.n	80073c2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	220d      	movs	r2, #13
 80073be:	701a      	strb	r2, [r3, #0]
      break;
 80073c0:	e130      	b.n	8007624 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	795b      	ldrb	r3, [r3, #5]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 f853 	bl	8008474 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	791b      	ldrb	r3, [r3, #4]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f84d 	bl	8008474 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
      break;
 80073e6:	e11d      	b.n	8007624 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80073e8:	2101      	movs	r1, #1
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa68 	bl	80078c0 <USBH_SetAddress>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d132      	bne.n	8007460 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80073fa:	2002      	movs	r0, #2
 80073fc:	f001 fb30 	bl	8008a60 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2203      	movs	r2, #3
 800740c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	7919      	ldrb	r1, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007422:	b292      	uxth	r2, r2
 8007424:	9202      	str	r2, [sp, #8]
 8007426:	2200      	movs	r2, #0
 8007428:	9201      	str	r2, [sp, #4]
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	4603      	mov	r3, r0
 800742e:	2280      	movs	r2, #128	; 0x80
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 ffcf 	bl	80083d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7959      	ldrb	r1, [r3, #5]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800744a:	b292      	uxth	r2, r2
 800744c:	9202      	str	r2, [sp, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	9201      	str	r2, [sp, #4]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4603      	mov	r3, r0
 8007456:	2200      	movs	r2, #0
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 ffbb 	bl	80083d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800745e:	e0e3      	b.n	8007628 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	2b03      	cmp	r3, #3
 8007464:	f040 80e0 	bne.w	8007628 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	220d      	movs	r2, #13
 800746c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	705a      	strb	r2, [r3, #1]
      break;
 8007474:	e0d8      	b.n	8007628 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007476:	2109      	movs	r1, #9
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f99d 	bl	80077b8 <USBH_Get_CfgDesc>
 800747e:	4603      	mov	r3, r0
 8007480:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d103      	bne.n	8007490 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2204      	movs	r2, #4
 800748c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800748e:	e0cd      	b.n	800762c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	2b03      	cmp	r3, #3
 8007494:	f040 80ca 	bne.w	800762c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800749e:	3301      	adds	r3, #1
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d903      	bls.n	80074ba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	220d      	movs	r2, #13
 80074b6:	701a      	strb	r2, [r3, #0]
      break;
 80074b8:	e0b8      	b.n	800762c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	795b      	ldrb	r3, [r3, #5]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 ffd7 	bl	8008474 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	791b      	ldrb	r3, [r3, #4]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 ffd1 	bl	8008474 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
      break;
 80074de:	e0a5      	b.n	800762c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f965 	bl	80077b8 <USBH_Get_CfgDesc>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d103      	bne.n	8007500 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2205      	movs	r2, #5
 80074fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074fe:	e097      	b.n	8007630 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	2b03      	cmp	r3, #3
 8007504:	f040 8094 	bne.w	8007630 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800750e:	3301      	adds	r3, #1
 8007510:	b2da      	uxtb	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800751e:	2b03      	cmp	r3, #3
 8007520:	d903      	bls.n	800752a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	220d      	movs	r2, #13
 8007526:	701a      	strb	r2, [r3, #0]
      break;
 8007528:	e082      	b.n	8007630 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	795b      	ldrb	r3, [r3, #5]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 ff9f 	bl	8008474 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	791b      	ldrb	r3, [r3, #4]
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 ff99 	bl	8008474 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	701a      	strb	r2, [r3, #0]
      break;
 800754e:	e06f      	b.n	8007630 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007556:	2b00      	cmp	r3, #0
 8007558:	d019      	beq.n	800758e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007566:	23ff      	movs	r3, #255	; 0xff
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f949 	bl	8007800 <USBH_Get_StringDesc>
 800756e:	4603      	mov	r3, r0
 8007570:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2206      	movs	r2, #6
 800757c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800757e:	e059      	b.n	8007634 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d156      	bne.n	8007634 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2206      	movs	r2, #6
 800758a:	705a      	strb	r2, [r3, #1]
      break;
 800758c:	e052      	b.n	8007634 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2206      	movs	r2, #6
 8007592:	705a      	strb	r2, [r3, #1]
      break;
 8007594:	e04e      	b.n	8007634 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800759c:	2b00      	cmp	r3, #0
 800759e:	d019      	beq.n	80075d4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80075ac:	23ff      	movs	r3, #255	; 0xff
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f926 	bl	8007800 <USBH_Get_StringDesc>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d103      	bne.n	80075c6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2207      	movs	r2, #7
 80075c2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075c4:	e038      	b.n	8007638 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d135      	bne.n	8007638 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2207      	movs	r2, #7
 80075d0:	705a      	strb	r2, [r3, #1]
      break;
 80075d2:	e031      	b.n	8007638 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2207      	movs	r2, #7
 80075d8:	705a      	strb	r2, [r3, #1]
      break;
 80075da:	e02d      	b.n	8007638 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d017      	beq.n	8007616 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075f2:	23ff      	movs	r3, #255	; 0xff
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f903 	bl	8007800 <USBH_Get_StringDesc>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007608:	e018      	b.n	800763c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d115      	bne.n	800763c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]
      break;
 8007614:	e012      	b.n	800763c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]
      break;
 800761a:	e00f      	b.n	800763c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800761c:	bf00      	nop
 800761e:	e00e      	b.n	800763e <USBH_HandleEnum+0x3be>
      break;
 8007620:	bf00      	nop
 8007622:	e00c      	b.n	800763e <USBH_HandleEnum+0x3be>
      break;
 8007624:	bf00      	nop
 8007626:	e00a      	b.n	800763e <USBH_HandleEnum+0x3be>
      break;
 8007628:	bf00      	nop
 800762a:	e008      	b.n	800763e <USBH_HandleEnum+0x3be>
      break;
 800762c:	bf00      	nop
 800762e:	e006      	b.n	800763e <USBH_HandleEnum+0x3be>
      break;
 8007630:	bf00      	nop
 8007632:	e004      	b.n	800763e <USBH_HandleEnum+0x3be>
      break;
 8007634:	bf00      	nop
 8007636:	e002      	b.n	800763e <USBH_HandleEnum+0x3be>
      break;
 8007638:	bf00      	nop
 800763a:	e000      	b.n	800763e <USBH_HandleEnum+0x3be>
      break;
 800763c:	bf00      	nop
  }
  return Status;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f804 	bl	800768a <USBH_HandleSof>
}
 8007682:	bf00      	nop
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b0b      	cmp	r3, #11
 800769a:	d10a      	bne.n	80076b2 <USBH_HandleSof+0x28>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d005      	beq.n	80076b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
  }
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80076ca:	bf00      	nop
}
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80076e6:	bf00      	nop
}
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 f844 	bl	80087ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	791b      	ldrb	r3, [r3, #4]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fe91 	bl	8008474 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	795b      	ldrb	r3, [r3, #5]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fe8b 	bl	8008474 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af02      	add	r7, sp, #8
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	b29b      	uxth	r3, r3
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007786:	2100      	movs	r1, #0
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f864 	bl	8007856 <USBH_GetDescriptor>
 800778e:	4603      	mov	r3, r0
 8007790:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10a      	bne.n	80077ae <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077a4:	78fa      	ldrb	r2, [r7, #3]
 80077a6:	b292      	uxth	r2, r2
 80077a8:	4619      	mov	r1, r3
 80077aa:	f000 f918 	bl	80079de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af02      	add	r7, sp, #8
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	331c      	adds	r3, #28
 80077c8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80077ca:	887b      	ldrh	r3, [r7, #2]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d4:	2100      	movs	r1, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f83d 	bl	8007856 <USBH_GetDescriptor>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d107      	bne.n	80077f6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	461a      	mov	r2, r3
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f987 	bl	8007b00 <USBH_ParseCfgDesc>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	607a      	str	r2, [r7, #4]
 800780a:	461a      	mov	r2, r3
 800780c:	460b      	mov	r3, r1
 800780e:	72fb      	strb	r3, [r7, #11]
 8007810:	4613      	mov	r3, r2
 8007812:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800781c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007824:	893b      	ldrh	r3, [r7, #8]
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	460b      	mov	r3, r1
 800782a:	2100      	movs	r1, #0
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f812 	bl	8007856 <USBH_GetDescriptor>
 8007832:	4603      	mov	r3, r0
 8007834:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d107      	bne.n	800784c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007842:	893a      	ldrh	r2, [r7, #8]
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fb24 	bl	8007e94 <USBH_ParseStringDesc>
  }

  return status;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	607b      	str	r3, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	72fb      	strb	r3, [r7, #11]
 8007864:	4613      	mov	r3, r2
 8007866:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	789b      	ldrb	r3, [r3, #2]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d11c      	bne.n	80078aa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007876:	b2da      	uxtb	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2206      	movs	r2, #6
 8007880:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	893a      	ldrh	r2, [r7, #8]
 8007886:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007888:	893b      	ldrh	r3, [r7, #8]
 800788a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800788e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007892:	d104      	bne.n	800789e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f240 4209 	movw	r2, #1033	; 0x409
 800789a:	829a      	strh	r2, [r3, #20]
 800789c:	e002      	b.n	80078a4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8b3a      	ldrh	r2, [r7, #24]
 80078a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80078aa:	8b3b      	ldrh	r3, [r7, #24]
 80078ac:	461a      	mov	r2, r3
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fb3d 	bl	8007f30 <USBH_CtlReq>
 80078b6:	4603      	mov	r3, r0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	789b      	ldrb	r3, [r3, #2]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d10f      	bne.n	80078f4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2205      	movs	r2, #5
 80078de:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80078f4:	2200      	movs	r2, #0
 80078f6:	2100      	movs	r1, #0
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fb19 	bl	8007f30 <USBH_CtlReq>
 80078fe:	4603      	mov	r3, r0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	789b      	ldrb	r3, [r3, #2]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d10e      	bne.n	800793a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2209      	movs	r2, #9
 8007926:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	887a      	ldrh	r2, [r7, #2]
 800792c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800793a:	2200      	movs	r2, #0
 800793c:	2100      	movs	r1, #0
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 faf6 	bl	8007f30 <USBH_CtlReq>
 8007944:	4603      	mov	r3, r0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	789b      	ldrb	r3, [r3, #2]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d10f      	bne.n	8007982 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2203      	movs	r2, #3
 800796c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	b29a      	uxth	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fad2 	bl	8007f30 <USBH_CtlReq>
 800798c:	4603      	mov	r3, r0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	789b      	ldrb	r3, [r3, #2]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d10f      	bne.n	80079ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2202      	movs	r2, #2
 80079ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80079ca:	2200      	movs	r2, #0
 80079cc:	2100      	movs	r1, #0
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 faae 	bl	8007f30 <USBH_CtlReq>
 80079d4:	4603      	mov	r3, r0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	4613      	mov	r3, r2
 80079ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	785a      	ldrb	r2, [r3, #1]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	3302      	adds	r3, #2
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	3303      	adds	r3, #3
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	4313      	orrs	r3, r2
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	791a      	ldrb	r2, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	795a      	ldrb	r2, [r3, #5]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	799a      	ldrb	r2, [r3, #6]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	79da      	ldrb	r2, [r3, #7]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	79db      	ldrb	r3, [r3, #7]
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	dc11      	bgt.n	8007a64 <USBH_ParseDevDesc+0x86>
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	db16      	blt.n	8007a72 <USBH_ParseDevDesc+0x94>
 8007a44:	3b08      	subs	r3, #8
 8007a46:	2201      	movs	r2, #1
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bf14      	ite	ne
 8007a58:	2301      	movne	r3, #1
 8007a5a:	2300      	moveq	r3, #0
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <USBH_ParseDevDesc+0x8a>
 8007a62:	e006      	b.n	8007a72 <USBH_ParseDevDesc+0x94>
 8007a64:	2b40      	cmp	r3, #64	; 0x40
 8007a66:	d104      	bne.n	8007a72 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	79da      	ldrb	r2, [r3, #7]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	71da      	strb	r2, [r3, #7]
      break;
 8007a70:	e003      	b.n	8007a7a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2240      	movs	r2, #64	; 0x40
 8007a76:	71da      	strb	r2, [r3, #7]
      break;
 8007a78:	bf00      	nop
  }

  if (length > 8U)
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d939      	bls.n	8007af4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	3308      	adds	r3, #8
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	3309      	adds	r3, #9
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	4313      	orrs	r3, r2
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	330a      	adds	r3, #10
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	330b      	adds	r3, #11
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	330c      	adds	r3, #12
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	330d      	adds	r3, #13
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4313      	orrs	r3, r2
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	7b9a      	ldrb	r2, [r3, #14]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	7bda      	ldrb	r2, [r3, #15]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	7c1a      	ldrb	r2, [r3, #16]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	7c5a      	ldrb	r2, [r3, #17]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	745a      	strb	r2, [r3, #17]
  }
}
 8007af4:	bf00      	nop
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08c      	sub	sp, #48	; 0x30
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b14:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	781a      	ldrb	r2, [r3, #0]
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	785a      	ldrb	r2, [r3, #1]
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	3302      	adds	r3, #2
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	3303      	adds	r3, #3
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b5c:	bf28      	it	cs
 8007b5e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	791a      	ldrb	r2, [r3, #4]
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	795a      	ldrb	r2, [r3, #5]
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	799a      	ldrb	r2, [r3, #6]
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	79da      	ldrb	r2, [r3, #7]
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	7a1a      	ldrb	r2, [r3, #8]
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b09      	cmp	r3, #9
 8007b96:	d002      	beq.n	8007b9e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2209      	movs	r2, #9
 8007b9c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	f240 809d 	bls.w	8007ce0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ba6:	2309      	movs	r3, #9
 8007ba8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007bae:	e081      	b.n	8007cb4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007bb0:	f107 0316 	add.w	r3, r7, #22
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb8:	f000 f99f 	bl	8007efa <USBH_GetNextDesc>
 8007bbc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d176      	bne.n	8007cb4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b09      	cmp	r3, #9
 8007bcc:	d002      	beq.n	8007bd4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	2209      	movs	r2, #9
 8007bd2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bd8:	221a      	movs	r2, #26
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	3308      	adds	r3, #8
 8007be0:	6a3a      	ldr	r2, [r7, #32]
 8007be2:	4413      	add	r3, r2
 8007be4:	3302      	adds	r3, #2
 8007be6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bea:	69f8      	ldr	r0, [r7, #28]
 8007bec:	f000 f87e 	bl	8007cec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007bfa:	e043      	b.n	8007c84 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007bfc:	f107 0316 	add.w	r3, r7, #22
 8007c00:	4619      	mov	r1, r3
 8007c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c04:	f000 f979 	bl	8007efa <USBH_GetNextDesc>
 8007c08:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d138      	bne.n	8007c84 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	795b      	ldrb	r3, [r3, #5]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d10f      	bne.n	8007c3a <USBH_ParseCfgDesc+0x13a>
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	799b      	ldrb	r3, [r3, #6]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d10b      	bne.n	8007c3a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	79db      	ldrb	r3, [r3, #7]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10f      	bne.n	8007c4a <USBH_ParseCfgDesc+0x14a>
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	d00b      	beq.n	8007c4a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	2209      	movs	r2, #9
 8007c36:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c38:	e007      	b.n	8007c4a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b07      	cmp	r3, #7
 8007c40:	d004      	beq.n	8007c4c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	2207      	movs	r2, #7
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	e000      	b.n	8007c4c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c4a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c54:	3201      	adds	r2, #1
 8007c56:	00d2      	lsls	r2, r2, #3
 8007c58:	211a      	movs	r1, #26
 8007c5a:	fb01 f303 	mul.w	r3, r1, r3
 8007c5e:	4413      	add	r3, r2
 8007c60:	3308      	adds	r3, #8
 8007c62:	6a3a      	ldr	r2, [r7, #32]
 8007c64:	4413      	add	r3, r2
 8007c66:	3304      	adds	r3, #4
 8007c68:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c6c:	69b9      	ldr	r1, [r7, #24]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 f86b 	bl	8007d4a <USBH_ParseEPDesc>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c7e:	3301      	adds	r3, #1
 8007c80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	791b      	ldrb	r3, [r3, #4]
 8007c88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d204      	bcs.n	8007c9a <USBH_ParseCfgDesc+0x19a>
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	885a      	ldrh	r2, [r3, #2]
 8007c94:	8afb      	ldrh	r3, [r7, #22]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d8b0      	bhi.n	8007bfc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	791b      	ldrb	r3, [r3, #4]
 8007c9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d201      	bcs.n	8007caa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e01c      	b.n	8007ce4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cae:	3301      	adds	r3, #1
 8007cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d805      	bhi.n	8007cc8 <USBH_ParseCfgDesc+0x1c8>
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	885a      	ldrh	r2, [r3, #2]
 8007cc0:	8afb      	ldrh	r3, [r7, #22]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	f63f af74 	bhi.w	8007bb0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	791b      	ldrb	r3, [r3, #4]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	bf28      	it	cs
 8007cd0:	2302      	movcs	r3, #2
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d201      	bcs.n	8007ce0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e001      	b.n	8007ce4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3730      	adds	r7, #48	; 0x30
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781a      	ldrb	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	785a      	ldrb	r2, [r3, #1]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	789a      	ldrb	r2, [r3, #2]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	78da      	ldrb	r2, [r3, #3]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	791a      	ldrb	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	795a      	ldrb	r2, [r3, #5]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	799a      	ldrb	r2, [r3, #6]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	79da      	ldrb	r2, [r3, #7]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	7a1a      	ldrb	r2, [r3, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	721a      	strb	r2, [r3, #8]
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b087      	sub	sp, #28
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	781a      	ldrb	r2, [r3, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	785a      	ldrb	r2, [r3, #1]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	789a      	ldrb	r2, [r3, #2]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	78da      	ldrb	r2, [r3, #3]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3305      	adds	r3, #5
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	799a      	ldrb	r2, [r3, #6]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	889b      	ldrh	r3, [r3, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d102      	bne.n	8007dac <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007da6:	2303      	movs	r3, #3
 8007da8:	75fb      	strb	r3, [r7, #23]
 8007daa:	e033      	b.n	8007e14 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	889b      	ldrh	r3, [r3, #4]
 8007db0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007db4:	f023 0307 	bic.w	r3, r3, #7
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	889b      	ldrh	r3, [r3, #4]
 8007dc2:	b21a      	sxth	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b299      	uxth	r1, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3305      	adds	r3, #5
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d110      	bne.n	8007e06 <USBH_ParseEPDesc+0xbc>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	b299      	uxth	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3305      	adds	r3, #5
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	430b      	orrs	r3, r1
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	b21b      	sxth	r3, r3
 8007dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e02:	b21b      	sxth	r3, r3
 8007e04:	e001      	b.n	8007e0a <USBH_ParseEPDesc+0xc0>
 8007e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	b21b      	sxth	r3, r3
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d116      	bne.n	8007e4c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	78db      	ldrb	r3, [r3, #3]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d005      	beq.n	8007e36 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	78db      	ldrb	r3, [r3, #3]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d127      	bne.n	8007e86 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	799b      	ldrb	r3, [r3, #6]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <USBH_ParseEPDesc+0xfc>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	799b      	ldrb	r3, [r3, #6]
 8007e42:	2b10      	cmp	r3, #16
 8007e44:	d91f      	bls.n	8007e86 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e46:	2303      	movs	r3, #3
 8007e48:	75fb      	strb	r3, [r7, #23]
 8007e4a:	e01c      	b.n	8007e86 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	78db      	ldrb	r3, [r3, #3]
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d10a      	bne.n	8007e6e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	799b      	ldrb	r3, [r3, #6]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <USBH_ParseEPDesc+0x11e>
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	799b      	ldrb	r3, [r3, #6]
 8007e64:	2b10      	cmp	r3, #16
 8007e66:	d90e      	bls.n	8007e86 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	75fb      	strb	r3, [r7, #23]
 8007e6c:	e00b      	b.n	8007e86 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	78db      	ldrb	r3, [r3, #3]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d105      	bne.n	8007e86 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	799b      	ldrb	r3, [r3, #6]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e82:	2303      	movs	r3, #3
 8007e84:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	371c      	adds	r7, #28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d120      	bne.n	8007eee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	1e9a      	subs	r2, r3, #2
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	bf28      	it	cs
 8007eb8:	4613      	movcs	r3, r2
 8007eba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	82fb      	strh	r3, [r7, #22]
 8007ec6:	e00b      	b.n	8007ee0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ec8:	8afb      	ldrh	r3, [r7, #22]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	781a      	ldrb	r2, [r3, #0]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007eda:	8afb      	ldrh	r3, [r7, #22]
 8007edc:	3302      	adds	r3, #2
 8007ede:	82fb      	strh	r3, [r7, #22]
 8007ee0:	8afa      	ldrh	r2, [r7, #22]
 8007ee2:	8abb      	ldrh	r3, [r7, #20]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d3ef      	bcc.n	8007ec8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2200      	movs	r2, #0
 8007eec:	701a      	strb	r2, [r3, #0]
  }
}
 8007eee:	bf00      	nop
 8007ef0:	371c      	adds	r7, #28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	881a      	ldrh	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	4413      	add	r3, r2
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4413      	add	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f22:	68fb      	ldr	r3, [r7, #12]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	789b      	ldrb	r3, [r3, #2]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d002      	beq.n	8007f50 <USBH_CtlReq+0x20>
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d00f      	beq.n	8007f6e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007f4e:	e027      	b.n	8007fa0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	88fa      	ldrh	r2, [r7, #6]
 8007f5a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2202      	movs	r2, #2
 8007f66:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6c:	e018      	b.n	8007fa0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f81c 	bl	8007fac <USBH_HandleControl>
 8007f74:	4603      	mov	r3, r0
 8007f76:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <USBH_CtlReq+0x54>
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	d106      	bne.n	8007f92 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2201      	movs	r2, #1
 8007f88:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	761a      	strb	r2, [r3, #24]
      break;
 8007f90:	e005      	b.n	8007f9e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d102      	bne.n	8007f9e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	709a      	strb	r2, [r3, #2]
      break;
 8007f9e:	bf00      	nop
  }
  return status;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af02      	add	r7, sp, #8
 8007fb2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	7e1b      	ldrb	r3, [r3, #24]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	2b0a      	cmp	r3, #10
 8007fc4:	f200 8156 	bhi.w	8008274 <USBH_HandleControl+0x2c8>
 8007fc8:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <USBH_HandleControl+0x24>)
 8007fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fce:	bf00      	nop
 8007fd0:	08007ffd 	.word	0x08007ffd
 8007fd4:	08008017 	.word	0x08008017
 8007fd8:	08008081 	.word	0x08008081
 8007fdc:	080080a7 	.word	0x080080a7
 8007fe0:	080080df 	.word	0x080080df
 8007fe4:	08008109 	.word	0x08008109
 8007fe8:	0800815b 	.word	0x0800815b
 8007fec:	0800817d 	.word	0x0800817d
 8007ff0:	080081b9 	.word	0x080081b9
 8007ff4:	080081df 	.word	0x080081df
 8007ff8:	0800821d 	.word	0x0800821d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f103 0110 	add.w	r1, r3, #16
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	795b      	ldrb	r3, [r3, #5]
 8008006:	461a      	mov	r2, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f943 	bl	8008294 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	761a      	strb	r2, [r3, #24]
      break;
 8008014:	e139      	b.n	800828a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	795b      	ldrb	r3, [r3, #5]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fcc5 	bl	80089ac <USBH_LL_GetURBState>
 8008022:	4603      	mov	r3, r0
 8008024:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d11e      	bne.n	800806a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	7c1b      	ldrb	r3, [r3, #16]
 8008030:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008034:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	8adb      	ldrh	r3, [r3, #22]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800803e:	7b7b      	ldrb	r3, [r7, #13]
 8008040:	2b80      	cmp	r3, #128	; 0x80
 8008042:	d103      	bne.n	800804c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2203      	movs	r2, #3
 8008048:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800804a:	e115      	b.n	8008278 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2205      	movs	r2, #5
 8008050:	761a      	strb	r2, [r3, #24]
      break;
 8008052:	e111      	b.n	8008278 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008054:	7b7b      	ldrb	r3, [r7, #13]
 8008056:	2b80      	cmp	r3, #128	; 0x80
 8008058:	d103      	bne.n	8008062 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2209      	movs	r2, #9
 800805e:	761a      	strb	r2, [r3, #24]
      break;
 8008060:	e10a      	b.n	8008278 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2207      	movs	r2, #7
 8008066:	761a      	strb	r2, [r3, #24]
      break;
 8008068:	e106      	b.n	8008278 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b04      	cmp	r3, #4
 800806e:	d003      	beq.n	8008078 <USBH_HandleControl+0xcc>
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	2b02      	cmp	r3, #2
 8008074:	f040 8100 	bne.w	8008278 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	220b      	movs	r2, #11
 800807c:	761a      	strb	r2, [r3, #24]
      break;
 800807e:	e0fb      	b.n	8008278 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008086:	b29a      	uxth	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6899      	ldr	r1, [r3, #8]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	899a      	ldrh	r2, [r3, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	791b      	ldrb	r3, [r3, #4]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f93a 	bl	8008312 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	761a      	strb	r2, [r3, #24]
      break;
 80080a4:	e0f1      	b.n	800828a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	791b      	ldrb	r3, [r3, #4]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fc7d 	bl	80089ac <USBH_LL_GetURBState>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d102      	bne.n	80080c2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2209      	movs	r2, #9
 80080c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b05      	cmp	r3, #5
 80080c6:	d102      	bne.n	80080ce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80080c8:	2303      	movs	r3, #3
 80080ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080cc:	e0d6      	b.n	800827c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	f040 80d3 	bne.w	800827c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	220b      	movs	r2, #11
 80080da:	761a      	strb	r2, [r3, #24]
      break;
 80080dc:	e0ce      	b.n	800827c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6899      	ldr	r1, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	899a      	ldrh	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	795b      	ldrb	r3, [r3, #5]
 80080ea:	2001      	movs	r0, #1
 80080ec:	9000      	str	r0, [sp, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8ea 	bl	80082c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2206      	movs	r2, #6
 8008104:	761a      	strb	r2, [r3, #24]
      break;
 8008106:	e0c0      	b.n	800828a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	795b      	ldrb	r3, [r3, #5]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fc4c 	bl	80089ac <USBH_LL_GetURBState>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d103      	bne.n	8008126 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2207      	movs	r2, #7
 8008122:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008124:	e0ac      	b.n	8008280 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b05      	cmp	r3, #5
 800812a:	d105      	bne.n	8008138 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	220c      	movs	r2, #12
 8008130:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008132:	2303      	movs	r3, #3
 8008134:	73fb      	strb	r3, [r7, #15]
      break;
 8008136:	e0a3      	b.n	8008280 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d103      	bne.n	8008146 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2205      	movs	r2, #5
 8008142:	761a      	strb	r2, [r3, #24]
      break;
 8008144:	e09c      	b.n	8008280 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b04      	cmp	r3, #4
 800814a:	f040 8099 	bne.w	8008280 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	220b      	movs	r2, #11
 8008152:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008154:	2302      	movs	r3, #2
 8008156:	73fb      	strb	r3, [r7, #15]
      break;
 8008158:	e092      	b.n	8008280 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	791b      	ldrb	r3, [r3, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f8d5 	bl	8008312 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800816e:	b29a      	uxth	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2208      	movs	r2, #8
 8008178:	761a      	strb	r2, [r3, #24]

      break;
 800817a:	e086      	b.n	800828a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	791b      	ldrb	r3, [r3, #4]
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fc12 	bl	80089ac <USBH_LL_GetURBState>
 8008188:	4603      	mov	r3, r0
 800818a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d105      	bne.n	800819e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	220d      	movs	r2, #13
 8008196:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800819c:	e072      	b.n	8008284 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d103      	bne.n	80081ac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	220b      	movs	r2, #11
 80081a8:	761a      	strb	r2, [r3, #24]
      break;
 80081aa:	e06b      	b.n	8008284 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	2b05      	cmp	r3, #5
 80081b0:	d168      	bne.n	8008284 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80081b2:	2303      	movs	r3, #3
 80081b4:	73fb      	strb	r3, [r7, #15]
      break;
 80081b6:	e065      	b.n	8008284 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	795b      	ldrb	r3, [r3, #5]
 80081bc:	2201      	movs	r2, #1
 80081be:	9200      	str	r2, [sp, #0]
 80081c0:	2200      	movs	r2, #0
 80081c2:	2100      	movs	r1, #0
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f87f 	bl	80082c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	220a      	movs	r2, #10
 80081da:	761a      	strb	r2, [r3, #24]
      break;
 80081dc:	e055      	b.n	800828a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	795b      	ldrb	r3, [r3, #5]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fbe1 	bl	80089ac <USBH_LL_GetURBState>
 80081ea:	4603      	mov	r3, r0
 80081ec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d105      	bne.n	8008200 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	220d      	movs	r2, #13
 80081fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081fe:	e043      	b.n	8008288 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b02      	cmp	r3, #2
 8008204:	d103      	bne.n	800820e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2209      	movs	r2, #9
 800820a:	761a      	strb	r2, [r3, #24]
      break;
 800820c:	e03c      	b.n	8008288 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b04      	cmp	r3, #4
 8008212:	d139      	bne.n	8008288 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	220b      	movs	r2, #11
 8008218:	761a      	strb	r2, [r3, #24]
      break;
 800821a:	e035      	b.n	8008288 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	7e5b      	ldrb	r3, [r3, #25]
 8008220:	3301      	adds	r3, #1
 8008222:	b2da      	uxtb	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	765a      	strb	r2, [r3, #25]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	7e5b      	ldrb	r3, [r3, #25]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d806      	bhi.n	800823e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800823c:	e025      	b.n	800828a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008244:	2106      	movs	r1, #6
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	795b      	ldrb	r3, [r3, #5]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f90c 	bl	8008474 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	791b      	ldrb	r3, [r3, #4]
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f906 	bl	8008474 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800826e:	2302      	movs	r3, #2
 8008270:	73fb      	strb	r3, [r7, #15]
      break;
 8008272:	e00a      	b.n	800828a <USBH_HandleControl+0x2de>

    default:
      break;
 8008274:	bf00      	nop
 8008276:	e008      	b.n	800828a <USBH_HandleControl+0x2de>
      break;
 8008278:	bf00      	nop
 800827a:	e006      	b.n	800828a <USBH_HandleControl+0x2de>
      break;
 800827c:	bf00      	nop
 800827e:	e004      	b.n	800828a <USBH_HandleControl+0x2de>
      break;
 8008280:	bf00      	nop
 8008282:	e002      	b.n	800828a <USBH_HandleControl+0x2de>
      break;
 8008284:	bf00      	nop
 8008286:	e000      	b.n	800828a <USBH_HandleControl+0x2de>
      break;
 8008288:	bf00      	nop
  }

  return status;
 800828a:	7bfb      	ldrb	r3, [r7, #15]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af04      	add	r7, sp, #16
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082a2:	79f9      	ldrb	r1, [r7, #7]
 80082a4:	2300      	movs	r3, #0
 80082a6:	9303      	str	r3, [sp, #12]
 80082a8:	2308      	movs	r3, #8
 80082aa:	9302      	str	r3, [sp, #8]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	2300      	movs	r3, #0
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	2300      	movs	r3, #0
 80082b6:	2200      	movs	r2, #0
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fb46 	bl	800894a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af04      	add	r7, sp, #16
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4611      	mov	r1, r2
 80082d4:	461a      	mov	r2, r3
 80082d6:	460b      	mov	r3, r1
 80082d8:	80fb      	strh	r3, [r7, #6]
 80082da:	4613      	mov	r3, r2
 80082dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082ec:	7979      	ldrb	r1, [r7, #5]
 80082ee:	7e3b      	ldrb	r3, [r7, #24]
 80082f0:	9303      	str	r3, [sp, #12]
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	9302      	str	r3, [sp, #8]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	2301      	movs	r3, #1
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	2300      	movs	r3, #0
 8008300:	2200      	movs	r2, #0
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fb21 	bl	800894a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b088      	sub	sp, #32
 8008316:	af04      	add	r7, sp, #16
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	4611      	mov	r1, r2
 800831e:	461a      	mov	r2, r3
 8008320:	460b      	mov	r3, r1
 8008322:	80fb      	strh	r3, [r7, #6]
 8008324:	4613      	mov	r3, r2
 8008326:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008328:	7979      	ldrb	r1, [r7, #5]
 800832a:	2300      	movs	r3, #0
 800832c:	9303      	str	r3, [sp, #12]
 800832e:	88fb      	ldrh	r3, [r7, #6]
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	2301      	movs	r3, #1
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	2300      	movs	r3, #0
 800833c:	2201      	movs	r2, #1
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 fb03 	bl	800894a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008344:	2300      	movs	r3, #0

}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b088      	sub	sp, #32
 8008352:	af04      	add	r7, sp, #16
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	4611      	mov	r1, r2
 800835a:	461a      	mov	r2, r3
 800835c:	460b      	mov	r3, r1
 800835e:	80fb      	strh	r3, [r7, #6]
 8008360:	4613      	mov	r3, r2
 8008362:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008372:	7979      	ldrb	r1, [r7, #5]
 8008374:	7e3b      	ldrb	r3, [r7, #24]
 8008376:	9303      	str	r3, [sp, #12]
 8008378:	88fb      	ldrh	r3, [r7, #6]
 800837a:	9302      	str	r3, [sp, #8]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	2301      	movs	r3, #1
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	2302      	movs	r3, #2
 8008386:	2200      	movs	r2, #0
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fade 	bl	800894a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af04      	add	r7, sp, #16
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	4611      	mov	r1, r2
 80083a4:	461a      	mov	r2, r3
 80083a6:	460b      	mov	r3, r1
 80083a8:	80fb      	strh	r3, [r7, #6]
 80083aa:	4613      	mov	r3, r2
 80083ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083ae:	7979      	ldrb	r1, [r7, #5]
 80083b0:	2300      	movs	r3, #0
 80083b2:	9303      	str	r3, [sp, #12]
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	9302      	str	r3, [sp, #8]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	2301      	movs	r3, #1
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	2302      	movs	r3, #2
 80083c2:	2201      	movs	r2, #1
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fac0 	bl	800894a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af04      	add	r7, sp, #16
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	4608      	mov	r0, r1
 80083de:	4611      	mov	r1, r2
 80083e0:	461a      	mov	r2, r3
 80083e2:	4603      	mov	r3, r0
 80083e4:	70fb      	strb	r3, [r7, #3]
 80083e6:	460b      	mov	r3, r1
 80083e8:	70bb      	strb	r3, [r7, #2]
 80083ea:	4613      	mov	r3, r2
 80083ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80083ee:	7878      	ldrb	r0, [r7, #1]
 80083f0:	78ba      	ldrb	r2, [r7, #2]
 80083f2:	78f9      	ldrb	r1, [r7, #3]
 80083f4:	8b3b      	ldrh	r3, [r7, #24]
 80083f6:	9302      	str	r3, [sp, #8]
 80083f8:	7d3b      	ldrb	r3, [r7, #20]
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	7c3b      	ldrb	r3, [r7, #16]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4603      	mov	r3, r0
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa53 	bl	80088ae <USBH_LL_OpenPipe>

  return USBH_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa72 	bl	800890c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f836 	bl	80084b0 <USBH_GetFreePipe>
 8008444:	4603      	mov	r3, r0
 8008446:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008448:	89fb      	ldrh	r3, [r7, #14]
 800844a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800844e:	4293      	cmp	r3, r2
 8008450:	d00a      	beq.n	8008468 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	89fb      	ldrh	r3, [r7, #14]
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	33e0      	adds	r3, #224	; 0xe0
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008468:	89fb      	ldrh	r3, [r7, #14]
 800846a:	b2db      	uxtb	r3, r3
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	2b0f      	cmp	r3, #15
 8008484:	d80d      	bhi.n	80084a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	33e0      	adds	r3, #224	; 0xe0
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	33e0      	adds	r3, #224	; 0xe0
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
 80084c0:	e00f      	b.n	80084e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	33e0      	adds	r3, #224	; 0xe0
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	e007      	b.n	80084ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	3301      	adds	r3, #1
 80084e0:	73fb      	strb	r3, [r7, #15]
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	2b0f      	cmp	r3, #15
 80084e6:	d9ec      	bls.n	80084c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80084e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80084fc:	2201      	movs	r2, #1
 80084fe:	490e      	ldr	r1, [pc, #56]	; (8008538 <MX_USB_HOST_Init+0x40>)
 8008500:	480e      	ldr	r0, [pc, #56]	; (800853c <MX_USB_HOST_Init+0x44>)
 8008502:	f7fe fba7 	bl	8006c54 <USBH_Init>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800850c:	f7f8 fa5e 	bl	80009cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008510:	490b      	ldr	r1, [pc, #44]	; (8008540 <MX_USB_HOST_Init+0x48>)
 8008512:	480a      	ldr	r0, [pc, #40]	; (800853c <MX_USB_HOST_Init+0x44>)
 8008514:	f7fe fc2c 	bl	8006d70 <USBH_RegisterClass>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800851e:	f7f8 fa55 	bl	80009cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008522:	4806      	ldr	r0, [pc, #24]	; (800853c <MX_USB_HOST_Init+0x44>)
 8008524:	f7fe fcb0 	bl	8006e88 <USBH_Start>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800852e:	f7f8 fa4d 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008532:	bf00      	nop
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	08008559 	.word	0x08008559
 800853c:	2000023c 	.word	0x2000023c
 8008540:	20000010 	.word	0x20000010

08008544 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008548:	4802      	ldr	r0, [pc, #8]	; (8008554 <MX_USB_HOST_Process+0x10>)
 800854a:	f7fe fcad 	bl	8006ea8 <USBH_Process>
}
 800854e:	bf00      	nop
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	2000023c 	.word	0x2000023c

08008558 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	3b01      	subs	r3, #1
 8008568:	2b04      	cmp	r3, #4
 800856a:	d819      	bhi.n	80085a0 <USBH_UserProcess+0x48>
 800856c:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <USBH_UserProcess+0x1c>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	080085a1 	.word	0x080085a1
 8008578:	08008591 	.word	0x08008591
 800857c:	080085a1 	.word	0x080085a1
 8008580:	08008599 	.word	0x08008599
 8008584:	08008589 	.word	0x08008589
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008588:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <USBH_UserProcess+0x58>)
 800858a:	2203      	movs	r2, #3
 800858c:	701a      	strb	r2, [r3, #0]
  break;
 800858e:	e008      	b.n	80085a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <USBH_UserProcess+0x58>)
 8008592:	2202      	movs	r2, #2
 8008594:	701a      	strb	r2, [r3, #0]
  break;
 8008596:	e004      	b.n	80085a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008598:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <USBH_UserProcess+0x58>)
 800859a:	2201      	movs	r2, #1
 800859c:	701a      	strb	r2, [r3, #0]
  break;
 800859e:	e000      	b.n	80085a2 <USBH_UserProcess+0x4a>

  default:
  break;
 80085a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80085a2:	bf00      	nop
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	20000614 	.word	0x20000614

080085b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08a      	sub	sp, #40	; 0x28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085bc:	f107 0314 	add.w	r3, r7, #20
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	609a      	str	r2, [r3, #8]
 80085c8:	60da      	str	r2, [r3, #12]
 80085ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085d4:	d147      	bne.n	8008666 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085d6:	2300      	movs	r3, #0
 80085d8:	613b      	str	r3, [r7, #16]
 80085da:	4b25      	ldr	r3, [pc, #148]	; (8008670 <HAL_HCD_MspInit+0xbc>)
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	4a24      	ldr	r2, [pc, #144]	; (8008670 <HAL_HCD_MspInit+0xbc>)
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	6313      	str	r3, [r2, #48]	; 0x30
 80085e6:	4b22      	ldr	r3, [pc, #136]	; (8008670 <HAL_HCD_MspInit+0xbc>)
 80085e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80085f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085f8:	2300      	movs	r3, #0
 80085fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085fc:	2300      	movs	r3, #0
 80085fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	4619      	mov	r1, r3
 8008606:	481b      	ldr	r0, [pc, #108]	; (8008674 <HAL_HCD_MspInit+0xc0>)
 8008608:	f7f8 feac 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800860c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008612:	2302      	movs	r3, #2
 8008614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008616:	2300      	movs	r3, #0
 8008618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800861a:	2300      	movs	r3, #0
 800861c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800861e:	230a      	movs	r3, #10
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008622:	f107 0314 	add.w	r3, r7, #20
 8008626:	4619      	mov	r1, r3
 8008628:	4812      	ldr	r0, [pc, #72]	; (8008674 <HAL_HCD_MspInit+0xc0>)
 800862a:	f7f8 fe9b 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800862e:	4b10      	ldr	r3, [pc, #64]	; (8008670 <HAL_HCD_MspInit+0xbc>)
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	4a0f      	ldr	r2, [pc, #60]	; (8008670 <HAL_HCD_MspInit+0xbc>)
 8008634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008638:	6353      	str	r3, [r2, #52]	; 0x34
 800863a:	2300      	movs	r3, #0
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <HAL_HCD_MspInit+0xbc>)
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	4a0b      	ldr	r2, [pc, #44]	; (8008670 <HAL_HCD_MspInit+0xbc>)
 8008644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008648:	6453      	str	r3, [r2, #68]	; 0x44
 800864a:	4b09      	ldr	r3, [pc, #36]	; (8008670 <HAL_HCD_MspInit+0xbc>)
 800864c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008656:	2200      	movs	r2, #0
 8008658:	2100      	movs	r1, #0
 800865a:	2043      	movs	r0, #67	; 0x43
 800865c:	f7f8 fe4b 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008660:	2043      	movs	r0, #67	; 0x43
 8008662:	f7f8 fe64 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008666:	bf00      	nop
 8008668:	3728      	adds	r7, #40	; 0x28
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	40023800 	.word	0x40023800
 8008674:	40020000 	.word	0x40020000

08008678 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe ffed 	bl	8007666 <USBH_LL_IncTimer>
}
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff f825 	bl	80076f2 <USBH_LL_Connect>
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff f82e 	bl	8007720 <USBH_LL_Disconnect>
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
 80086d8:	4613      	mov	r3, r2
 80086da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe ffdf 	bl	80076ba <USBH_LL_PortEnabled>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe ffdf 	bl	80076d6 <USBH_LL_PortDisabled>
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800872e:	2b01      	cmp	r3, #1
 8008730:	d12a      	bne.n	8008788 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008732:	4a18      	ldr	r2, [pc, #96]	; (8008794 <USBH_LL_Init+0x74>)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a15      	ldr	r2, [pc, #84]	; (8008794 <USBH_LL_Init+0x74>)
 800873e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008742:	4b14      	ldr	r3, [pc, #80]	; (8008794 <USBH_LL_Init+0x74>)
 8008744:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008748:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800874a:	4b12      	ldr	r3, [pc, #72]	; (8008794 <USBH_LL_Init+0x74>)
 800874c:	2208      	movs	r2, #8
 800874e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008750:	4b10      	ldr	r3, [pc, #64]	; (8008794 <USBH_LL_Init+0x74>)
 8008752:	2201      	movs	r2, #1
 8008754:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008756:	4b0f      	ldr	r3, [pc, #60]	; (8008794 <USBH_LL_Init+0x74>)
 8008758:	2200      	movs	r2, #0
 800875a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800875c:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <USBH_LL_Init+0x74>)
 800875e:	2202      	movs	r2, #2
 8008760:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008762:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <USBH_LL_Init+0x74>)
 8008764:	2200      	movs	r2, #0
 8008766:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008768:	480a      	ldr	r0, [pc, #40]	; (8008794 <USBH_LL_Init+0x74>)
 800876a:	f7f8 ffe3 	bl	8001734 <HAL_HCD_Init>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008774:	f7f8 f92a 	bl	80009cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008778:	4806      	ldr	r0, [pc, #24]	; (8008794 <USBH_LL_Init+0x74>)
 800877a:	f7f9 fbc6 	bl	8001f0a <HAL_HCD_GetCurrentFrame>
 800877e:	4603      	mov	r3, r0
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7fe ff60 	bl	8007648 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000618 	.word	0x20000618

08008798 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7f9 fb35 	bl	8001e1e <HAL_HCD_Start>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 f95c 	bl	8008a78 <USBH_Get_USB_Status>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7f9 fb3d 	bl	8001e64 <HAL_HCD_Stop>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 f941 	bl	8008a78 <USBH_Get_USB_Status>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008816:	4618      	mov	r0, r3
 8008818:	f7f9 fb85 	bl	8001f26 <HAL_HCD_GetCurrentSpeed>
 800881c:	4603      	mov	r3, r0
 800881e:	2b02      	cmp	r3, #2
 8008820:	d00c      	beq.n	800883c <USBH_LL_GetSpeed+0x38>
 8008822:	2b02      	cmp	r3, #2
 8008824:	d80d      	bhi.n	8008842 <USBH_LL_GetSpeed+0x3e>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <USBH_LL_GetSpeed+0x2c>
 800882a:	2b01      	cmp	r3, #1
 800882c:	d003      	beq.n	8008836 <USBH_LL_GetSpeed+0x32>
 800882e:	e008      	b.n	8008842 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008830:	2300      	movs	r3, #0
 8008832:	73fb      	strb	r3, [r7, #15]
    break;
 8008834:	e008      	b.n	8008848 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008836:	2301      	movs	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
    break;
 800883a:	e005      	b.n	8008848 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800883c:	2302      	movs	r3, #2
 800883e:	73fb      	strb	r3, [r7, #15]
    break;
 8008840:	e002      	b.n	8008848 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008842:	2301      	movs	r3, #1
 8008844:	73fb      	strb	r3, [r7, #15]
    break;
 8008846:	bf00      	nop
  }
  return  speed;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008868:	4618      	mov	r0, r3
 800886a:	f7f9 fb18 	bl	8001e9e <HAL_HCD_ResetPort>
 800886e:	4603      	mov	r3, r0
 8008870:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 f8ff 	bl	8008a78 <USBH_Get_USB_Status>
 800887a:	4603      	mov	r3, r0
 800887c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800887e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800889a:	78fa      	ldrb	r2, [r7, #3]
 800889c:	4611      	mov	r1, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f7f9 fb1f 	bl	8001ee2 <HAL_HCD_HC_GetXferCount>
 80088a4:	4603      	mov	r3, r0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088ae:	b590      	push	{r4, r7, lr}
 80088b0:	b089      	sub	sp, #36	; 0x24
 80088b2:	af04      	add	r7, sp, #16
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	461a      	mov	r2, r3
 80088bc:	4603      	mov	r3, r0
 80088be:	70fb      	strb	r3, [r7, #3]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70bb      	strb	r3, [r7, #2]
 80088c4:	4613      	mov	r3, r2
 80088c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088d6:	787c      	ldrb	r4, [r7, #1]
 80088d8:	78ba      	ldrb	r2, [r7, #2]
 80088da:	78f9      	ldrb	r1, [r7, #3]
 80088dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	4623      	mov	r3, r4
 80088ee:	f7f8 ff83 	bl	80017f8 <HAL_HCD_HC_Init>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 f8bd 	bl	8008a78 <USBH_Get_USB_Status>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008902:	7bbb      	ldrb	r3, [r7, #14]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	bd90      	pop	{r4, r7, pc}

0800890c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008926:	78fa      	ldrb	r2, [r7, #3]
 8008928:	4611      	mov	r1, r2
 800892a:	4618      	mov	r0, r3
 800892c:	f7f8 fff3 	bl	8001916 <HAL_HCD_HC_Halt>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	4618      	mov	r0, r3
 8008938:	f000 f89e 	bl	8008a78 <USBH_Get_USB_Status>
 800893c:	4603      	mov	r3, r0
 800893e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008940:	7bbb      	ldrb	r3, [r7, #14]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800894a:	b590      	push	{r4, r7, lr}
 800894c:	b089      	sub	sp, #36	; 0x24
 800894e:	af04      	add	r7, sp, #16
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	4608      	mov	r0, r1
 8008954:	4611      	mov	r1, r2
 8008956:	461a      	mov	r2, r3
 8008958:	4603      	mov	r3, r0
 800895a:	70fb      	strb	r3, [r7, #3]
 800895c:	460b      	mov	r3, r1
 800895e:	70bb      	strb	r3, [r7, #2]
 8008960:	4613      	mov	r3, r2
 8008962:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008972:	787c      	ldrb	r4, [r7, #1]
 8008974:	78ba      	ldrb	r2, [r7, #2]
 8008976:	78f9      	ldrb	r1, [r7, #3]
 8008978:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800897c:	9303      	str	r3, [sp, #12]
 800897e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008980:	9302      	str	r3, [sp, #8]
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	9301      	str	r3, [sp, #4]
 8008986:	f897 3020 	ldrb.w	r3, [r7, #32]
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	4623      	mov	r3, r4
 800898e:	f7f8 ffe5 	bl	800195c <HAL_HCD_HC_SubmitRequest>
 8008992:	4603      	mov	r3, r0
 8008994:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 f86d 	bl	8008a78 <USBH_Get_USB_Status>
 800899e:	4603      	mov	r3, r0
 80089a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd90      	pop	{r4, r7, pc}

080089ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7f9 fa79 	bl	8001eba <HAL_HCD_HC_GetURBState>
 80089c8:	4603      	mov	r3, r0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d103      	bne.n	80089f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f870 	bl	8008ad0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80089f0:	20c8      	movs	r0, #200	; 0xc8
 80089f2:	f7f8 fb81 	bl	80010f8 <HAL_Delay>
  return USBH_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a16:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	212c      	movs	r1, #44	; 0x2c
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	333b      	adds	r3, #59	; 0x3b
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d009      	beq.n	8008a40 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008a2c:	78fb      	ldrb	r3, [r7, #3]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	212c      	movs	r1, #44	; 0x2c
 8008a32:	fb01 f303 	mul.w	r3, r1, r3
 8008a36:	4413      	add	r3, r2
 8008a38:	3354      	adds	r3, #84	; 0x54
 8008a3a:	78ba      	ldrb	r2, [r7, #2]
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	e008      	b.n	8008a52 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	212c      	movs	r1, #44	; 0x2c
 8008a46:	fb01 f303 	mul.w	r3, r1, r3
 8008a4a:	4413      	add	r3, r2
 8008a4c:	3355      	adds	r3, #85	; 0x55
 8008a4e:	78ba      	ldrb	r2, [r7, #2]
 8008a50:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7f8 fb45 	bl	80010f8 <HAL_Delay>
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d817      	bhi.n	8008abc <USBH_Get_USB_Status+0x44>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <USBH_Get_USB_Status+0x1c>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008aa5 	.word	0x08008aa5
 8008a98:	08008aab 	.word	0x08008aab
 8008a9c:	08008ab1 	.word	0x08008ab1
 8008aa0:	08008ab7 	.word	0x08008ab7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa8:	e00b      	b.n	8008ac2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008aaa:	2302      	movs	r3, #2
 8008aac:	73fb      	strb	r3, [r7, #15]
    break;
 8008aae:	e008      	b.n	8008ac2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab4:	e005      	b.n	8008ac2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aba:	e002      	b.n	8008ac2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008abc:	2302      	movs	r3, #2
 8008abe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac0:	bf00      	nop
  }
  return usb_status;
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
 8008ae8:	e001      	b.n	8008aee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008aea:	2301      	movs	r3, #1
 8008aec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	461a      	mov	r2, r3
 8008af2:	2101      	movs	r1, #1
 8008af4:	4803      	ldr	r0, [pc, #12]	; (8008b04 <MX_DriverVbusFS+0x34>)
 8008af6:	f7f8 fdd1 	bl	800169c <HAL_GPIO_WritePin>
}
 8008afa:	bf00      	nop
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	40020800 	.word	0x40020800

08008b08 <__errno>:
 8008b08:	4b01      	ldr	r3, [pc, #4]	; (8008b10 <__errno+0x8>)
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	20000030 	.word	0x20000030

08008b14 <__libc_init_array>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	4d0d      	ldr	r5, [pc, #52]	; (8008b4c <__libc_init_array+0x38>)
 8008b18:	4c0d      	ldr	r4, [pc, #52]	; (8008b50 <__libc_init_array+0x3c>)
 8008b1a:	1b64      	subs	r4, r4, r5
 8008b1c:	10a4      	asrs	r4, r4, #2
 8008b1e:	2600      	movs	r6, #0
 8008b20:	42a6      	cmp	r6, r4
 8008b22:	d109      	bne.n	8008b38 <__libc_init_array+0x24>
 8008b24:	4d0b      	ldr	r5, [pc, #44]	; (8008b54 <__libc_init_array+0x40>)
 8008b26:	4c0c      	ldr	r4, [pc, #48]	; (8008b58 <__libc_init_array+0x44>)
 8008b28:	f000 f92e 	bl	8008d88 <_init>
 8008b2c:	1b64      	subs	r4, r4, r5
 8008b2e:	10a4      	asrs	r4, r4, #2
 8008b30:	2600      	movs	r6, #0
 8008b32:	42a6      	cmp	r6, r4
 8008b34:	d105      	bne.n	8008b42 <__libc_init_array+0x2e>
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3c:	4798      	blx	r3
 8008b3e:	3601      	adds	r6, #1
 8008b40:	e7ee      	b.n	8008b20 <__libc_init_array+0xc>
 8008b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b46:	4798      	blx	r3
 8008b48:	3601      	adds	r6, #1
 8008b4a:	e7f2      	b.n	8008b32 <__libc_init_array+0x1e>
 8008b4c:	08008dc4 	.word	0x08008dc4
 8008b50:	08008dc4 	.word	0x08008dc4
 8008b54:	08008dc4 	.word	0x08008dc4
 8008b58:	08008dc8 	.word	0x08008dc8

08008b5c <malloc>:
 8008b5c:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <malloc+0xc>)
 8008b5e:	4601      	mov	r1, r0
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	f000 b87f 	b.w	8008c64 <_malloc_r>
 8008b66:	bf00      	nop
 8008b68:	20000030 	.word	0x20000030

08008b6c <free>:
 8008b6c:	4b02      	ldr	r3, [pc, #8]	; (8008b78 <free+0xc>)
 8008b6e:	4601      	mov	r1, r0
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	f000 b80b 	b.w	8008b8c <_free_r>
 8008b76:	bf00      	nop
 8008b78:	20000030 	.word	0x20000030

08008b7c <memset>:
 8008b7c:	4402      	add	r2, r0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d100      	bne.n	8008b86 <memset+0xa>
 8008b84:	4770      	bx	lr
 8008b86:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8a:	e7f9      	b.n	8008b80 <memset+0x4>

08008b8c <_free_r>:
 8008b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b8e:	2900      	cmp	r1, #0
 8008b90:	d044      	beq.n	8008c1c <_free_r+0x90>
 8008b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b96:	9001      	str	r0, [sp, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b9e:	bfb8      	it	lt
 8008ba0:	18e4      	addlt	r4, r4, r3
 8008ba2:	f000 f8e3 	bl	8008d6c <__malloc_lock>
 8008ba6:	4a1e      	ldr	r2, [pc, #120]	; (8008c20 <_free_r+0x94>)
 8008ba8:	9801      	ldr	r0, [sp, #4]
 8008baa:	6813      	ldr	r3, [r2, #0]
 8008bac:	b933      	cbnz	r3, 8008bbc <_free_r+0x30>
 8008bae:	6063      	str	r3, [r4, #4]
 8008bb0:	6014      	str	r4, [r2, #0]
 8008bb2:	b003      	add	sp, #12
 8008bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bb8:	f000 b8de 	b.w	8008d78 <__malloc_unlock>
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d908      	bls.n	8008bd2 <_free_r+0x46>
 8008bc0:	6825      	ldr	r5, [r4, #0]
 8008bc2:	1961      	adds	r1, r4, r5
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	bf01      	itttt	eq
 8008bc8:	6819      	ldreq	r1, [r3, #0]
 8008bca:	685b      	ldreq	r3, [r3, #4]
 8008bcc:	1949      	addeq	r1, r1, r5
 8008bce:	6021      	streq	r1, [r4, #0]
 8008bd0:	e7ed      	b.n	8008bae <_free_r+0x22>
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	b10b      	cbz	r3, 8008bdc <_free_r+0x50>
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	d9fa      	bls.n	8008bd2 <_free_r+0x46>
 8008bdc:	6811      	ldr	r1, [r2, #0]
 8008bde:	1855      	adds	r5, r2, r1
 8008be0:	42a5      	cmp	r5, r4
 8008be2:	d10b      	bne.n	8008bfc <_free_r+0x70>
 8008be4:	6824      	ldr	r4, [r4, #0]
 8008be6:	4421      	add	r1, r4
 8008be8:	1854      	adds	r4, r2, r1
 8008bea:	42a3      	cmp	r3, r4
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	d1e0      	bne.n	8008bb2 <_free_r+0x26>
 8008bf0:	681c      	ldr	r4, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	6053      	str	r3, [r2, #4]
 8008bf6:	4421      	add	r1, r4
 8008bf8:	6011      	str	r1, [r2, #0]
 8008bfa:	e7da      	b.n	8008bb2 <_free_r+0x26>
 8008bfc:	d902      	bls.n	8008c04 <_free_r+0x78>
 8008bfe:	230c      	movs	r3, #12
 8008c00:	6003      	str	r3, [r0, #0]
 8008c02:	e7d6      	b.n	8008bb2 <_free_r+0x26>
 8008c04:	6825      	ldr	r5, [r4, #0]
 8008c06:	1961      	adds	r1, r4, r5
 8008c08:	428b      	cmp	r3, r1
 8008c0a:	bf04      	itt	eq
 8008c0c:	6819      	ldreq	r1, [r3, #0]
 8008c0e:	685b      	ldreq	r3, [r3, #4]
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	bf04      	itt	eq
 8008c14:	1949      	addeq	r1, r1, r5
 8008c16:	6021      	streq	r1, [r4, #0]
 8008c18:	6054      	str	r4, [r2, #4]
 8008c1a:	e7ca      	b.n	8008bb2 <_free_r+0x26>
 8008c1c:	b003      	add	sp, #12
 8008c1e:	bd30      	pop	{r4, r5, pc}
 8008c20:	2000091c 	.word	0x2000091c

08008c24 <sbrk_aligned>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4e0e      	ldr	r6, [pc, #56]	; (8008c60 <sbrk_aligned+0x3c>)
 8008c28:	460c      	mov	r4, r1
 8008c2a:	6831      	ldr	r1, [r6, #0]
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	b911      	cbnz	r1, 8008c36 <sbrk_aligned+0x12>
 8008c30:	f000 f88c 	bl	8008d4c <_sbrk_r>
 8008c34:	6030      	str	r0, [r6, #0]
 8008c36:	4621      	mov	r1, r4
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f000 f887 	bl	8008d4c <_sbrk_r>
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	d00a      	beq.n	8008c58 <sbrk_aligned+0x34>
 8008c42:	1cc4      	adds	r4, r0, #3
 8008c44:	f024 0403 	bic.w	r4, r4, #3
 8008c48:	42a0      	cmp	r0, r4
 8008c4a:	d007      	beq.n	8008c5c <sbrk_aligned+0x38>
 8008c4c:	1a21      	subs	r1, r4, r0
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 f87c 	bl	8008d4c <_sbrk_r>
 8008c54:	3001      	adds	r0, #1
 8008c56:	d101      	bne.n	8008c5c <sbrk_aligned+0x38>
 8008c58:	f04f 34ff 	mov.w	r4, #4294967295
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	20000920 	.word	0x20000920

08008c64 <_malloc_r>:
 8008c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c68:	1ccd      	adds	r5, r1, #3
 8008c6a:	f025 0503 	bic.w	r5, r5, #3
 8008c6e:	3508      	adds	r5, #8
 8008c70:	2d0c      	cmp	r5, #12
 8008c72:	bf38      	it	cc
 8008c74:	250c      	movcc	r5, #12
 8008c76:	2d00      	cmp	r5, #0
 8008c78:	4607      	mov	r7, r0
 8008c7a:	db01      	blt.n	8008c80 <_malloc_r+0x1c>
 8008c7c:	42a9      	cmp	r1, r5
 8008c7e:	d905      	bls.n	8008c8c <_malloc_r+0x28>
 8008c80:	230c      	movs	r3, #12
 8008c82:	603b      	str	r3, [r7, #0]
 8008c84:	2600      	movs	r6, #0
 8008c86:	4630      	mov	r0, r6
 8008c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8c:	4e2e      	ldr	r6, [pc, #184]	; (8008d48 <_malloc_r+0xe4>)
 8008c8e:	f000 f86d 	bl	8008d6c <__malloc_lock>
 8008c92:	6833      	ldr	r3, [r6, #0]
 8008c94:	461c      	mov	r4, r3
 8008c96:	bb34      	cbnz	r4, 8008ce6 <_malloc_r+0x82>
 8008c98:	4629      	mov	r1, r5
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	f7ff ffc2 	bl	8008c24 <sbrk_aligned>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	d14d      	bne.n	8008d42 <_malloc_r+0xde>
 8008ca6:	6834      	ldr	r4, [r6, #0]
 8008ca8:	4626      	mov	r6, r4
 8008caa:	2e00      	cmp	r6, #0
 8008cac:	d140      	bne.n	8008d30 <_malloc_r+0xcc>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	4631      	mov	r1, r6
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	eb04 0803 	add.w	r8, r4, r3
 8008cb8:	f000 f848 	bl	8008d4c <_sbrk_r>
 8008cbc:	4580      	cmp	r8, r0
 8008cbe:	d13a      	bne.n	8008d36 <_malloc_r+0xd2>
 8008cc0:	6821      	ldr	r1, [r4, #0]
 8008cc2:	3503      	adds	r5, #3
 8008cc4:	1a6d      	subs	r5, r5, r1
 8008cc6:	f025 0503 	bic.w	r5, r5, #3
 8008cca:	3508      	adds	r5, #8
 8008ccc:	2d0c      	cmp	r5, #12
 8008cce:	bf38      	it	cc
 8008cd0:	250c      	movcc	r5, #12
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f7ff ffa5 	bl	8008c24 <sbrk_aligned>
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d02b      	beq.n	8008d36 <_malloc_r+0xd2>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	442b      	add	r3, r5
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	e00e      	b.n	8008d04 <_malloc_r+0xa0>
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	1b52      	subs	r2, r2, r5
 8008cea:	d41e      	bmi.n	8008d2a <_malloc_r+0xc6>
 8008cec:	2a0b      	cmp	r2, #11
 8008cee:	d916      	bls.n	8008d1e <_malloc_r+0xba>
 8008cf0:	1961      	adds	r1, r4, r5
 8008cf2:	42a3      	cmp	r3, r4
 8008cf4:	6025      	str	r5, [r4, #0]
 8008cf6:	bf18      	it	ne
 8008cf8:	6059      	strne	r1, [r3, #4]
 8008cfa:	6863      	ldr	r3, [r4, #4]
 8008cfc:	bf08      	it	eq
 8008cfe:	6031      	streq	r1, [r6, #0]
 8008d00:	5162      	str	r2, [r4, r5]
 8008d02:	604b      	str	r3, [r1, #4]
 8008d04:	4638      	mov	r0, r7
 8008d06:	f104 060b 	add.w	r6, r4, #11
 8008d0a:	f000 f835 	bl	8008d78 <__malloc_unlock>
 8008d0e:	f026 0607 	bic.w	r6, r6, #7
 8008d12:	1d23      	adds	r3, r4, #4
 8008d14:	1af2      	subs	r2, r6, r3
 8008d16:	d0b6      	beq.n	8008c86 <_malloc_r+0x22>
 8008d18:	1b9b      	subs	r3, r3, r6
 8008d1a:	50a3      	str	r3, [r4, r2]
 8008d1c:	e7b3      	b.n	8008c86 <_malloc_r+0x22>
 8008d1e:	6862      	ldr	r2, [r4, #4]
 8008d20:	42a3      	cmp	r3, r4
 8008d22:	bf0c      	ite	eq
 8008d24:	6032      	streq	r2, [r6, #0]
 8008d26:	605a      	strne	r2, [r3, #4]
 8008d28:	e7ec      	b.n	8008d04 <_malloc_r+0xa0>
 8008d2a:	4623      	mov	r3, r4
 8008d2c:	6864      	ldr	r4, [r4, #4]
 8008d2e:	e7b2      	b.n	8008c96 <_malloc_r+0x32>
 8008d30:	4634      	mov	r4, r6
 8008d32:	6876      	ldr	r6, [r6, #4]
 8008d34:	e7b9      	b.n	8008caa <_malloc_r+0x46>
 8008d36:	230c      	movs	r3, #12
 8008d38:	603b      	str	r3, [r7, #0]
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	f000 f81c 	bl	8008d78 <__malloc_unlock>
 8008d40:	e7a1      	b.n	8008c86 <_malloc_r+0x22>
 8008d42:	6025      	str	r5, [r4, #0]
 8008d44:	e7de      	b.n	8008d04 <_malloc_r+0xa0>
 8008d46:	bf00      	nop
 8008d48:	2000091c 	.word	0x2000091c

08008d4c <_sbrk_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d06      	ldr	r5, [pc, #24]	; (8008d68 <_sbrk_r+0x1c>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	602b      	str	r3, [r5, #0]
 8008d58:	f7f7 ff34 	bl	8000bc4 <_sbrk>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_sbrk_r+0x1a>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_sbrk_r+0x1a>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20000924 	.word	0x20000924

08008d6c <__malloc_lock>:
 8008d6c:	4801      	ldr	r0, [pc, #4]	; (8008d74 <__malloc_lock+0x8>)
 8008d6e:	f000 b809 	b.w	8008d84 <__retarget_lock_acquire_recursive>
 8008d72:	bf00      	nop
 8008d74:	20000928 	.word	0x20000928

08008d78 <__malloc_unlock>:
 8008d78:	4801      	ldr	r0, [pc, #4]	; (8008d80 <__malloc_unlock+0x8>)
 8008d7a:	f000 b804 	b.w	8008d86 <__retarget_lock_release_recursive>
 8008d7e:	bf00      	nop
 8008d80:	20000928 	.word	0x20000928

08008d84 <__retarget_lock_acquire_recursive>:
 8008d84:	4770      	bx	lr

08008d86 <__retarget_lock_release_recursive>:
 8008d86:	4770      	bx	lr

08008d88 <_init>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	bf00      	nop
 8008d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8e:	bc08      	pop	{r3}
 8008d90:	469e      	mov	lr, r3
 8008d92:	4770      	bx	lr

08008d94 <_fini>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	bf00      	nop
 8008d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9a:	bc08      	pop	{r3}
 8008d9c:	469e      	mov	lr, r3
 8008d9e:	4770      	bx	lr
